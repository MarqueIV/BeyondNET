// Number of generated types: 649
// Number of generated members: 4111

// <Header>
using System;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace NativeGeneratedCode;


// </Header>
// <Shared Code>
#if NETSTANDARD2_0 ||  NETCOREAPP2_0 ||  NETCOREAPP2_1 ||  NETCOREAPP2_2 || NET45 || NET451 || NET452 || NET46 || NET461 || NET462 || NET47 || NET471 || NET472 || NET48
public static class ConditionalWeakTable_Extensions
{
    public static void AddOrUpdate<TKey, TValue>(
        this ConditionalWeakTable<TKey, TValue> conditionalWeakTable,
        TKey key,
        TValue value
    ) 
        where TKey: class
        where TValue: class
    {
        conditionalWeakTable.Remove(key);
        conditionalWeakTable.Add(key, value);
    }
}
#endif

internal unsafe class NativeDelegateBox<TDelegateType, TFunctionPointerType>
    where TDelegateType: Delegate
    where TFunctionPointerType: unmanaged
{
    internal TDelegateType Trampoline { get; }
    internal void* Context { get; }
    internal TFunctionPointerType FunctionPointer { get; }

    internal NativeDelegateBox(
        TDelegateType trampoline,
        void* context,
        TFunctionPointerType? functionPointer
    )
    {
        Trampoline = trampoline ?? throw new ArgumentNullException(nameof(trampoline));
        Context = context is not null ? context : throw new ArgumentNullException(nameof(context));
        FunctionPointer = functionPointer ?? throw new ArgumentNullException(nameof(functionPointer));
    }
}

internal static unsafe class InteropUtils
{
    #region Allocation
    internal static GCHandle AllocateGCHandle(this object instance, GCHandleType handleType)
    {
        GCHandle handle = GCHandle.Alloc(instance, handleType);

        return handle;
    }
    
    internal static void* AllocateGCHandleAndGetAddress(this object? instance)
    {
        if (instance is null) {
            return null;
        }
        
        GCHandle handle = instance.AllocateGCHandle(GCHandleType.Normal);
        void* handleAddress = handle.ToHandleAddress();

        return handleAddress;
    }
    #endregion Allocation

    #region Free
    internal static void FreeIfAllocated(void* handleAddress)
    {
        if (handleAddress is null) {
            return;
        }

        GCHandle? handle = GetGCHandle(handleAddress);
        
        handle?.FreeIfAllocated();
    }
    
    internal static void FreeIfAllocated(this GCHandle handle)
    {
        if (!handle.IsAllocated) {
            return;
        }

        handle.Free();
    }
    #endregion Free

    #region Handle Address/GCHandle <-> Object Conversion
    internal static void* ToHandleAddress(this GCHandle handle)
    {
        void* handleAddress = (void*)GCHandle.ToIntPtr(handle);

        return handleAddress;
    }

    internal static GCHandle? GetGCHandle(void* handleAddress)
    {
        if (handleAddress is null) {
            return null;
        }
        
        GCHandle handle = GCHandle.FromIntPtr((nint)handleAddress);

        return handle;
    }

    internal static T? GetInstance<T>(void* handleAddress)
    {
        GCHandle? handle = GetGCHandle(handleAddress);

        object? target = handle?.Target;

        if (target is null) {
            return default;
        }

        T instance = (T)target;

        return instance;
    }
    #endregion Handle Address/GCHandle <-> Object Conversion

    #region Strings
    /// <summary>
    /// This allocates a native char* and copies the contents of the managed string into it.
    /// The allocated native string must be freed when not needed anymore!
    /// </summary>
    internal static byte* CopyToCString(this string? @string)
    {
        if (@string is null) {
            return null;
        }

        byte* cString = (byte*)Marshal.StringToHGlobalAuto(@string);
        
        return cString;
    }

    /// <summary>
    /// This allocates a managed string and copies the contents of the native char* into it.
    /// </summary>
    internal static string? ToDotNetString(byte* cString)
    {
        if (cString is null) {
            return null;
        }
        
        string? @string = Marshal.PtrToStringAuto((nint)cString);

        return @string;
    }
    #endregion Strings

    #region Bools
    internal static byte ToCBool(this bool @bool)
    {
        if (@bool) {
            return 1;
        } else {
            return 0;
        }
    }

    public static bool ToBool(this byte cBool)
    {
        return cBool == 1;
    }
    #endregion Bools
}

// </Shared Code>
// <Unsupported Types>
// Omitted due to settings

// </Unsupported Types>
// <APIs>
internal unsafe class System_Object
{
	[UnmanagedCallersOnly(EntryPoint = "System_Object_GetType")]
	internal static void* /* System.Type */ System_Object_GetType(void* /* System.Object */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Object __selfConverted = InteropUtils.GetInstance<System.Object>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_ToString")]
	internal static byte* /* System.String */ System_Object_ToString(void* /* System.Object */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Object __selfConverted = InteropUtils.GetInstance<System.Object>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_Equals")]
	internal static byte /* System.Boolean */ System_Object_Equals(void* /* System.Object */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Object __selfConverted = InteropUtils.GetInstance<System.Object>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_Equals_1")]
	internal static byte /* System.Boolean */ System_Object_Equals_1(void* /* System.Object */ objA, void* /* System.Object */ objB, void** /* System.Exception */ __outException)
	{
		System.Object objAConverted = InteropUtils.GetInstance<System.Object>(objA);
		System.Object objBConverted = InteropUtils.GetInstance<System.Object>(objB);
	
	    try {
			System.Boolean __returnValue = System.Object.Equals(objAConverted, objBConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_ReferenceEquals")]
	internal static byte /* System.Boolean */ System_Object_ReferenceEquals(void* /* System.Object */ objA, void* /* System.Object */ objB, void** /* System.Exception */ __outException)
	{
		System.Object objAConverted = InteropUtils.GetInstance<System.Object>(objA);
		System.Object objBConverted = InteropUtils.GetInstance<System.Object>(objB);
	
	    try {
			System.Boolean __returnValue = System.Object.ReferenceEquals(objAConverted, objBConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_GetHashCode")]
	internal static int /* System.Int32 */ System_Object_GetHashCode(void* /* System.Object */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Object __selfConverted = InteropUtils.GetInstance<System.Object>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_Create")]
	internal static void* /* System.Object */ System_Object_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Object __returnValue = new System.Object();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_TypeOf")]
	internal static void* /* System.Type */ System_Object_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Object);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Object_Destroy")]
	internal static void /* System.Void */ System_Object_Destroy(void* /* System.Object */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Type
{
	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetType")]
	internal static void* /* System.Type */ System_Type_GetType(byte* /* System.String */ typeName, byte /* System.Boolean */ throwOnError, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetType(typeNameConverted, throwOnErrorConverted, ignoreCaseConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetType_1")]
	internal static void* /* System.Type */ System_Type_GetType_1(byte* /* System.String */ typeName, byte /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetType(typeNameConverted, throwOnErrorConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetType_2")]
	internal static void* /* System.Type */ System_Type_GetType_2(byte* /* System.String */ typeName, void** /* System.Exception */ __outException)
	{
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
	
	    try {
			System.Type __returnValue = System.Type.GetType(typeNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromHandle")]
	internal static void* /* System.Type */ System_Type_GetTypeFromHandle(void* /* System.RuntimeTypeHandle */ handle, void** /* System.Exception */ __outException)
	{
		System.RuntimeTypeHandle handleConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(handle);
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromHandle(handleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetType_3")]
	internal static void* /* System.Type */ System_Type_GetType_3(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetElementType")]
	internal static void* /* System.Type */ System_Type_GetElementType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetElementType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetArrayRank")]
	internal static int /* System.Int32 */ System_Type_GetArrayRank(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetArrayRank();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetGenericTypeDefinition")]
	internal static void* /* System.Type */ System_Type_GetGenericTypeDefinition(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetGenericTypeDefinition();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetGenericArguments")]
	internal static void* /* System.Type[] */ System_Type_GetGenericArguments(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetGenericArguments();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetOptionalCustomModifiers")]
	internal static void* /* System.Type[] */ System_Type_GetOptionalCustomModifiers(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetOptionalCustomModifiers();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetRequiredCustomModifiers")]
	internal static void* /* System.Type[] */ System_Type_GetRequiredCustomModifiers(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetRequiredCustomModifiers();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetGenericParameterConstraints")]
	internal static void* /* System.Type[] */ System_Type_GetGenericParameterConstraints(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetGenericParameterConstraints();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAssignableTo")]
	internal static byte /* System.Boolean */ System_Type_IsAssignableTo(void* /* System.Type */ __self, void* /* System.Type */ targetType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type targetTypeConverted = InteropUtils.GetInstance<System.Type>(targetType);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAssignableTo(targetTypeConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetConstructor")]
	internal static void* /* System.Reflection.ConstructorInfo */ System_Type_GetConstructor(void* /* System.Type */ __self, void* /* System.Type[] */ types, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
	
	    try {
			System.Reflection.ConstructorInfo __returnValue = __selfConverted.GetConstructor(typesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetConstructor_1")]
	internal static void* /* System.Reflection.ConstructorInfo */ System_Type_GetConstructor_1(void* /* System.Type */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Type[] */ types, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
	
	    try {
			System.Reflection.ConstructorInfo __returnValue = __selfConverted.GetConstructor(bindingAttr, typesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetConstructor_2")]
	internal static void* /* System.Reflection.ConstructorInfo */ System_Type_GetConstructor_2(void* /* System.Type */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.ConstructorInfo __returnValue = __selfConverted.GetConstructor(bindingAttr, binderConverted, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetConstructor_3")]
	internal static void* /* System.Reflection.ConstructorInfo */ System_Type_GetConstructor_3(void* /* System.Type */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, System.Reflection.CallingConventions /* System.Reflection.CallingConventions */ callConvention, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.ConstructorInfo __returnValue = __selfConverted.GetConstructor(bindingAttr, binderConverted, callConvention, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetConstructors")]
	internal static void* /* System.Reflection.ConstructorInfo[] */ System_Type_GetConstructors(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.ConstructorInfo[] __returnValue = __selfConverted.GetConstructors();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetConstructors_1")]
	internal static void* /* System.Reflection.ConstructorInfo[] */ System_Type_GetConstructors_1(void* /* System.Type */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.ConstructorInfo[] __returnValue = __selfConverted.GetConstructors(bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEvent")]
	internal static void* /* System.Reflection.EventInfo */ System_Type_GetEvent(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.EventInfo __returnValue = __selfConverted.GetEvent(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEvent_1")]
	internal static void* /* System.Reflection.EventInfo */ System_Type_GetEvent_1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.EventInfo __returnValue = __selfConverted.GetEvent(nameConverted, bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEvents")]
	internal static void* /* System.Reflection.EventInfo[] */ System_Type_GetEvents(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.EventInfo[] __returnValue = __selfConverted.GetEvents();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEvents_1")]
	internal static void* /* System.Reflection.EventInfo[] */ System_Type_GetEvents_1(void* /* System.Type */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.EventInfo[] __returnValue = __selfConverted.GetEvents(bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetField")]
	internal static void* /* System.Reflection.FieldInfo */ System_Type_GetField(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.GetField(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetField_1")]
	internal static void* /* System.Reflection.FieldInfo */ System_Type_GetField_1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.GetField(nameConverted, bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetFields")]
	internal static void* /* System.Reflection.FieldInfo[] */ System_Type_GetFields(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.FieldInfo[] __returnValue = __selfConverted.GetFields();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetFields_1")]
	internal static void* /* System.Reflection.FieldInfo[] */ System_Type_GetFields_1(void* /* System.Type */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.FieldInfo[] __returnValue = __selfConverted.GetFields(bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetFunctionPointerCallingConventions")]
	internal static void* /* System.Type[] */ System_Type_GetFunctionPointerCallingConventions(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetFunctionPointerCallingConventions();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetFunctionPointerReturnType")]
	internal static void* /* System.Type */ System_Type_GetFunctionPointerReturnType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetFunctionPointerReturnType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetFunctionPointerParameterTypes")]
	internal static void* /* System.Type[] */ System_Type_GetFunctionPointerParameterTypes(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetFunctionPointerParameterTypes();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMember")]
	internal static void* /* System.Reflection.MemberInfo[] */ System_Type_GetMember(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.MemberInfo[] __returnValue = __selfConverted.GetMember(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMember_1")]
	internal static void* /* System.Reflection.MemberInfo[] */ System_Type_GetMember_1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.MemberInfo[] __returnValue = __selfConverted.GetMember(nameConverted, bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMember_2")]
	internal static void* /* System.Reflection.MemberInfo[] */ System_Type_GetMember_2(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ type, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.MemberInfo[] __returnValue = __selfConverted.GetMember(nameConverted, type, bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMembers")]
	internal static void* /* System.Reflection.MemberInfo[] */ System_Type_GetMembers(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.MemberInfo[] __returnValue = __selfConverted.GetMembers();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMemberWithSameMetadataDefinitionAs")]
	internal static void* /* System.Reflection.MemberInfo */ System_Type_GetMemberWithSameMetadataDefinitionAs(void* /* System.Type */ __self, void* /* System.Reflection.MemberInfo */ member, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Reflection.MemberInfo memberConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(member);
	
	    try {
			System.Reflection.MemberInfo __returnValue = __selfConverted.GetMemberWithSameMetadataDefinitionAs(memberConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMembers_1")]
	internal static void* /* System.Reflection.MemberInfo[] */ System_Type_GetMembers_1(void* /* System.Type */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.MemberInfo[] __returnValue = __selfConverted.GetMembers(bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod_1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod_1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod_2")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod_2(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Type[] */ types, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, bindingAttr, typesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod_3")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod_3(void* /* System.Type */ __self, byte* /* System.String */ name, void* /* System.Type[] */ types, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, typesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod_4")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod_4(void* /* System.Type */ __self, byte* /* System.String */ name, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod_5")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod_5(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, bindingAttr, binderConverted, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod_6")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod_6(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, System.Reflection.CallingConventions /* System.Reflection.CallingConventions */ callConvention, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, bindingAttr, binderConverted, callConvention, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod_7")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod_7(void* /* System.Type */ __self, byte* /* System.String */ name, int /* System.Int32 */ genericParameterCount, void* /* System.Type[] */ types, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, genericParameterCount, typesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod_8")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod_8(void* /* System.Type */ __self, byte* /* System.String */ name, int /* System.Int32 */ genericParameterCount, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, genericParameterCount, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod_9")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod_9(void* /* System.Type */ __self, byte* /* System.String */ name, int /* System.Int32 */ genericParameterCount, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, genericParameterCount, bindingAttr, binderConverted, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethod_10")]
	internal static void* /* System.Reflection.MethodInfo */ System_Type_GetMethod_10(void* /* System.Type */ __self, byte* /* System.String */ name, int /* System.Int32 */ genericParameterCount, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, System.Reflection.CallingConventions /* System.Reflection.CallingConventions */ callConvention, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, genericParameterCount, bindingAttr, binderConverted, callConvention, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethods")]
	internal static void* /* System.Reflection.MethodInfo[] */ System_Type_GetMethods(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.MethodInfo[] __returnValue = __selfConverted.GetMethods();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetMethods_1")]
	internal static void* /* System.Reflection.MethodInfo[] */ System_Type_GetMethods_1(void* /* System.Type */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.MethodInfo[] __returnValue = __selfConverted.GetMethods(bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetNestedType")]
	internal static void* /* System.Type */ System_Type_GetNestedType(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Type __returnValue = __selfConverted.GetNestedType(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetNestedType_1")]
	internal static void* /* System.Type */ System_Type_GetNestedType_1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Type __returnValue = __selfConverted.GetNestedType(nameConverted, bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetNestedTypes")]
	internal static void* /* System.Type[] */ System_Type_GetNestedTypes(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetNestedTypes();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetNestedTypes_1")]
	internal static void* /* System.Type[] */ System_Type_GetNestedTypes_1(void* /* System.Type */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetNestedTypes(bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperty")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Type_GetProperty(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.GetProperty(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperty_1")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Type_GetProperty_1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.GetProperty(nameConverted, bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperty_2")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Type_GetProperty_2(void* /* System.Type */ __self, byte* /* System.String */ name, void* /* System.Type */ returnType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type returnTypeConverted = InteropUtils.GetInstance<System.Type>(returnType);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.GetProperty(nameConverted, returnTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperty_3")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Type_GetProperty_3(void* /* System.Type */ __self, byte* /* System.String */ name, void* /* System.Type[] */ types, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.GetProperty(nameConverted, typesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperty_4")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Type_GetProperty_4(void* /* System.Type */ __self, byte* /* System.String */ name, void* /* System.Type */ returnType, void* /* System.Type[] */ types, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type returnTypeConverted = InteropUtils.GetInstance<System.Type>(returnType);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.GetProperty(nameConverted, returnTypeConverted, typesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperty_5")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Type_GetProperty_5(void* /* System.Type */ __self, byte* /* System.String */ name, void* /* System.Type */ returnType, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type returnTypeConverted = InteropUtils.GetInstance<System.Type>(returnType);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.GetProperty(nameConverted, returnTypeConverted, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperty_6")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Type_GetProperty_6(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Type */ returnType, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Type returnTypeConverted = InteropUtils.GetInstance<System.Type>(returnType);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.GetProperty(nameConverted, bindingAttr, binderConverted, returnTypeConverted, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperties")]
	internal static void* /* System.Reflection.PropertyInfo[] */ System_Type_GetProperties(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.PropertyInfo[] __returnValue = __selfConverted.GetProperties();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetProperties_1")]
	internal static void* /* System.Reflection.PropertyInfo[] */ System_Type_GetProperties_1(void* /* System.Type */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.PropertyInfo[] __returnValue = __selfConverted.GetProperties(bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetDefaultMembers")]
	internal static void* /* System.Reflection.MemberInfo[] */ System_Type_GetDefaultMembers(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.MemberInfo[] __returnValue = __selfConverted.GetDefaultMembers();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeHandle")]
	internal static void* /* System.RuntimeTypeHandle */ System_Type_GetTypeHandle(void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.RuntimeTypeHandle __returnValue = System.Type.GetTypeHandle(oConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeArray")]
	internal static void* /* System.Type[] */ System_Type_GetTypeArray(void* /* System.Object[] */ args, void** /* System.Exception */ __outException)
	{
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
	
	    try {
			System.Type[] __returnValue = System.Type.GetTypeArray(argsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_Type_GetTypeCode(void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.TypeCode __returnValue = System.Type.GetTypeCode(typeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromCLSID")]
	internal static void* /* System.Type */ System_Type_GetTypeFromCLSID(void* /* System.Guid */ clsid, void** /* System.Exception */ __outException)
	{
		System.Guid clsidConverted = InteropUtils.GetInstance<System.Guid>(clsid);
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromCLSID(clsidConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromCLSID_1")]
	internal static void* /* System.Type */ System_Type_GetTypeFromCLSID_1(void* /* System.Guid */ clsid, byte /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		System.Guid clsidConverted = InteropUtils.GetInstance<System.Guid>(clsid);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromCLSID(clsidConverted, throwOnErrorConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromCLSID_2")]
	internal static void* /* System.Type */ System_Type_GetTypeFromCLSID_2(void* /* System.Guid */ clsid, byte* /* System.String */ server, void** /* System.Exception */ __outException)
	{
		System.Guid clsidConverted = InteropUtils.GetInstance<System.Guid>(clsid);
		System.String serverConverted = InteropUtils.ToDotNetString(server);
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromCLSID(clsidConverted, serverConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromCLSID_3")]
	internal static void* /* System.Type */ System_Type_GetTypeFromCLSID_3(void* /* System.Guid */ clsid, byte* /* System.String */ server, byte /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		System.Guid clsidConverted = InteropUtils.GetInstance<System.Guid>(clsid);
		System.String serverConverted = InteropUtils.ToDotNetString(server);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromCLSID(clsidConverted, serverConverted, throwOnErrorConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromProgID")]
	internal static void* /* System.Type */ System_Type_GetTypeFromProgID(byte* /* System.String */ progID, void** /* System.Exception */ __outException)
	{
		System.String progIDConverted = InteropUtils.ToDotNetString(progID);
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromProgID(progIDConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromProgID_1")]
	internal static void* /* System.Type */ System_Type_GetTypeFromProgID_1(byte* /* System.String */ progID, byte /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		System.String progIDConverted = InteropUtils.ToDotNetString(progID);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromProgID(progIDConverted, throwOnErrorConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromProgID_2")]
	internal static void* /* System.Type */ System_Type_GetTypeFromProgID_2(byte* /* System.String */ progID, byte* /* System.String */ server, void** /* System.Exception */ __outException)
	{
		System.String progIDConverted = InteropUtils.ToDotNetString(progID);
		System.String serverConverted = InteropUtils.ToDotNetString(server);
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromProgID(progIDConverted, serverConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetTypeFromProgID_3")]
	internal static void* /* System.Type */ System_Type_GetTypeFromProgID_3(byte* /* System.String */ progID, byte* /* System.String */ server, byte /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		System.String progIDConverted = InteropUtils.ToDotNetString(progID);
		System.String serverConverted = InteropUtils.ToDotNetString(server);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.GetTypeFromProgID(progIDConverted, serverConverted, throwOnErrorConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_InvokeMember")]
	internal static void* /* System.Object */ System_Type_InvokeMember(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ invokeAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object */ target, void* /* System.Object[] */ args, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
	
	    try {
			System.Object __returnValue = __selfConverted.InvokeMember(nameConverted, invokeAttr, binderConverted, targetConverted, argsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_InvokeMember_1")]
	internal static void* /* System.Object */ System_Type_InvokeMember_1(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ invokeAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object */ target, void* /* System.Object[] */ args, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Object __returnValue = __selfConverted.InvokeMember(nameConverted, invokeAttr, binderConverted, targetConverted, argsConverted, cultureConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_InvokeMember_2")]
	internal static void* /* System.Object */ System_Type_InvokeMember_2(void* /* System.Type */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ invokeAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object */ target, void* /* System.Object[] */ args, void* /* System.Reflection.ParameterModifier[] */ modifiers, void* /* System.Globalization.CultureInfo */ culture, void* /* System.String[] */ namedParameters, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
		System.String[] namedParametersConverted = InteropUtils.GetInstance<System.String[]>(namedParameters);
	
	    try {
			System.Object __returnValue = __selfConverted.InvokeMember(nameConverted, invokeAttr, binderConverted, targetConverted, argsConverted, modifiersConverted, cultureConverted, namedParametersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetInterface")]
	internal static void* /* System.Type */ System_Type_GetInterface(void* /* System.Type */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Type __returnValue = __selfConverted.GetInterface(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetInterface_1")]
	internal static void* /* System.Type */ System_Type_GetInterface_1(void* /* System.Type */ __self, byte* /* System.String */ name, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = __selfConverted.GetInterface(nameConverted, ignoreCaseConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetInterfaces")]
	internal static void* /* System.Type[] */ System_Type_GetInterfaces(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetInterfaces();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetInterfaceMap")]
	internal static void* /* System.Reflection.InterfaceMapping */ System_Type_GetInterfaceMap(void* /* System.Type */ __self, void* /* System.Type */ interfaceType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type interfaceTypeConverted = InteropUtils.GetInstance<System.Type>(interfaceType);
	
	    try {
			System.Reflection.InterfaceMapping __returnValue = __selfConverted.GetInterfaceMap(interfaceTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsInstanceOfType")]
	internal static byte /* System.Boolean */ System_Type_IsInstanceOfType(void* /* System.Type */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInstanceOfType(oConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsEquivalentTo")]
	internal static byte /* System.Boolean */ System_Type_IsEquivalentTo(void* /* System.Type */ __self, void* /* System.Type */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type otherConverted = InteropUtils.GetInstance<System.Type>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsEquivalentTo(otherConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEnumUnderlyingType")]
	internal static void* /* System.Type */ System_Type_GetEnumUnderlyingType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetEnumUnderlyingType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEnumValues")]
	internal static void* /* System.Array */ System_Type_GetEnumValues(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Array __returnValue = __selfConverted.GetEnumValues();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEnumValuesAsUnderlyingType")]
	internal static void* /* System.Array */ System_Type_GetEnumValuesAsUnderlyingType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Array __returnValue = __selfConverted.GetEnumValuesAsUnderlyingType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakeArrayType")]
	internal static void* /* System.Type */ System_Type_MakeArrayType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.MakeArrayType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakeArrayType_1")]
	internal static void* /* System.Type */ System_Type_MakeArrayType_1(void* /* System.Type */ __self, int /* System.Int32 */ rank, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.MakeArrayType(rank);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakeByRefType")]
	internal static void* /* System.Type */ System_Type_MakeByRefType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.MakeByRefType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakeGenericType")]
	internal static void* /* System.Type */ System_Type_MakeGenericType(void* /* System.Type */ __self, void* /* System.Type[] */ typeArguments, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type[] typeArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(typeArguments);
	
	    try {
			System.Type __returnValue = __selfConverted.MakeGenericType(typeArgumentsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakePointerType")]
	internal static void* /* System.Type */ System_Type_MakePointerType(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.MakePointerType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakeGenericSignatureType")]
	internal static void* /* System.Type */ System_Type_MakeGenericSignatureType(void* /* System.Type */ genericTypeDefinition, void* /* System.Type[] */ typeArguments, void** /* System.Exception */ __outException)
	{
		System.Type genericTypeDefinitionConverted = InteropUtils.GetInstance<System.Type>(genericTypeDefinition);
		System.Type[] typeArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(typeArguments);
	
	    try {
			System.Type __returnValue = System.Type.MakeGenericSignatureType(genericTypeDefinitionConverted, typeArgumentsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MakeGenericMethodParameter")]
	internal static void* /* System.Type */ System_Type_MakeGenericMethodParameter(int /* System.Int32 */ position, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Type __returnValue = System.Type.MakeGenericMethodParameter(position);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_ToString")]
	internal static byte* /* System.String */ System_Type_ToString(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Equals")]
	internal static byte /* System.Boolean */ System_Type_Equals(void* /* System.Type */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetHashCode")]
	internal static int /* System.Int32 */ System_Type_GetHashCode(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Equals_1")]
	internal static byte /* System.Boolean */ System_Type_Equals_1(void* /* System.Type */ __self, void* /* System.Type */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type oConverted = InteropUtils.GetInstance<System.Type>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_ReflectionOnlyGetType")]
	internal static void* /* System.Type */ System_Type_ReflectionOnlyGetType(byte* /* System.String */ typeName, byte /* System.Boolean */ throwIfNotFound, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean throwIfNotFoundConverted = throwIfNotFound.ToBool();
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = System.Type.ReflectionOnlyGetType(typeNameConverted, throwIfNotFoundConverted, ignoreCaseConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsEnumDefined")]
	internal static byte /* System.Boolean */ System_Type_IsEnumDefined(void* /* System.Type */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsEnumDefined(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEnumName")]
	internal static byte* /* System.String */ System_Type_GetEnumName(void* /* System.Type */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.String __returnValue = __selfConverted.GetEnumName(valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GetEnumNames")]
	internal static void* /* System.String[] */ System_Type_GetEnumNames(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.GetEnumNames();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_FindInterfaces")]
	internal static void* /* System.Type[] */ System_Type_FindInterfaces(void* /* System.Type */ __self, void* /* System.Reflection.TypeFilter */ filter, void* /* System.Object */ filterCriteria, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Reflection.TypeFilter filterConverted = InteropUtils.GetInstance<System_Reflection_TypeFilter>(filter)?.Trampoline;
		System.Object filterCriteriaConverted = InteropUtils.GetInstance<System.Object>(filterCriteria);
	
	    try {
			System.Type[] __returnValue = __selfConverted.FindInterfaces(filterConverted, filterCriteriaConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_FindMembers")]
	internal static void* /* System.Reflection.MemberInfo[] */ System_Type_FindMembers(void* /* System.Type */ __self, System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ memberType, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.MemberFilter */ filter, void* /* System.Object */ filterCriteria, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Reflection.MemberFilter filterConverted = InteropUtils.GetInstance<System_Reflection_MemberFilter>(filter)?.Trampoline;
		System.Object filterCriteriaConverted = InteropUtils.GetInstance<System.Object>(filterCriteria);
	
	    try {
			System.Reflection.MemberInfo[] __returnValue = __selfConverted.FindMembers(memberType, bindingAttr, filterConverted, filterCriteriaConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSubclassOf")]
	internal static byte /* System.Boolean */ System_Type_IsSubclassOf(void* /* System.Type */ __self, void* /* System.Type */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type cConverted = InteropUtils.GetInstance<System.Type>(c);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSubclassOf(cConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAssignableFrom")]
	internal static byte /* System.Boolean */ System_Type_IsAssignableFrom(void* /* System.Type */ __self, void* /* System.Type */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
		System.Type cConverted = InteropUtils.GetInstance<System.Type>(c);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAssignableFrom(cConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsInterface_Get")]
	internal static byte /* System.Boolean */ System_Type_IsInterface_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInterface;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Type_MemberType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Namespace_Get")]
	internal static byte* /* System.String */ System_Type_Namespace_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Namespace;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_AssemblyQualifiedName_Get")]
	internal static byte* /* System.String */ System_Type_AssemblyQualifiedName_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.AssemblyQualifiedName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_FullName_Get")]
	internal static byte* /* System.String */ System_Type_FullName_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Assembly_Get")]
	internal static void* /* System.Reflection.Assembly */ System_Type_Assembly_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.Assembly;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Module_Get")]
	internal static void* /* System.Reflection.Module */ System_Type_Module_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.Module __returnValue = __selfConverted.Module;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNested_Get")]
	internal static byte /* System.Boolean */ System_Type_IsNested_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNested;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_DeclaringType_Get")]
	internal static void* /* System.Type */ System_Type_DeclaringType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.DeclaringType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_DeclaringMethod_Get")]
	internal static void* /* System.Reflection.MethodBase */ System_Type_DeclaringMethod_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.MethodBase __returnValue = __selfConverted.DeclaringMethod;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_ReflectedType_Get")]
	internal static void* /* System.Type */ System_Type_ReflectedType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ReflectedType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_UnderlyingSystemType_Get")]
	internal static void* /* System.Type */ System_Type_UnderlyingSystemType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.UnderlyingSystemType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsTypeDefinition_Get")]
	internal static byte /* System.Boolean */ System_Type_IsTypeDefinition_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsTypeDefinition;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsArray_Get")]
	internal static byte /* System.Boolean */ System_Type_IsArray_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsArray;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsByRef_Get")]
	internal static byte /* System.Boolean */ System_Type_IsByRef_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsByRef;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsPointer_Get")]
	internal static byte /* System.Boolean */ System_Type_IsPointer_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPointer;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsConstructedGenericType_Get")]
	internal static byte /* System.Boolean */ System_Type_IsConstructedGenericType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsConstructedGenericType;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsGenericParameter_Get")]
	internal static byte /* System.Boolean */ System_Type_IsGenericParameter_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericParameter;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsGenericTypeParameter_Get")]
	internal static byte /* System.Boolean */ System_Type_IsGenericTypeParameter_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericTypeParameter;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsGenericMethodParameter_Get")]
	internal static byte /* System.Boolean */ System_Type_IsGenericMethodParameter_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericMethodParameter;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsGenericType_Get")]
	internal static byte /* System.Boolean */ System_Type_IsGenericType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericType;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsGenericTypeDefinition_Get")]
	internal static byte /* System.Boolean */ System_Type_IsGenericTypeDefinition_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericTypeDefinition;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSZArray_Get")]
	internal static byte /* System.Boolean */ System_Type_IsSZArray_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSZArray;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsVariableBoundArray_Get")]
	internal static byte /* System.Boolean */ System_Type_IsVariableBoundArray_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsVariableBoundArray;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsByRefLike_Get")]
	internal static byte /* System.Boolean */ System_Type_IsByRefLike_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsByRefLike;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsFunctionPointer_Get")]
	internal static byte /* System.Boolean */ System_Type_IsFunctionPointer_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFunctionPointer;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsUnmanagedFunctionPointer_Get")]
	internal static byte /* System.Boolean */ System_Type_IsUnmanagedFunctionPointer_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsUnmanagedFunctionPointer;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_HasElementType_Get")]
	internal static byte /* System.Boolean */ System_Type_HasElementType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.HasElementType;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GenericTypeArguments_Get")]
	internal static void* /* System.Type[] */ System_Type_GenericTypeArguments_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GenericTypeArguments;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GenericParameterPosition_Get")]
	internal static int /* System.Int32 */ System_Type_GenericParameterPosition_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GenericParameterPosition;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GenericParameterAttributes_Get")]
	internal static System.Reflection.GenericParameterAttributes /* System.Reflection.GenericParameterAttributes */ System_Type_GenericParameterAttributes_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.GenericParameterAttributes __returnValue = __selfConverted.GenericParameterAttributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.GenericParameterAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Attributes_Get")]
	internal static System.Reflection.TypeAttributes /* System.Reflection.TypeAttributes */ System_Type_Attributes_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.TypeAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.TypeAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAbstract_Get")]
	internal static byte /* System.Boolean */ System_Type_IsAbstract_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAbstract;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsImport_Get")]
	internal static byte /* System.Boolean */ System_Type_IsImport_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsImport;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSealed_Get")]
	internal static byte /* System.Boolean */ System_Type_IsSealed_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSealed;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSpecialName_Get")]
	internal static byte /* System.Boolean */ System_Type_IsSpecialName_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSpecialName;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsClass_Get")]
	internal static byte /* System.Boolean */ System_Type_IsClass_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsClass;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedAssembly_Get")]
	internal static byte /* System.Boolean */ System_Type_IsNestedAssembly_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedAssembly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedFamANDAssem_Get")]
	internal static byte /* System.Boolean */ System_Type_IsNestedFamANDAssem_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedFamANDAssem;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedFamily_Get")]
	internal static byte /* System.Boolean */ System_Type_IsNestedFamily_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedFamily;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedFamORAssem_Get")]
	internal static byte /* System.Boolean */ System_Type_IsNestedFamORAssem_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedFamORAssem;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedPrivate_Get")]
	internal static byte /* System.Boolean */ System_Type_IsNestedPrivate_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedPrivate;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNestedPublic_Get")]
	internal static byte /* System.Boolean */ System_Type_IsNestedPublic_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNestedPublic;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsNotPublic_Get")]
	internal static byte /* System.Boolean */ System_Type_IsNotPublic_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNotPublic;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsPublic_Get")]
	internal static byte /* System.Boolean */ System_Type_IsPublic_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPublic;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAutoLayout_Get")]
	internal static byte /* System.Boolean */ System_Type_IsAutoLayout_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAutoLayout;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsExplicitLayout_Get")]
	internal static byte /* System.Boolean */ System_Type_IsExplicitLayout_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsExplicitLayout;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsLayoutSequential_Get")]
	internal static byte /* System.Boolean */ System_Type_IsLayoutSequential_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLayoutSequential;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAnsiClass_Get")]
	internal static byte /* System.Boolean */ System_Type_IsAnsiClass_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAnsiClass;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsAutoClass_Get")]
	internal static byte /* System.Boolean */ System_Type_IsAutoClass_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAutoClass;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsUnicodeClass_Get")]
	internal static byte /* System.Boolean */ System_Type_IsUnicodeClass_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsUnicodeClass;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsCOMObject_Get")]
	internal static byte /* System.Boolean */ System_Type_IsCOMObject_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCOMObject;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsContextful_Get")]
	internal static byte /* System.Boolean */ System_Type_IsContextful_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsContextful;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsEnum_Get")]
	internal static byte /* System.Boolean */ System_Type_IsEnum_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsEnum;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsMarshalByRef_Get")]
	internal static byte /* System.Boolean */ System_Type_IsMarshalByRef_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsMarshalByRef;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsPrimitive_Get")]
	internal static byte /* System.Boolean */ System_Type_IsPrimitive_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPrimitive;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsValueType_Get")]
	internal static byte /* System.Boolean */ System_Type_IsValueType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsValueType;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSignatureType_Get")]
	internal static byte /* System.Boolean */ System_Type_IsSignatureType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSignatureType;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSecurityCritical_Get")]
	internal static byte /* System.Boolean */ System_Type_IsSecurityCritical_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityCritical;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSecuritySafeCritical_Get")]
	internal static byte /* System.Boolean */ System_Type_IsSecuritySafeCritical_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecuritySafeCritical;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSecurityTransparent_Get")]
	internal static byte /* System.Boolean */ System_Type_IsSecurityTransparent_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityTransparent;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_StructLayoutAttribute_Get")]
	internal static void* /* System.Runtime.InteropServices.StructLayoutAttribute */ System_Type_StructLayoutAttribute_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Runtime.InteropServices.StructLayoutAttribute __returnValue = __selfConverted.StructLayoutAttribute;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_TypeInitializer_Get")]
	internal static void* /* System.Reflection.ConstructorInfo */ System_Type_TypeInitializer_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Reflection.ConstructorInfo __returnValue = __selfConverted.TypeInitializer;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_TypeHandle_Get")]
	internal static void* /* System.RuntimeTypeHandle */ System_Type_TypeHandle_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.RuntimeTypeHandle __returnValue = __selfConverted.TypeHandle;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_GUID_Get")]
	internal static void* /* System.Guid */ System_Type_GUID_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Guid __returnValue = __selfConverted.GUID;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_BaseType_Get")]
	internal static void* /* System.Type */ System_Type_BaseType_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.BaseType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_DefaultBinder_Get")]
	internal static void* /* System.Reflection.Binder */ System_Type_DefaultBinder_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.Binder __returnValue = System.Type.DefaultBinder;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsSerializable_Get")]
	internal static byte /* System.Boolean */ System_Type_IsSerializable_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSerializable;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_ContainsGenericParameters_Get")]
	internal static byte /* System.Boolean */ System_Type_ContainsGenericParameters_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.ContainsGenericParameters;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_IsVisible_Get")]
	internal static byte /* System.Boolean */ System_Type_IsVisible_Get(void* /* System.Type */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Type __selfConverted = InteropUtils.GetInstance<System.Type>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsVisible;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Delimiter_Get")]
	internal static char /* System.Char */ System_Type_Delimiter_Get()
	{
	
		System.Char __returnValue = System.Type.Delimiter;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_EmptyTypes_Get")]
	internal static void* /* System.Type[] */ System_Type_EmptyTypes_Get()
	{
	
		System.Type[] __returnValue = System.Type.EmptyTypes;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Missing_Get")]
	internal static void* /* System.Object */ System_Type_Missing_Get()
	{
	
		System.Object __returnValue = System.Type.Missing;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_FilterAttribute_Get")]
	internal static void* /* System.Reflection.MemberFilter */ System_Type_FilterAttribute_Get()
	{
	
		System.Reflection.MemberFilter __returnValue = System.Type.FilterAttribute;
		void* __returnValueNative = new System_Reflection_MemberFilter(__returnValue).AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_FilterName_Get")]
	internal static void* /* System.Reflection.MemberFilter */ System_Type_FilterName_Get()
	{
	
		System.Reflection.MemberFilter __returnValue = System.Type.FilterName;
		void* __returnValueNative = new System_Reflection_MemberFilter(__returnValue).AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_FilterNameIgnoreCase_Get")]
	internal static void* /* System.Reflection.MemberFilter */ System_Type_FilterNameIgnoreCase_Get()
	{
	
		System.Reflection.MemberFilter __returnValue = System.Type.FilterNameIgnoreCase;
		void* __returnValueNative = new System_Reflection_MemberFilter(__returnValue).AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_TypeOf")]
	internal static void* /* System.Type */ System_Type_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Type);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Type_Destroy")]
	internal static void /* System.Void */ System_Type_Destroy(void* /* System.Type */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_MemberInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_HasSameMetadataDefinitionAs")]
	internal static byte /* System.Boolean */ System_Reflection_MemberInfo_HasSameMetadataDefinitionAs(void* /* System.Reflection.MemberInfo */ __self, void* /* System.Reflection.MemberInfo */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
		System.Reflection.MemberInfo otherConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.HasSameMetadataDefinitionAs(otherConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_IsDefined")]
	internal static byte /* System.Boolean */ System_Reflection_MemberInfo_IsDefined(void* /* System.Reflection.MemberInfo */ __self, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefined(attributeTypeConverted, inheritConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_GetCustomAttributes")]
	internal static void* /* System.Object[] */ System_Reflection_MemberInfo_GetCustomAttributes(void* /* System.Reflection.MemberInfo */ __self, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Object[] __returnValue = __selfConverted.GetCustomAttributes(inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_GetCustomAttributes_1")]
	internal static void* /* System.Object[] */ System_Reflection_MemberInfo_GetCustomAttributes_1(void* /* System.Reflection.MemberInfo */ __self, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Object[] __returnValue = __selfConverted.GetCustomAttributes(attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_Equals")]
	internal static byte /* System.Boolean */ System_Reflection_MemberInfo_Equals(void* /* System.Reflection.MemberInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_MemberInfo_GetHashCode(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_MemberInfo_MemberType_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_Name_Get")]
	internal static byte* /* System.String */ System_Reflection_MemberInfo_Name_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_DeclaringType_Get")]
	internal static void* /* System.Type */ System_Reflection_MemberInfo_DeclaringType_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.DeclaringType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_ReflectedType_Get")]
	internal static void* /* System.Type */ System_Reflection_MemberInfo_ReflectedType_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ReflectedType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_Module_Get")]
	internal static void* /* System.Reflection.Module */ System_Reflection_MemberInfo_Module_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Reflection.Module __returnValue = __selfConverted.Module;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_IsCollectible_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MemberInfo_IsCollectible_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCollectible;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_MetadataToken_Get")]
	internal static int /* System.Int32 */ System_Reflection_MemberInfo_MetadataToken_Get(void* /* System.Reflection.MemberInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MemberInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MetadataToken;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_MemberInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.MemberInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_MemberInfo_Destroy(void* /* System.Reflection.MemberInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_MemberTypes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberTypes_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_MemberTypes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.MemberTypes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Enum
{
	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetName_A1")]
	internal static byte* /* System.String */ System_Enum_GetName_A1(void* /* System.Type */ TEnum, void* /* TEnum */ value, void** /* System.Exception */ __outException)
	{
		System.Type TEnumConverted = InteropUtils.GetInstance<System.Type>(TEnum);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Enum);
			System.String __nameOfMethodForGenericCall = nameof(System.Enum.GetName);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TEnumConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TEnumConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method GetName not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.String __returnValue = (System.String)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetName_1")]
	internal static byte* /* System.String */ System_Enum_GetName_1(void* /* System.Type */ enumType, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.String __returnValue = System.Enum.GetName(enumTypeConverted, valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetNames_A1")]
	internal static void* /* System.String[] */ System_Enum_GetNames_A1(void* /* System.Type */ TEnum, void** /* System.Exception */ __outException)
	{
		System.Type TEnumConverted = InteropUtils.GetInstance<System.Type>(TEnum);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Enum);
			System.String __nameOfMethodForGenericCall = nameof(System.Enum.GetNames);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[]? __parametersForGenericCall = null;
			System.Type[] __parameterTypesForGenericCall = System.Type.EmptyTypes;
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TEnumConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method GetNames not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.String[] __returnValue = (System.String[])__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetNames_1")]
	internal static void* /* System.String[] */ System_Enum_GetNames_1(void* /* System.Type */ enumType, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.String[] __returnValue = System.Enum.GetNames(enumTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetUnderlyingType")]
	internal static void* /* System.Type */ System_Enum_GetUnderlyingType(void* /* System.Type */ enumType, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Type __returnValue = System.Enum.GetUnderlyingType(enumTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetValues_A1")]
	internal static void* /* System.Array */ System_Enum_GetValues_A1(void* /* System.Type */ TEnum, void** /* System.Exception */ __outException)
	{
		System.Type TEnumConverted = InteropUtils.GetInstance<System.Type>(TEnum);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Enum);
			System.String __nameOfMethodForGenericCall = nameof(System.Enum.GetValues);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[]? __parametersForGenericCall = null;
			System.Type[] __parameterTypesForGenericCall = System.Type.EmptyTypes;
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TEnumConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method GetValues not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Array __returnValue = (System.Array)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetValues_1")]
	internal static void* /* System.Array */ System_Enum_GetValues_1(void* /* System.Type */ enumType, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Array __returnValue = System.Enum.GetValues(enumTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetValuesAsUnderlyingType_A1")]
	internal static void* /* System.Array */ System_Enum_GetValuesAsUnderlyingType_A1(void* /* System.Type */ TEnum, void** /* System.Exception */ __outException)
	{
		System.Type TEnumConverted = InteropUtils.GetInstance<System.Type>(TEnum);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Enum);
			System.String __nameOfMethodForGenericCall = nameof(System.Enum.GetValuesAsUnderlyingType);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[]? __parametersForGenericCall = null;
			System.Type[] __parameterTypesForGenericCall = System.Type.EmptyTypes;
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TEnumConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method GetValuesAsUnderlyingType not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Array __returnValue = (System.Array)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetValuesAsUnderlyingType_1")]
	internal static void* /* System.Array */ System_Enum_GetValuesAsUnderlyingType_1(void* /* System.Type */ enumType, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Array __returnValue = System.Enum.GetValuesAsUnderlyingType(enumTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_HasFlag")]
	internal static byte /* System.Boolean */ System_Enum_HasFlag(void* /* System.Enum */ __self, void* /* System.Enum */ flag, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.Enum flagConverted = InteropUtils.GetInstance<System.Enum>(flag);
	
	    try {
			System.Boolean __returnValue = __selfConverted.HasFlag(flagConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_IsDefined_A1")]
	internal static byte /* System.Boolean */ System_Enum_IsDefined_A1(void* /* System.Type */ TEnum, void* /* TEnum */ value, void** /* System.Exception */ __outException)
	{
		System.Type TEnumConverted = InteropUtils.GetInstance<System.Type>(TEnum);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Enum);
			System.String __nameOfMethodForGenericCall = nameof(System.Enum.IsDefined);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TEnumConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TEnumConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method IsDefined not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Boolean __returnValue = (System.Boolean)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_IsDefined_1")]
	internal static byte /* System.Boolean */ System_Enum_IsDefined_1(void* /* System.Type */ enumType, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = System.Enum.IsDefined(enumTypeConverted, valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Parse")]
	internal static void* /* System.Object */ System_Enum_Parse(void* /* System.Type */ enumType, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Object __returnValue = System.Enum.Parse(enumTypeConverted, valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Parse_1")]
	internal static void* /* System.Object */ System_Enum_Parse_1(void* /* System.Type */ enumType, byte* /* System.String */ value, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Object __returnValue = System.Enum.Parse(enumTypeConverted, valueConverted, ignoreCaseConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Parse_A1")]
	internal static void* /* System.Object */ System_Enum_Parse_A1(void* /* System.Type */ TEnum, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.Type TEnumConverted = InteropUtils.GetInstance<System.Type>(TEnum);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Enum);
			System.String __nameOfMethodForGenericCall = nameof(System.Enum.Parse);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.String) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TEnumConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method Parse not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Object __returnValue = (System.Object)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Parse_A1_1")]
	internal static void* /* System.Object */ System_Enum_Parse_A1_1(void* /* System.Type */ TEnum, byte* /* System.String */ value, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.Type TEnumConverted = InteropUtils.GetInstance<System.Type>(TEnum);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Enum);
			System.String __nameOfMethodForGenericCall = nameof(System.Enum.Parse);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted, ignoreCaseConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.String), typeof(System.Boolean) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TEnumConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method Parse not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Object __returnValue = (System.Object)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_TryParse")]
	internal static byte /* System.Boolean */ System_Enum_TryParse(void* /* System.Type */ enumType, byte* /* System.String */ value, void** /* System.Object */ result, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.Object resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Enum.TryParse(enumTypeConverted, valueConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_TryParse_1")]
	internal static byte /* System.Boolean */ System_Enum_TryParse_1(void* /* System.Type */ enumType, byte* /* System.String */ value, byte /* System.Boolean */ ignoreCase, void** /* System.Object */ result, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Object resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Enum.TryParse(enumTypeConverted, valueConverted, ignoreCaseConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	// TODO: Generic Methods with out parameters are not supported

	// TODO: Generic Methods with out parameters are not supported

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Equals")]
	internal static byte /* System.Boolean */ System_Enum_Equals(void* /* System.Enum */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetHashCode")]
	internal static int /* System.Int32 */ System_Enum_GetHashCode(void* /* System.Enum */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_CompareTo")]
	internal static int /* System.Int32 */ System_Enum_CompareTo(void* /* System.Enum */ __self, void* /* System.Object */ target, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(targetConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToString")]
	internal static byte* /* System.String */ System_Enum_ToString(void* /* System.Enum */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToString_1")]
	internal static byte* /* System.String */ System_Enum_ToString_1(void* /* System.Enum */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToString_2")]
	internal static byte* /* System.String */ System_Enum_ToString_2(void* /* System.Enum */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToString_3")]
	internal static byte* /* System.String */ System_Enum_ToString_3(void* /* System.Enum */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Format")]
	internal static byte* /* System.String */ System_Enum_Format(void* /* System.Type */ enumType, void* /* System.Object */ value, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = System.Enum.Format(enumTypeConverted, valueConverted, formatConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_Enum_GetTypeCode(void* /* System.Enum */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Enum __selfConverted = InteropUtils.GetInstance<System.Enum>(__self);
	
	
	    try {
			System.TypeCode __returnValue = __selfConverted.GetTypeCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject")]
	internal static void* /* System.Object */ System_Enum_ToObject(void* /* System.Type */ enumType, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject_1")]
	internal static void* /* System.Object */ System_Enum_ToObject_1(void* /* System.Type */ enumType, sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject_2")]
	internal static void* /* System.Object */ System_Enum_ToObject_2(void* /* System.Type */ enumType, short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject_3")]
	internal static void* /* System.Object */ System_Enum_ToObject_3(void* /* System.Type */ enumType, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject_4")]
	internal static void* /* System.Object */ System_Enum_ToObject_4(void* /* System.Type */ enumType, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject_5")]
	internal static void* /* System.Object */ System_Enum_ToObject_5(void* /* System.Type */ enumType, ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject_6")]
	internal static void* /* System.Object */ System_Enum_ToObject_6(void* /* System.Type */ enumType, uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject_7")]
	internal static void* /* System.Object */ System_Enum_ToObject_7(void* /* System.Type */ enumType, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_ToObject_8")]
	internal static void* /* System.Object */ System_Enum_ToObject_8(void* /* System.Type */ enumType, ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
		System.Type enumTypeConverted = InteropUtils.GetInstance<System.Type>(enumType);
	
	    try {
			System.Object __returnValue = System.Enum.ToObject(enumTypeConverted, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_TypeOf")]
	internal static void* /* System.Type */ System_Enum_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Enum);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Enum_Destroy")]
	internal static void /* System.Void */ System_Enum_Destroy(void* /* System.Enum */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_ValueType
{
	[UnmanagedCallersOnly(EntryPoint = "System_ValueType_Equals")]
	internal static byte /* System.Boolean */ System_ValueType_Equals(void* /* System.ValueType */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ValueType __selfConverted = InteropUtils.GetInstance<System.ValueType>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ValueType_GetHashCode")]
	internal static int /* System.Int32 */ System_ValueType_GetHashCode(void* /* System.ValueType */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ValueType __selfConverted = InteropUtils.GetInstance<System.ValueType>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ValueType_ToString")]
	internal static byte* /* System.String */ System_ValueType_ToString(void* /* System.ValueType */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ValueType __selfConverted = InteropUtils.GetInstance<System.ValueType>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ValueType_TypeOf")]
	internal static void* /* System.Type */ System_ValueType_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.ValueType);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ValueType_Destroy")]
	internal static void /* System.Void */ System_ValueType_Destroy(void* /* System.ValueType */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_String
{
	[UnmanagedCallersOnly(EntryPoint = "System_String_Intern")]
	internal static byte* /* System.String */ System_String_Intern(byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = System.String.Intern(strConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IsInterned")]
	internal static byte* /* System.String */ System_String_IsInterned(byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = System.String.IsInterned(strConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare")]
	internal static int /* System.Int32 */ System_String_Compare(byte* /* System.String */ strA, byte* /* System.String */ strB, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, strBConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare_1")]
	internal static int /* System.Int32 */ System_String_Compare_1(byte* /* System.String */ strA, byte* /* System.String */ strB, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, strBConverted, ignoreCaseConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare_2")]
	internal static int /* System.Int32 */ System_String_Compare_2(byte* /* System.String */ strA, byte* /* System.String */ strB, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, strBConverted, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare_3")]
	internal static int /* System.Int32 */ System_String_Compare_3(byte* /* System.String */ strA, byte* /* System.String */ strB, void* /* System.Globalization.CultureInfo */ culture, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, strBConverted, cultureConverted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare_4")]
	internal static int /* System.Int32 */ System_String_Compare_4(byte* /* System.String */ strA, byte* /* System.String */ strB, byte /* System.Boolean */ ignoreCase, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, strBConverted, ignoreCaseConverted, cultureConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare_5")]
	internal static int /* System.Int32 */ System_String_Compare_5(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, indexA, strBConverted, indexB, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare_6")]
	internal static int /* System.Int32 */ System_String_Compare_6(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, indexA, strBConverted, indexB, length, ignoreCaseConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare_7")]
	internal static int /* System.Int32 */ System_String_Compare_7(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, byte /* System.Boolean */ ignoreCase, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, indexA, strBConverted, indexB, length, ignoreCaseConverted, cultureConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare_8")]
	internal static int /* System.Int32 */ System_String_Compare_8(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, void* /* System.Globalization.CultureInfo */ culture, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, indexA, strBConverted, indexB, length, cultureConverted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Compare_9")]
	internal static int /* System.Int32 */ System_String_Compare_9(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.Compare(strAConverted, indexA, strBConverted, indexB, length, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_CompareOrdinal")]
	internal static int /* System.Int32 */ System_String_CompareOrdinal(byte* /* System.String */ strA, byte* /* System.String */ strB, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.CompareOrdinal(strAConverted, strBConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_CompareOrdinal_1")]
	internal static int /* System.Int32 */ System_String_CompareOrdinal_1(byte* /* System.String */ strA, int /* System.Int32 */ indexA, byte* /* System.String */ strB, int /* System.Int32 */ indexB, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.String strAConverted = InteropUtils.ToDotNetString(strA);
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = System.String.CompareOrdinal(strAConverted, indexA, strBConverted, indexB, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_CompareTo")]
	internal static int /* System.Int32 */ System_String_CompareTo(byte* /* System.String */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_CompareTo_1")]
	internal static int /* System.Int32 */ System_String_CompareTo_1(byte* /* System.String */ __self, byte* /* System.String */ strB, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String strBConverted = InteropUtils.ToDotNetString(strB);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(strBConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_EndsWith")]
	internal static byte /* System.Boolean */ System_String_EndsWith(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.EndsWith(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_EndsWith_1")]
	internal static byte /* System.Boolean */ System_String_EndsWith_1(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.EndsWith(valueConverted, comparisonType);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_EndsWith_2")]
	internal static byte /* System.Boolean */ System_String_EndsWith_2(byte* /* System.String */ __self, byte* /* System.String */ value, byte /* System.Boolean */ ignoreCase, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Boolean __returnValue = __selfConverted.EndsWith(valueConverted, ignoreCaseConverted, cultureConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_EndsWith_3")]
	internal static byte /* System.Boolean */ System_String_EndsWith_3(byte* /* System.String */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.EndsWith(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Equals")]
	internal static byte /* System.Boolean */ System_String_Equals(byte* /* System.String */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Equals_1")]
	internal static byte /* System.Boolean */ System_String_Equals_1(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Equals_2")]
	internal static byte /* System.Boolean */ System_String_Equals_2(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted, comparisonType);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Equals_3")]
	internal static byte /* System.Boolean */ System_String_Equals_3(byte* /* System.String */ a, byte* /* System.String */ b, void** /* System.Exception */ __outException)
	{
		System.String aConverted = InteropUtils.ToDotNetString(a);
		System.String bConverted = InteropUtils.ToDotNetString(b);
	
	    try {
			System.Boolean __returnValue = System.String.Equals(aConverted, bConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Equals_4")]
	internal static byte /* System.Boolean */ System_String_Equals_4(byte* /* System.String */ a, byte* /* System.String */ b, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		System.String aConverted = InteropUtils.ToDotNetString(a);
		System.String bConverted = InteropUtils.ToDotNetString(b);
	
	    try {
			System.Boolean __returnValue = System.String.Equals(aConverted, bConverted, comparisonType);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_GetHashCode")]
	internal static int /* System.Int32 */ System_String_GetHashCode(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_GetHashCode_1")]
	internal static int /* System.Int32 */ System_String_GetHashCode_1(byte* /* System.String */ __self, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode(comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_StartsWith")]
	internal static byte /* System.Boolean */ System_String_StartsWith(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.StartsWith(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_StartsWith_1")]
	internal static byte /* System.Boolean */ System_String_StartsWith_1(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.StartsWith(valueConverted, comparisonType);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_StartsWith_2")]
	internal static byte /* System.Boolean */ System_String_StartsWith_2(byte* /* System.String */ __self, byte* /* System.String */ value, byte /* System.Boolean */ ignoreCase, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Boolean __returnValue = __selfConverted.StartsWith(valueConverted, ignoreCaseConverted, cultureConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_StartsWith_3")]
	internal static byte /* System.Boolean */ System_String_StartsWith_3(byte* /* System.String */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.StartsWith(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Clone")]
	internal static void* /* System.Object */ System_String_Clone(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Copy")]
	internal static byte* /* System.String */ System_String_Copy(byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = System.String.Copy(strConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_CopyTo")]
	internal static void /* System.Void */ System_String_CopyTo(byte* /* System.String */ __self, int /* System.Int32 */ sourceIndex, void* /* System.Char[] */ destination, int /* System.Int32 */ destinationIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] destinationConverted = InteropUtils.GetInstance<System.Char[]>(destination);
	
	    try {
			__selfConverted.CopyTo(sourceIndex, destinationConverted, destinationIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToCharArray")]
	internal static void* /* System.Char[] */ System_String_ToCharArray(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Char[] __returnValue = __selfConverted.ToCharArray();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToCharArray_1")]
	internal static void* /* System.Char[] */ System_String_ToCharArray_1(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Char[] __returnValue = __selfConverted.ToCharArray(startIndex, length);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IsNullOrEmpty")]
	internal static byte /* System.Boolean */ System_String_IsNullOrEmpty(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = System.String.IsNullOrEmpty(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IsNullOrWhiteSpace")]
	internal static byte /* System.Boolean */ System_String_IsNullOrWhiteSpace(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = System.String.IsNullOrWhiteSpace(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToString")]
	internal static byte* /* System.String */ System_String_ToString(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToString_1")]
	internal static byte* /* System.String */ System_String_ToString_1(byte* /* System.String */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_GetEnumerator")]
	internal static void* /* System.CharEnumerator */ System_String_GetEnumerator(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.CharEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_EnumerateRunes")]
	internal static void* /* System.Text.StringRuneEnumerator */ System_String_EnumerateRunes(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Text.StringRuneEnumerator __returnValue = __selfConverted.EnumerateRunes();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_String_GetTypeCode(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.TypeCode __returnValue = __selfConverted.GetTypeCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IsNormalized")]
	internal static byte /* System.Boolean */ System_String_IsNormalized(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNormalized();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IsNormalized_1")]
	internal static byte /* System.Boolean */ System_String_IsNormalized_1(byte* /* System.String */ __self, System.Text.NormalizationForm /* System.Text.NormalizationForm */ normalizationForm, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNormalized(normalizationForm);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Normalize")]
	internal static byte* /* System.String */ System_String_Normalize(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Normalize();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Normalize_1")]
	internal static byte* /* System.String */ System_String_Normalize_1(byte* /* System.String */ __self, System.Text.NormalizationForm /* System.Text.NormalizationForm */ normalizationForm, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Normalize(normalizationForm);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat")]
	internal static byte* /* System.String */ System_String_Concat(void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			System.String __returnValue = System.String.Concat(arg0Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat_1")]
	internal static byte* /* System.String */ System_String_Concat_1(void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			System.String __returnValue = System.String.Concat(arg0Converted, arg1Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat_2")]
	internal static byte* /* System.String */ System_String_Concat_2(void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			System.String __returnValue = System.String.Concat(arg0Converted, arg1Converted, arg2Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat_3")]
	internal static byte* /* System.String */ System_String_Concat_3(void* /* System.Object[] */ args, void** /* System.Exception */ __outException)
	{
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
	
	    try {
			System.String __returnValue = System.String.Concat(argsConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat_4")]
	internal static byte* /* System.String */ System_String_Concat_4(byte* /* System.String */ str0, byte* /* System.String */ str1, void** /* System.Exception */ __outException)
	{
		System.String str0Converted = InteropUtils.ToDotNetString(str0);
		System.String str1Converted = InteropUtils.ToDotNetString(str1);
	
	    try {
			System.String __returnValue = System.String.Concat(str0Converted, str1Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat_5")]
	internal static byte* /* System.String */ System_String_Concat_5(byte* /* System.String */ str0, byte* /* System.String */ str1, byte* /* System.String */ str2, void** /* System.Exception */ __outException)
	{
		System.String str0Converted = InteropUtils.ToDotNetString(str0);
		System.String str1Converted = InteropUtils.ToDotNetString(str1);
		System.String str2Converted = InteropUtils.ToDotNetString(str2);
	
	    try {
			System.String __returnValue = System.String.Concat(str0Converted, str1Converted, str2Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat_6")]
	internal static byte* /* System.String */ System_String_Concat_6(byte* /* System.String */ str0, byte* /* System.String */ str1, byte* /* System.String */ str2, byte* /* System.String */ str3, void** /* System.Exception */ __outException)
	{
		System.String str0Converted = InteropUtils.ToDotNetString(str0);
		System.String str1Converted = InteropUtils.ToDotNetString(str1);
		System.String str2Converted = InteropUtils.ToDotNetString(str2);
		System.String str3Converted = InteropUtils.ToDotNetString(str3);
	
	    try {
			System.String __returnValue = System.String.Concat(str0Converted, str1Converted, str2Converted, str3Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Concat_7")]
	internal static byte* /* System.String */ System_String_Concat_7(void* /* System.String[] */ values, void** /* System.Exception */ __outException)
	{
		System.String[] valuesConverted = InteropUtils.GetInstance<System.String[]>(values);
	
	    try {
			System.String __returnValue = System.String.Concat(valuesConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format")]
	internal static byte* /* System.String */ System_String_Format(byte* /* System.String */ format, void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			System.String __returnValue = System.String.Format(formatConverted, arg0Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_1")]
	internal static byte* /* System.String */ System_String_Format_1(byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			System.String __returnValue = System.String.Format(formatConverted, arg0Converted, arg1Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_2")]
	internal static byte* /* System.String */ System_String_Format_2(byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			System.String __returnValue = System.String.Format(formatConverted, arg0Converted, arg1Converted, arg2Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_3")]
	internal static byte* /* System.String */ System_String_Format_3(byte* /* System.String */ format, void* /* System.Object[] */ args, void** /* System.Exception */ __outException)
	{
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
	
	    try {
			System.String __returnValue = System.String.Format(formatConverted, argsConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_4")]
	internal static byte* /* System.String */ System_String_Format_4(void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			System.String __returnValue = System.String.Format(providerConverted, formatConverted, arg0Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_5")]
	internal static byte* /* System.String */ System_String_Format_5(void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			System.String __returnValue = System.String.Format(providerConverted, formatConverted, arg0Converted, arg1Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_6")]
	internal static byte* /* System.String */ System_String_Format_6(void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			System.String __returnValue = System.String.Format(providerConverted, formatConverted, arg0Converted, arg1Converted, arg2Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_7")]
	internal static byte* /* System.String */ System_String_Format_7(void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object[] */ args, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
	
	    try {
			System.String __returnValue = System.String.Format(providerConverted, formatConverted, argsConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_A1")]
	internal static byte* /* System.String */ System_String_Format_A1(void* /* System.Type */ TArg0, void* /* System.IFormatProvider */ provider, void* /* System.Text.CompositeFormat */ format, void* /* TArg0 */ arg0, void** /* System.Exception */ __outException)
	{
		System.Type TArg0Converted = InteropUtils.GetInstance<System.Type>(TArg0);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Text.CompositeFormat formatConverted = InteropUtils.GetInstance<System.Text.CompositeFormat>(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.String);
			System.String __nameOfMethodForGenericCall = nameof(System.String.Format);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { providerConverted, formatConverted, arg0Converted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IFormatProvider), typeof(System.Text.CompositeFormat), TArg0Converted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TArg0Converted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method Format not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.String __returnValue = (System.String)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_A2")]
	internal static byte* /* System.String */ System_String_Format_A2(void* /* System.Type */ TArg0, void* /* System.Type */ TArg1, void* /* System.IFormatProvider */ provider, void* /* System.Text.CompositeFormat */ format, void* /* TArg0 */ arg0, void* /* TArg1 */ arg1, void** /* System.Exception */ __outException)
	{
		System.Type TArg0Converted = InteropUtils.GetInstance<System.Type>(TArg0);
		System.Type TArg1Converted = InteropUtils.GetInstance<System.Type>(TArg1);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Text.CompositeFormat formatConverted = InteropUtils.GetInstance<System.Text.CompositeFormat>(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.String);
			System.String __nameOfMethodForGenericCall = nameof(System.String.Format);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { providerConverted, formatConverted, arg0Converted, arg1Converted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IFormatProvider), typeof(System.Text.CompositeFormat), TArg0Converted, TArg1Converted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TArg0Converted, TArg1Converted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 2, __parameterTypesForGenericCall) ?? throw new Exception("Method Format not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.String __returnValue = (System.String)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_A3")]
	internal static byte* /* System.String */ System_String_Format_A3(void* /* System.Type */ TArg0, void* /* System.Type */ TArg1, void* /* System.Type */ TArg2, void* /* System.IFormatProvider */ provider, void* /* System.Text.CompositeFormat */ format, void* /* TArg0 */ arg0, void* /* TArg1 */ arg1, void* /* TArg2 */ arg2, void** /* System.Exception */ __outException)
	{
		System.Type TArg0Converted = InteropUtils.GetInstance<System.Type>(TArg0);
		System.Type TArg1Converted = InteropUtils.GetInstance<System.Type>(TArg1);
		System.Type TArg2Converted = InteropUtils.GetInstance<System.Type>(TArg2);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Text.CompositeFormat formatConverted = InteropUtils.GetInstance<System.Text.CompositeFormat>(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.String);
			System.String __nameOfMethodForGenericCall = nameof(System.String.Format);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { providerConverted, formatConverted, arg0Converted, arg1Converted, arg2Converted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IFormatProvider), typeof(System.Text.CompositeFormat), TArg0Converted, TArg1Converted, TArg2Converted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TArg0Converted, TArg1Converted, TArg2Converted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 3, __parameterTypesForGenericCall) ?? throw new Exception("Method Format not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.String __returnValue = (System.String)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Format_8")]
	internal static byte* /* System.String */ System_String_Format_8(void* /* System.IFormatProvider */ provider, void* /* System.Text.CompositeFormat */ format, void* /* System.Object[] */ args, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Text.CompositeFormat formatConverted = InteropUtils.GetInstance<System.Text.CompositeFormat>(format);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
	
	    try {
			System.String __returnValue = System.String.Format(providerConverted, formatConverted, argsConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Insert")]
	internal static byte* /* System.String */ System_String_Insert(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.String __returnValue = __selfConverted.Insert(startIndex, valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Join")]
	internal static byte* /* System.String */ System_String_Join(char /* System.Char */ separator, void* /* System.String[] */ value, void** /* System.Exception */ __outException)
	{
		System.String[] valueConverted = InteropUtils.GetInstance<System.String[]>(value);
	
	    try {
			System.String __returnValue = System.String.Join(separator, valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Join_1")]
	internal static byte* /* System.String */ System_String_Join_1(byte* /* System.String */ separator, void* /* System.String[] */ value, void** /* System.Exception */ __outException)
	{
		System.String separatorConverted = InteropUtils.ToDotNetString(separator);
		System.String[] valueConverted = InteropUtils.GetInstance<System.String[]>(value);
	
	    try {
			System.String __returnValue = System.String.Join(separatorConverted, valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Join_2")]
	internal static byte* /* System.String */ System_String_Join_2(char /* System.Char */ separator, void* /* System.String[] */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		System.String[] valueConverted = InteropUtils.GetInstance<System.String[]>(value);
	
	    try {
			System.String __returnValue = System.String.Join(separator, valueConverted, startIndex, count);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Join_3")]
	internal static byte* /* System.String */ System_String_Join_3(byte* /* System.String */ separator, void* /* System.String[] */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		System.String separatorConverted = InteropUtils.ToDotNetString(separator);
		System.String[] valueConverted = InteropUtils.GetInstance<System.String[]>(value);
	
	    try {
			System.String __returnValue = System.String.Join(separatorConverted, valueConverted, startIndex, count);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Join_4")]
	internal static byte* /* System.String */ System_String_Join_4(char /* System.Char */ separator, void* /* System.Object[] */ values, void** /* System.Exception */ __outException)
	{
		System.Object[] valuesConverted = InteropUtils.GetInstance<System.Object[]>(values);
	
	    try {
			System.String __returnValue = System.String.Join(separator, valuesConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Join_5")]
	internal static byte* /* System.String */ System_String_Join_5(byte* /* System.String */ separator, void* /* System.Object[] */ values, void** /* System.Exception */ __outException)
	{
		System.String separatorConverted = InteropUtils.ToDotNetString(separator);
		System.Object[] valuesConverted = InteropUtils.GetInstance<System.Object[]>(values);
	
	    try {
			System.String __returnValue = System.String.Join(separatorConverted, valuesConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_PadLeft")]
	internal static byte* /* System.String */ System_String_PadLeft(byte* /* System.String */ __self, int /* System.Int32 */ totalWidth, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PadLeft(totalWidth);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_PadLeft_1")]
	internal static byte* /* System.String */ System_String_PadLeft_1(byte* /* System.String */ __self, int /* System.Int32 */ totalWidth, char /* System.Char */ paddingChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PadLeft(totalWidth, paddingChar);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_PadRight")]
	internal static byte* /* System.String */ System_String_PadRight(byte* /* System.String */ __self, int /* System.Int32 */ totalWidth, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PadRight(totalWidth);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_PadRight_1")]
	internal static byte* /* System.String */ System_String_PadRight_1(byte* /* System.String */ __self, int /* System.Int32 */ totalWidth, char /* System.Char */ paddingChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PadRight(totalWidth, paddingChar);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Remove")]
	internal static byte* /* System.String */ System_String_Remove(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Remove(startIndex, count);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Remove_1")]
	internal static byte* /* System.String */ System_String_Remove_1(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Remove(startIndex);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Replace")]
	internal static byte* /* System.String */ System_String_Replace(byte* /* System.String */ __self, byte* /* System.String */ oldValue, byte* /* System.String */ newValue, byte /* System.Boolean */ ignoreCase, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String oldValueConverted = InteropUtils.ToDotNetString(oldValue);
		System.String newValueConverted = InteropUtils.ToDotNetString(newValue);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.String __returnValue = __selfConverted.Replace(oldValueConverted, newValueConverted, ignoreCaseConverted, cultureConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Replace_1")]
	internal static byte* /* System.String */ System_String_Replace_1(byte* /* System.String */ __self, byte* /* System.String */ oldValue, byte* /* System.String */ newValue, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String oldValueConverted = InteropUtils.ToDotNetString(oldValue);
		System.String newValueConverted = InteropUtils.ToDotNetString(newValue);
	
	    try {
			System.String __returnValue = __selfConverted.Replace(oldValueConverted, newValueConverted, comparisonType);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Replace_2")]
	internal static byte* /* System.String */ System_String_Replace_2(byte* /* System.String */ __self, char /* System.Char */ oldChar, char /* System.Char */ newChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Replace(oldChar, newChar);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Replace_3")]
	internal static byte* /* System.String */ System_String_Replace_3(byte* /* System.String */ __self, byte* /* System.String */ oldValue, byte* /* System.String */ newValue, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String oldValueConverted = InteropUtils.ToDotNetString(oldValue);
		System.String newValueConverted = InteropUtils.ToDotNetString(newValue);
	
	    try {
			System.String __returnValue = __selfConverted.Replace(oldValueConverted, newValueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ReplaceLineEndings")]
	internal static byte* /* System.String */ System_String_ReplaceLineEndings(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ReplaceLineEndings();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ReplaceLineEndings_1")]
	internal static byte* /* System.String */ System_String_ReplaceLineEndings_1(byte* /* System.String */ __self, byte* /* System.String */ replacementText, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String replacementTextConverted = InteropUtils.ToDotNetString(replacementText);
	
	    try {
			System.String __returnValue = __selfConverted.ReplaceLineEndings(replacementTextConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Split")]
	internal static void* /* System.String[] */ System_String_Split(byte* /* System.String */ __self, char /* System.Char */ separator, System.StringSplitOptions /* System.StringSplitOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.Split(separator, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Split_1")]
	internal static void* /* System.String[] */ System_String_Split_1(byte* /* System.String */ __self, char /* System.Char */ separator, int /* System.Int32 */ count, System.StringSplitOptions /* System.StringSplitOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.Split(separator, count, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Split_2")]
	internal static void* /* System.String[] */ System_String_Split_2(byte* /* System.String */ __self, void* /* System.Char[] */ separator, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] separatorConverted = InteropUtils.GetInstance<System.Char[]>(separator);
	
	    try {
			System.String[] __returnValue = __selfConverted.Split(separatorConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Split_3")]
	internal static void* /* System.String[] */ System_String_Split_3(byte* /* System.String */ __self, void* /* System.Char[] */ separator, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] separatorConverted = InteropUtils.GetInstance<System.Char[]>(separator);
	
	    try {
			System.String[] __returnValue = __selfConverted.Split(separatorConverted, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Split_4")]
	internal static void* /* System.String[] */ System_String_Split_4(byte* /* System.String */ __self, void* /* System.Char[] */ separator, System.StringSplitOptions /* System.StringSplitOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] separatorConverted = InteropUtils.GetInstance<System.Char[]>(separator);
	
	    try {
			System.String[] __returnValue = __selfConverted.Split(separatorConverted, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Split_5")]
	internal static void* /* System.String[] */ System_String_Split_5(byte* /* System.String */ __self, void* /* System.Char[] */ separator, int /* System.Int32 */ count, System.StringSplitOptions /* System.StringSplitOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] separatorConverted = InteropUtils.GetInstance<System.Char[]>(separator);
	
	    try {
			System.String[] __returnValue = __selfConverted.Split(separatorConverted, count, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Split_6")]
	internal static void* /* System.String[] */ System_String_Split_6(byte* /* System.String */ __self, byte* /* System.String */ separator, System.StringSplitOptions /* System.StringSplitOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String separatorConverted = InteropUtils.ToDotNetString(separator);
	
	    try {
			System.String[] __returnValue = __selfConverted.Split(separatorConverted, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Split_7")]
	internal static void* /* System.String[] */ System_String_Split_7(byte* /* System.String */ __self, byte* /* System.String */ separator, int /* System.Int32 */ count, System.StringSplitOptions /* System.StringSplitOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String separatorConverted = InteropUtils.ToDotNetString(separator);
	
	    try {
			System.String[] __returnValue = __selfConverted.Split(separatorConverted, count, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Split_8")]
	internal static void* /* System.String[] */ System_String_Split_8(byte* /* System.String */ __self, void* /* System.String[] */ separator, System.StringSplitOptions /* System.StringSplitOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String[] separatorConverted = InteropUtils.GetInstance<System.String[]>(separator);
	
	    try {
			System.String[] __returnValue = __selfConverted.Split(separatorConverted, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Split_9")]
	internal static void* /* System.String[] */ System_String_Split_9(byte* /* System.String */ __self, void* /* System.String[] */ separator, int /* System.Int32 */ count, System.StringSplitOptions /* System.StringSplitOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String[] separatorConverted = InteropUtils.GetInstance<System.String[]>(separator);
	
	    try {
			System.String[] __returnValue = __selfConverted.Split(separatorConverted, count, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Substring")]
	internal static byte* /* System.String */ System_String_Substring(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Substring(startIndex);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Substring_1")]
	internal static byte* /* System.String */ System_String_Substring_1(byte* /* System.String */ __self, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Substring(startIndex, length);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToLower")]
	internal static byte* /* System.String */ System_String_ToLower(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLower();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToLower_1")]
	internal static byte* /* System.String */ System_String_ToLower_1(byte* /* System.String */ __self, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.String __returnValue = __selfConverted.ToLower(cultureConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToLowerInvariant")]
	internal static byte* /* System.String */ System_String_ToLowerInvariant(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLowerInvariant();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToUpper")]
	internal static byte* /* System.String */ System_String_ToUpper(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToUpper();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToUpper_1")]
	internal static byte* /* System.String */ System_String_ToUpper_1(byte* /* System.String */ __self, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.String __returnValue = __selfConverted.ToUpper(cultureConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_ToUpperInvariant")]
	internal static byte* /* System.String */ System_String_ToUpperInvariant(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToUpperInvariant();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Trim")]
	internal static byte* /* System.String */ System_String_Trim(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Trim();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Trim_1")]
	internal static byte* /* System.String */ System_String_Trim_1(byte* /* System.String */ __self, char /* System.Char */ trimChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Trim(trimChar);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Trim_2")]
	internal static byte* /* System.String */ System_String_Trim_2(byte* /* System.String */ __self, void* /* System.Char[] */ trimChars, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] trimCharsConverted = InteropUtils.GetInstance<System.Char[]>(trimChars);
	
	    try {
			System.String __returnValue = __selfConverted.Trim(trimCharsConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TrimStart")]
	internal static byte* /* System.String */ System_String_TrimStart(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TrimStart();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TrimStart_1")]
	internal static byte* /* System.String */ System_String_TrimStart_1(byte* /* System.String */ __self, char /* System.Char */ trimChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TrimStart(trimChar);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TrimStart_2")]
	internal static byte* /* System.String */ System_String_TrimStart_2(byte* /* System.String */ __self, void* /* System.Char[] */ trimChars, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] trimCharsConverted = InteropUtils.GetInstance<System.Char[]>(trimChars);
	
	    try {
			System.String __returnValue = __selfConverted.TrimStart(trimCharsConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TrimEnd")]
	internal static byte* /* System.String */ System_String_TrimEnd(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TrimEnd();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TrimEnd_1")]
	internal static byte* /* System.String */ System_String_TrimEnd_1(byte* /* System.String */ __self, char /* System.Char */ trimChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TrimEnd(trimChar);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TrimEnd_2")]
	internal static byte* /* System.String */ System_String_TrimEnd_2(byte* /* System.String */ __self, void* /* System.Char[] */ trimChars, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] trimCharsConverted = InteropUtils.GetInstance<System.Char[]>(trimChars);
	
	    try {
			System.String __returnValue = __selfConverted.TrimEnd(trimCharsConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Contains")]
	internal static byte /* System.Boolean */ System_String_Contains(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Contains_1")]
	internal static byte /* System.Boolean */ System_String_Contains_1(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(valueConverted, comparisonType);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Contains_2")]
	internal static byte /* System.Boolean */ System_String_Contains_2(byte* /* System.String */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Contains_3")]
	internal static byte /* System.Boolean */ System_String_Contains_3(byte* /* System.String */ __self, char /* System.Char */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(value, comparisonType);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf")]
	internal static int /* System.Int32 */ System_String_IndexOf(byte* /* System.String */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf_1")]
	internal static int /* System.Int32 */ System_String_IndexOf_1(byte* /* System.String */ __self, char /* System.Char */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(value, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf_2")]
	internal static int /* System.Int32 */ System_String_IndexOf_2(byte* /* System.String */ __self, char /* System.Char */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(value, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf_3")]
	internal static int /* System.Int32 */ System_String_IndexOf_3(byte* /* System.String */ __self, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(value, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOfAny")]
	internal static int /* System.Int32 */ System_String_IndexOfAny(byte* /* System.String */ __self, void* /* System.Char[] */ anyOf, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] anyOfConverted = InteropUtils.GetInstance<System.Char[]>(anyOf);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOfAny(anyOfConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOfAny_1")]
	internal static int /* System.Int32 */ System_String_IndexOfAny_1(byte* /* System.String */ __self, void* /* System.Char[] */ anyOf, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] anyOfConverted = InteropUtils.GetInstance<System.Char[]>(anyOf);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOfAny(anyOfConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOfAny_2")]
	internal static int /* System.Int32 */ System_String_IndexOfAny_2(byte* /* System.String */ __self, void* /* System.Char[] */ anyOf, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] anyOfConverted = InteropUtils.GetInstance<System.Char[]>(anyOf);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOfAny(anyOfConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf_4")]
	internal static int /* System.Int32 */ System_String_IndexOf_4(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf_5")]
	internal static int /* System.Int32 */ System_String_IndexOf_5(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf_6")]
	internal static int /* System.Int32 */ System_String_IndexOf_6(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf_7")]
	internal static int /* System.Int32 */ System_String_IndexOf_7(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf_8")]
	internal static int /* System.Int32 */ System_String_IndexOf_8(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, startIndex, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_IndexOf_9")]
	internal static int /* System.Int32 */ System_String_IndexOf_9(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, startIndex, count, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf")]
	internal static int /* System.Int32 */ System_String_LastIndexOf(byte* /* System.String */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf_1")]
	internal static int /* System.Int32 */ System_String_LastIndexOf_1(byte* /* System.String */ __self, char /* System.Char */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(value, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf_2")]
	internal static int /* System.Int32 */ System_String_LastIndexOf_2(byte* /* System.String */ __self, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(value, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOfAny")]
	internal static int /* System.Int32 */ System_String_LastIndexOfAny(byte* /* System.String */ __self, void* /* System.Char[] */ anyOf, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] anyOfConverted = InteropUtils.GetInstance<System.Char[]>(anyOf);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOfAny(anyOfConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOfAny_1")]
	internal static int /* System.Int32 */ System_String_LastIndexOfAny_1(byte* /* System.String */ __self, void* /* System.Char[] */ anyOf, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] anyOfConverted = InteropUtils.GetInstance<System.Char[]>(anyOf);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOfAny(anyOfConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOfAny_2")]
	internal static int /* System.Int32 */ System_String_LastIndexOfAny_2(byte* /* System.String */ __self, void* /* System.Char[] */ anyOf, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.Char[] anyOfConverted = InteropUtils.GetInstance<System.Char[]>(anyOf);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOfAny(anyOfConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf_3")]
	internal static int /* System.Int32 */ System_String_LastIndexOf_3(byte* /* System.String */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf_4")]
	internal static int /* System.Int32 */ System_String_LastIndexOf_4(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf_5")]
	internal static int /* System.Int32 */ System_String_LastIndexOf_5(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf_6")]
	internal static int /* System.Int32 */ System_String_LastIndexOf_6(byte* /* System.String */ __self, byte* /* System.String */ value, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf_7")]
	internal static int /* System.Int32 */ System_String_LastIndexOf_7(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, startIndex, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_LastIndexOf_8")]
	internal static int /* System.Int32 */ System_String_LastIndexOf_8(byte* /* System.String */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.StringComparison /* System.StringComparison */ comparisonType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, startIndex, count, comparisonType);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Create")]
	internal static byte* /* System.String */ System_String_Create(void* /* System.Char[] */ value, void** /* System.Exception */ __outException)
	{
		System.Char[] valueConverted = InteropUtils.GetInstance<System.Char[]>(value);
	
	    try {
			System.String __returnValue = new System.String(valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Create_1")]
	internal static byte* /* System.String */ System_String_Create_1(void* /* System.Char[] */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Char[] valueConverted = InteropUtils.GetInstance<System.Char[]>(value);
	
	    try {
			System.String __returnValue = new System.String(valueConverted, startIndex, length);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Create_2")]
	internal static byte* /* System.String */ System_String_Create_2(char /* System.Char */ c, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = new System.String(c, count);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Length_Get")]
	internal static int /* System.Int32 */ System_String_Length_Get(byte* /* System.String */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.String __selfConverted = InteropUtils.ToDotNetString(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Empty_Get")]
	internal static byte* /* System.String */ System_String_Empty_Get()
	{
	
		System.String __returnValue = System.String.Empty;
		byte* __returnValueNative = __returnValue.CopyToCString();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_TypeOf")]
	internal static void* /* System.Type */ System_String_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.String);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_String_Destroy")]
	internal static void /* System.Void */ System_String_Destroy(byte* /* System.String */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_StringComparison
{
	[UnmanagedCallersOnly(EntryPoint = "System_StringComparison_TypeOf")]
	internal static void* /* System.Type */ System_StringComparison_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.StringComparison);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Globalization_CultureInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CreateSpecificCulture")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_CreateSpecificCulture(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.CreateSpecificCulture(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultures")]
	internal static void* /* System.Globalization.CultureInfo[] */ System_Globalization_CultureInfo_GetCultures(System.Globalization.CultureTypes /* System.Globalization.CultureTypes */ types, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo[] __returnValue = System.Globalization.CultureInfo.GetCultures(types);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Equals")]
	internal static byte /* System.Boolean */ System_Globalization_CultureInfo_Equals(void* /* System.Globalization.CultureInfo */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Globalization_CultureInfo_GetHashCode(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_ToString")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_ToString(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetFormat")]
	internal static void* /* System.Object */ System_Globalization_CultureInfo_GetFormat(void* /* System.Globalization.CultureInfo */ __self, void* /* System.Type */ formatType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
		System.Type formatTypeConverted = InteropUtils.GetInstance<System.Type>(formatType);
	
	    try {
			System.Object __returnValue = __selfConverted.GetFormat(formatTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_ClearCachedData")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_ClearCachedData(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			__selfConverted.ClearCachedData();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetConsoleFallbackUICulture")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetConsoleFallbackUICulture(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.CultureInfo __returnValue = __selfConverted.GetConsoleFallbackUICulture();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Clone")]
	internal static void* /* System.Object */ System_Globalization_CultureInfo_Clone(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_ReadOnly")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_ReadOnly(void* /* System.Globalization.CultureInfo */ ci, void** /* System.Exception */ __outException)
	{
		System.Globalization.CultureInfo ciConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(ci);
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.ReadOnly(ciConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultureInfo")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetCultureInfo(int /* System.Int32 */ culture, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.GetCultureInfo(culture);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultureInfo_1")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetCultureInfo_1(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.GetCultureInfo(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultureInfo_2")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetCultureInfo_2(byte* /* System.String */ name, byte* /* System.String */ altName, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.String altNameConverted = InteropUtils.ToDotNetString(altName);
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.GetCultureInfo(nameConverted, altNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultureInfo_3")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetCultureInfo_3(byte* /* System.String */ name, byte /* System.Boolean */ predefinedOnly, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean predefinedOnlyConverted = predefinedOnly.ToBool();
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.GetCultureInfo(nameConverted, predefinedOnlyConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_GetCultureInfoByIetfLanguageTag")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_GetCultureInfoByIetfLanguageTag(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Create_1")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_Create_1(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Globalization.CultureInfo __returnValue = new System.Globalization.CultureInfo(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Create_2")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_Create_2(byte* /* System.String */ name, byte /* System.Boolean */ useUserOverride, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean useUserOverrideConverted = useUserOverride.ToBool();
	
	    try {
			System.Globalization.CultureInfo __returnValue = new System.Globalization.CultureInfo(nameConverted, useUserOverrideConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Create_3")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_Create_3(int /* System.Int32 */ culture, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = new System.Globalization.CultureInfo(culture);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Create_4")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_Create_4(int /* System.Int32 */ culture, byte /* System.Boolean */ useUserOverride, void** /* System.Exception */ __outException)
	{
		System.Boolean useUserOverrideConverted = useUserOverride.ToBool();
	
	    try {
			System.Globalization.CultureInfo __returnValue = new System.Globalization.CultureInfo(culture, useUserOverrideConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CurrentCulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_CurrentCulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.CurrentCulture;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CurrentCulture_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_CurrentCulture_Set(void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo.CurrentCulture = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CurrentUICulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_CurrentUICulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.CurrentUICulture;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CurrentUICulture_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_CurrentUICulture_Set(void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo.CurrentUICulture = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_InstalledUICulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_InstalledUICulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.InstalledUICulture;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.DefaultThreadCurrentCulture;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_DefaultThreadCurrentCulture_Set(void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo.DefaultThreadCurrentCulture = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.DefaultThreadCurrentUICulture;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_DefaultThreadCurrentUICulture_Set(void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo.DefaultThreadCurrentUICulture = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_InvariantCulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_InvariantCulture_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CultureInfo __returnValue = System.Globalization.CultureInfo.InvariantCulture;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Parent_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Globalization_CultureInfo_Parent_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.CultureInfo __returnValue = __selfConverted.Parent;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_LCID_Get")]
	internal static int /* System.Int32 */ System_Globalization_CultureInfo_LCID_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LCID;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_KeyboardLayoutId_Get")]
	internal static int /* System.Int32 */ System_Globalization_CultureInfo_KeyboardLayoutId_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.KeyboardLayoutId;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Name_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_Name_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_IetfLanguageTag_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_IetfLanguageTag_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.IetfLanguageTag;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DisplayName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_DisplayName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.DisplayName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_NativeName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_NativeName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NativeName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_EnglishName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_EnglishName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.EnglishName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_TwoLetterISOLanguageName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_TwoLetterISOLanguageName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TwoLetterISOLanguageName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_ThreeLetterISOLanguageName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_ThreeLetterISOLanguageName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ThreeLetterISOLanguageName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_ThreeLetterWindowsLanguageName_Get")]
	internal static byte* /* System.String */ System_Globalization_CultureInfo_ThreeLetterWindowsLanguageName_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ThreeLetterWindowsLanguageName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CompareInfo_Get")]
	internal static void* /* System.Globalization.CompareInfo */ System_Globalization_CultureInfo_CompareInfo_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.CompareInfo __returnValue = __selfConverted.CompareInfo;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_TextInfo_Get")]
	internal static void* /* System.Globalization.TextInfo */ System_Globalization_CultureInfo_TextInfo_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.TextInfo __returnValue = __selfConverted.TextInfo;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_IsNeutralCulture_Get")]
	internal static byte /* System.Boolean */ System_Globalization_CultureInfo_IsNeutralCulture_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNeutralCulture;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_CultureTypes_Get")]
	internal static System.Globalization.CultureTypes /* System.Globalization.CultureTypes */ System_Globalization_CultureInfo_CultureTypes_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.CultureTypes __returnValue = __selfConverted.CultureTypes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Globalization.CultureTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_NumberFormat_Get")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_CultureInfo_NumberFormat_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = __selfConverted.NumberFormat;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_NumberFormat_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_NumberFormat_Set(void* /* System.Globalization.CultureInfo */ __self, void* /* System.Globalization.NumberFormatInfo */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			__selfConverted.NumberFormat = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DateTimeFormat_Get")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_CultureInfo_DateTimeFormat_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = __selfConverted.DateTimeFormat;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_DateTimeFormat_Set")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_DateTimeFormat_Set(void* /* System.Globalization.CultureInfo */ __self, void* /* System.Globalization.DateTimeFormatInfo */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			__selfConverted.DateTimeFormat = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Calendar_Get")]
	internal static void* /* System.Globalization.Calendar */ System_Globalization_CultureInfo_Calendar_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.Calendar __returnValue = __selfConverted.Calendar;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_OptionalCalendars_Get")]
	internal static void* /* System.Globalization.Calendar[] */ System_Globalization_CultureInfo_OptionalCalendars_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Globalization.Calendar[] __returnValue = __selfConverted.OptionalCalendars;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_UseUserOverride_Get")]
	internal static byte /* System.Boolean */ System_Globalization_CultureInfo_UseUserOverride_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.UseUserOverride;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Globalization_CultureInfo_IsReadOnly_Get(void* /* System.Globalization.CultureInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CultureInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_CultureInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.CultureInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureInfo_Destroy")]
	internal static void /* System.Void */ System_Globalization_CultureInfo_Destroy(void* /* System.Globalization.CultureInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Void
{
	

	

}



internal unsafe class System_Array
{
	[UnmanagedCallersOnly(EntryPoint = "System_Array_Copy")]
	internal static void /* System.Void */ System_Array_Copy(void* /* System.Array */ sourceArray, void* /* System.Array */ destinationArray, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array sourceArrayConverted = InteropUtils.GetInstance<System.Array>(sourceArray);
		System.Array destinationArrayConverted = InteropUtils.GetInstance<System.Array>(destinationArray);
	
	    try {
			System.Array.Copy(sourceArrayConverted, destinationArrayConverted, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Copy_1")]
	internal static void /* System.Void */ System_Array_Copy_1(void* /* System.Array */ sourceArray, int /* System.Int32 */ sourceIndex, void* /* System.Array */ destinationArray, int /* System.Int32 */ destinationIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array sourceArrayConverted = InteropUtils.GetInstance<System.Array>(sourceArray);
		System.Array destinationArrayConverted = InteropUtils.GetInstance<System.Array>(destinationArray);
	
	    try {
			System.Array.Copy(sourceArrayConverted, sourceIndex, destinationArrayConverted, destinationIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_ConstrainedCopy")]
	internal static void /* System.Void */ System_Array_ConstrainedCopy(void* /* System.Array */ sourceArray, int /* System.Int32 */ sourceIndex, void* /* System.Array */ destinationArray, int /* System.Int32 */ destinationIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array sourceArrayConverted = InteropUtils.GetInstance<System.Array>(sourceArray);
		System.Array destinationArrayConverted = InteropUtils.GetInstance<System.Array>(destinationArray);
	
	    try {
			System.Array.ConstrainedCopy(sourceArrayConverted, sourceIndex, destinationArrayConverted, destinationIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Clear")]
	internal static void /* System.Void */ System_Array_Clear(void* /* System.Array */ array, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Clear(arrayConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Clear_1")]
	internal static void /* System.Void */ System_Array_Clear_1(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Clear(arrayConverted, index, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetLength")]
	internal static int /* System.Int32 */ System_Array_GetLength(void* /* System.Array */ __self, int /* System.Int32 */ dimension, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetLength(dimension);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetUpperBound")]
	internal static int /* System.Int32 */ System_Array_GetUpperBound(void* /* System.Array */ __self, int /* System.Int32 */ dimension, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetUpperBound(dimension);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetLowerBound")]
	internal static int /* System.Int32 */ System_Array_GetLowerBound(void* /* System.Array */ __self, int /* System.Int32 */ dimension, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetLowerBound(dimension);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Initialize")]
	internal static void /* System.Void */ System_Array_Initialize(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			__selfConverted.Initialize();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	// TODO: Generic Methods with ref parameters are not supported

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CreateInstance")]
	internal static void* /* System.Array */ System_Array_CreateInstance(void* /* System.Type */ elementType, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Type elementTypeConverted = InteropUtils.GetInstance<System.Type>(elementType);
	
	    try {
			System.Array __returnValue = System.Array.CreateInstance(elementTypeConverted, length);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CreateInstance_1")]
	internal static void* /* System.Array */ System_Array_CreateInstance_1(void* /* System.Type */ elementType, int /* System.Int32 */ length1, int /* System.Int32 */ length2, void** /* System.Exception */ __outException)
	{
		System.Type elementTypeConverted = InteropUtils.GetInstance<System.Type>(elementType);
	
	    try {
			System.Array __returnValue = System.Array.CreateInstance(elementTypeConverted, length1, length2);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CreateInstance_2")]
	internal static void* /* System.Array */ System_Array_CreateInstance_2(void* /* System.Type */ elementType, int /* System.Int32 */ length1, int /* System.Int32 */ length2, int /* System.Int32 */ length3, void** /* System.Exception */ __outException)
	{
		System.Type elementTypeConverted = InteropUtils.GetInstance<System.Type>(elementType);
	
	    try {
			System.Array __returnValue = System.Array.CreateInstance(elementTypeConverted, length1, length2, length3);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CreateInstance_3")]
	internal static void* /* System.Array */ System_Array_CreateInstance_3(void* /* System.Type */ elementType, void* /* System.Int32[] */ lengths, void** /* System.Exception */ __outException)
	{
		System.Type elementTypeConverted = InteropUtils.GetInstance<System.Type>(elementType);
		System.Int32[] lengthsConverted = InteropUtils.GetInstance<System.Int32[]>(lengths);
	
	    try {
			System.Array __returnValue = System.Array.CreateInstance(elementTypeConverted, lengthsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CreateInstance_4")]
	internal static void* /* System.Array */ System_Array_CreateInstance_4(void* /* System.Type */ elementType, void* /* System.Int32[] */ lengths, void* /* System.Int32[] */ lowerBounds, void** /* System.Exception */ __outException)
	{
		System.Type elementTypeConverted = InteropUtils.GetInstance<System.Type>(elementType);
		System.Int32[] lengthsConverted = InteropUtils.GetInstance<System.Int32[]>(lengths);
		System.Int32[] lowerBoundsConverted = InteropUtils.GetInstance<System.Int32[]>(lowerBounds);
	
	    try {
			System.Array __returnValue = System.Array.CreateInstance(elementTypeConverted, lengthsConverted, lowerBoundsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CreateInstance_5")]
	internal static void* /* System.Array */ System_Array_CreateInstance_5(void* /* System.Type */ elementType, void* /* System.Int64[] */ lengths, void** /* System.Exception */ __outException)
	{
		System.Type elementTypeConverted = InteropUtils.GetInstance<System.Type>(elementType);
		System.Int64[] lengthsConverted = InteropUtils.GetInstance<System.Int64[]>(lengths);
	
	    try {
			System.Array __returnValue = System.Array.CreateInstance(elementTypeConverted, lengthsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Copy_2")]
	internal static void /* System.Void */ System_Array_Copy_2(void* /* System.Array */ sourceArray, void* /* System.Array */ destinationArray, long /* System.Int64 */ length, void** /* System.Exception */ __outException)
	{
		System.Array sourceArrayConverted = InteropUtils.GetInstance<System.Array>(sourceArray);
		System.Array destinationArrayConverted = InteropUtils.GetInstance<System.Array>(destinationArray);
	
	    try {
			System.Array.Copy(sourceArrayConverted, destinationArrayConverted, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Copy_3")]
	internal static void /* System.Void */ System_Array_Copy_3(void* /* System.Array */ sourceArray, long /* System.Int64 */ sourceIndex, void* /* System.Array */ destinationArray, long /* System.Int64 */ destinationIndex, long /* System.Int64 */ length, void** /* System.Exception */ __outException)
	{
		System.Array sourceArrayConverted = InteropUtils.GetInstance<System.Array>(sourceArray);
		System.Array destinationArrayConverted = InteropUtils.GetInstance<System.Array>(destinationArray);
	
	    try {
			System.Array.Copy(sourceArrayConverted, sourceIndex, destinationArrayConverted, destinationIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue")]
	internal static void* /* System.Object */ System_Array_GetValue(void* /* System.Array */ __self, void* /* System.Int32[] */ indices, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Int32[] indicesConverted = InteropUtils.GetInstance<System.Int32[]>(indices);
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(indicesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue_1")]
	internal static void* /* System.Object */ System_Array_GetValue_1(void* /* System.Array */ __self, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue_2")]
	internal static void* /* System.Object */ System_Array_GetValue_2(void* /* System.Array */ __self, int /* System.Int32 */ index1, int /* System.Int32 */ index2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index1, index2);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue_3")]
	internal static void* /* System.Object */ System_Array_GetValue_3(void* /* System.Array */ __self, int /* System.Int32 */ index1, int /* System.Int32 */ index2, int /* System.Int32 */ index3, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index1, index2, index3);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue")]
	internal static void /* System.Void */ System_Array_SetValue(void* /* System.Array */ __self, void* /* System.Object */ value, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue_1")]
	internal static void /* System.Void */ System_Array_SetValue_1(void* /* System.Array */ __self, void* /* System.Object */ value, int /* System.Int32 */ index1, int /* System.Int32 */ index2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index1, index2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue_2")]
	internal static void /* System.Void */ System_Array_SetValue_2(void* /* System.Array */ __self, void* /* System.Object */ value, int /* System.Int32 */ index1, int /* System.Int32 */ index2, int /* System.Int32 */ index3, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index1, index2, index3);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue_3")]
	internal static void /* System.Void */ System_Array_SetValue_3(void* /* System.Array */ __self, void* /* System.Object */ value, void* /* System.Int32[] */ indices, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Int32[] indicesConverted = InteropUtils.GetInstance<System.Int32[]>(indices);
	
	    try {
			__selfConverted.SetValue(valueConverted, indicesConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue_4")]
	internal static void* /* System.Object */ System_Array_GetValue_4(void* /* System.Array */ __self, long /* System.Int64 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue_5")]
	internal static void* /* System.Object */ System_Array_GetValue_5(void* /* System.Array */ __self, long /* System.Int64 */ index1, long /* System.Int64 */ index2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index1, index2);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue_6")]
	internal static void* /* System.Object */ System_Array_GetValue_6(void* /* System.Array */ __self, long /* System.Int64 */ index1, long /* System.Int64 */ index2, long /* System.Int64 */ index3, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(index1, index2, index3);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetValue_7")]
	internal static void* /* System.Object */ System_Array_GetValue_7(void* /* System.Array */ __self, void* /* System.Int64[] */ indices, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Int64[] indicesConverted = InteropUtils.GetInstance<System.Int64[]>(indices);
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(indicesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue_4")]
	internal static void /* System.Void */ System_Array_SetValue_4(void* /* System.Array */ __self, void* /* System.Object */ value, long /* System.Int64 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue_5")]
	internal static void /* System.Void */ System_Array_SetValue_5(void* /* System.Array */ __self, void* /* System.Object */ value, long /* System.Int64 */ index1, long /* System.Int64 */ index2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index1, index2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue_6")]
	internal static void /* System.Void */ System_Array_SetValue_6(void* /* System.Array */ __self, void* /* System.Object */ value, long /* System.Int64 */ index1, long /* System.Int64 */ index2, long /* System.Int64 */ index3, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(valueConverted, index1, index2, index3);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SetValue_7")]
	internal static void /* System.Void */ System_Array_SetValue_7(void* /* System.Array */ __self, void* /* System.Object */ value, void* /* System.Int64[] */ indices, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Int64[] indicesConverted = InteropUtils.GetInstance<System.Int64[]>(indices);
	
	    try {
			__selfConverted.SetValue(valueConverted, indicesConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetLongLength")]
	internal static long /* System.Int64 */ System_Array_GetLongLength(void* /* System.Array */ __self, int /* System.Int32 */ dimension, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.GetLongLength(dimension);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Clone")]
	internal static void* /* System.Object */ System_Array_Clone(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_BinarySearch")]
	internal static int /* System.Int32 */ System_Array_BinarySearch(void* /* System.Array */ array, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.BinarySearch(arrayConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_BinarySearch_1")]
	internal static int /* System.Int32 */ System_Array_BinarySearch_1(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.BinarySearch(arrayConverted, index, length, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_BinarySearch_2")]
	internal static int /* System.Int32 */ System_Array_BinarySearch_2(void* /* System.Array */ array, void* /* System.Object */ value, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Int32 __returnValue = System.Array.BinarySearch(arrayConverted, valueConverted, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_BinarySearch_3")]
	internal static int /* System.Int32 */ System_Array_BinarySearch_3(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void* /* System.Object */ value, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Int32 __returnValue = System.Array.BinarySearch(arrayConverted, index, length, valueConverted, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CopyTo")]
	internal static void /* System.Void */ System_Array_CopyTo(void* /* System.Array */ __self, void* /* System.Array */ array, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(arrayConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_CopyTo_1")]
	internal static void /* System.Void */ System_Array_CopyTo_1(void* /* System.Array */ __self, void* /* System.Array */ array, long /* System.Int64 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(arrayConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Empty_A1")]
	internal static void* /* System.Array */ System_Array_Empty_A1(void* /* System.Type */ T, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Array);
			System.String __nameOfMethodForGenericCall = nameof(System.Array.Empty);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[]? __parametersForGenericCall = null;
			System.Type[] __parameterTypesForGenericCall = System.Type.EmptyTypes;
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method Empty not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Array __returnValue = (System.Array)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IndexOf")]
	internal static int /* System.Int32 */ System_Array_IndexOf(void* /* System.Array */ array, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.IndexOf(arrayConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IndexOf_1")]
	internal static int /* System.Int32 */ System_Array_IndexOf_1(void* /* System.Array */ array, void* /* System.Object */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.IndexOf(arrayConverted, valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IndexOf_2")]
	internal static int /* System.Int32 */ System_Array_IndexOf_2(void* /* System.Array */ array, void* /* System.Object */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.IndexOf(arrayConverted, valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	[UnmanagedCallersOnly(EntryPoint = "System_Array_LastIndexOf")]
	internal static int /* System.Int32 */ System_Array_LastIndexOf(void* /* System.Array */ array, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.LastIndexOf(arrayConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_LastIndexOf_1")]
	internal static int /* System.Int32 */ System_Array_LastIndexOf_1(void* /* System.Array */ array, void* /* System.Object */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.LastIndexOf(arrayConverted, valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_LastIndexOf_2")]
	internal static int /* System.Int32 */ System_Array_LastIndexOf_2(void* /* System.Array */ array, void* /* System.Object */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Array.LastIndexOf(arrayConverted, valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Reverse")]
	internal static void /* System.Void */ System_Array_Reverse(void* /* System.Array */ array, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Reverse(arrayConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Reverse_1")]
	internal static void /* System.Void */ System_Array_Reverse_1(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Reverse(arrayConverted, index, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort")]
	internal static void /* System.Void */ System_Array_Sort(void* /* System.Array */ array, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Sort(arrayConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort_1")]
	internal static void /* System.Void */ System_Array_Sort_1(void* /* System.Array */ keys, void* /* System.Array */ items, void** /* System.Exception */ __outException)
	{
		System.Array keysConverted = InteropUtils.GetInstance<System.Array>(keys);
		System.Array itemsConverted = InteropUtils.GetInstance<System.Array>(items);
	
	    try {
			System.Array.Sort(keysConverted, itemsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort_2")]
	internal static void /* System.Void */ System_Array_Sort_2(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			System.Array.Sort(arrayConverted, index, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort_3")]
	internal static void /* System.Void */ System_Array_Sort_3(void* /* System.Array */ keys, void* /* System.Array */ items, int /* System.Int32 */ index, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Array keysConverted = InteropUtils.GetInstance<System.Array>(keys);
		System.Array itemsConverted = InteropUtils.GetInstance<System.Array>(items);
	
	    try {
			System.Array.Sort(keysConverted, itemsConverted, index, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort_4")]
	internal static void /* System.Void */ System_Array_Sort_4(void* /* System.Array */ array, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Array.Sort(arrayConverted, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort_5")]
	internal static void /* System.Void */ System_Array_Sort_5(void* /* System.Array */ keys, void* /* System.Array */ items, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array keysConverted = InteropUtils.GetInstance<System.Array>(keys);
		System.Array itemsConverted = InteropUtils.GetInstance<System.Array>(items);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Array.Sort(keysConverted, itemsConverted, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort_6")]
	internal static void /* System.Void */ System_Array_Sort_6(void* /* System.Array */ array, int /* System.Int32 */ index, int /* System.Int32 */ length, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Array.Sort(arrayConverted, index, length, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Sort_7")]
	internal static void /* System.Void */ System_Array_Sort_7(void* /* System.Array */ keys, void* /* System.Array */ items, int /* System.Int32 */ index, int /* System.Int32 */ length, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Array keysConverted = InteropUtils.GetInstance<System.Array>(keys);
		System.Array itemsConverted = InteropUtils.GetInstance<System.Array>(items);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Array.Sort(keysConverted, itemsConverted, index, length, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	[UnmanagedCallersOnly(EntryPoint = "System_Array_GetEnumerator")]
	internal static void* /* System.Collections.IEnumerator */ System_Array_GetEnumerator(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Collections.IEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Length_Get")]
	internal static int /* System.Int32 */ System_Array_Length_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_LongLength_Get")]
	internal static long /* System.Int64 */ System_Array_LongLength_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.LongLength;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Rank_Get")]
	internal static int /* System.Int32 */ System_Array_Rank_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Rank;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_SyncRoot_Get")]
	internal static void* /* System.Object */ System_Array_SyncRoot_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.SyncRoot;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Array_IsReadOnly_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IsFixedSize_Get")]
	internal static byte /* System.Boolean */ System_Array_IsFixedSize_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFixedSize;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_IsSynchronized_Get")]
	internal static byte /* System.Boolean */ System_Array_IsSynchronized_Get(void* /* System.Array */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Array __selfConverted = InteropUtils.GetInstance<System.Array>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSynchronized;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_MaxLength_Get")]
	internal static int /* System.Int32 */ System_Array_MaxLength_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Array.MaxLength;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_TypeOf")]
	internal static void* /* System.Type */ System_Array_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Array);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Array_Destroy")]
	internal static void /* System.Void */ System_Array_Destroy(void* /* System.Array */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_IFormatProvider
{
	[UnmanagedCallersOnly(EntryPoint = "System_IFormatProvider_GetFormat")]
	internal static void* /* System.Object */ System_IFormatProvider_GetFormat(void* /* System.IFormatProvider */ __self, void* /* System.Type */ formatType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IFormatProvider __selfConverted = InteropUtils.GetInstance<System.IFormatProvider>(__self);
	
		System.Type formatTypeConverted = InteropUtils.GetInstance<System.Type>(formatType);
	
	    try {
			System.Object __returnValue = __selfConverted.GetFormat(formatTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IFormatProvider_TypeOf")]
	internal static void* /* System.Type */ System_IFormatProvider_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IFormatProvider);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IFormatProvider_Destroy")]
	internal static void /* System.Void */ System_IFormatProvider_Destroy(void* /* System.IFormatProvider */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Globalization_NumberStyles
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberStyles_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_NumberStyles_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.NumberStyles);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}



internal unsafe class System_TypeCode
{
	[UnmanagedCallersOnly(EntryPoint = "System_TypeCode_TypeOf")]
	internal static void* /* System.Type */ System_TypeCode_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.TypeCode);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.

// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.




internal unsafe class System_Collections_IComparer
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IComparer_Compare")]
	internal static int /* System.Int32 */ System_Collections_IComparer_Compare(void* /* System.Collections.IComparer */ __self, void* /* System.Object */ x, void* /* System.Object */ y, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IComparer __selfConverted = InteropUtils.GetInstance<System.Collections.IComparer>(__self);
	
		System.Object xConverted = InteropUtils.GetInstance<System.Object>(x);
		System.Object yConverted = InteropUtils.GetInstance<System.Object>(y);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(xConverted, yConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IComparer_TypeOf")]
	internal static void* /* System.Type */ System_Collections_IComparer_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.IComparer);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IComparer_Destroy")]
	internal static void /* System.Void */ System_Collections_IComparer_Destroy(void* /* System.Collections.IComparer */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "TOutput" was skipped. Reason: It has no full name.


// Type "TInput" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.

// Type "T" was skipped. Reason: It has no full name.



// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.

// Type "T" was skipped. Reason: It has no full name.



// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "TKey" was skipped. Reason: It has no full name.


// Type "TValue" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "TKey" was skipped. Reason: It has no full name.


// Type "TValue" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "TKey" was skipped. Reason: It has no full name.


// Type "TValue" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "TKey" was skipped. Reason: It has no full name.


// Type "TValue" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.

internal unsafe class System_Collections_IEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEnumerator_MoveNext")]
	internal static byte /* System.Boolean */ System_Collections_IEnumerator_MoveNext(void* /* System.Collections.IEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IEnumerator>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MoveNext();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEnumerator_Reset")]
	internal static void /* System.Void */ System_Collections_IEnumerator_Reset(void* /* System.Collections.IEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IEnumerator>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEnumerator_Current_Get")]
	internal static void* /* System.Object */ System_Collections_IEnumerator_Current_Get(void* /* System.Collections.IEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IEnumerator>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Current;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEnumerator_TypeOf")]
	internal static void* /* System.Type */ System_Collections_IEnumerator_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.IEnumerator);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEnumerator_Destroy")]
	internal static void /* System.Void */ System_Collections_IEnumerator_Destroy(void* /* System.Collections.IEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Globalization_CultureTypes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CultureTypes_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_CultureTypes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.CultureTypes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Globalization_CompareInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetCompareInfo")]
	internal static void* /* System.Globalization.CompareInfo */ System_Globalization_CompareInfo_GetCompareInfo(int /* System.Int32 */ culture, void* /* System.Reflection.Assembly */ assembly, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly assemblyConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(assembly);
	
	    try {
			System.Globalization.CompareInfo __returnValue = System.Globalization.CompareInfo.GetCompareInfo(culture, assemblyConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetCompareInfo_1")]
	internal static void* /* System.Globalization.CompareInfo */ System_Globalization_CompareInfo_GetCompareInfo_1(byte* /* System.String */ name, void* /* System.Reflection.Assembly */ assembly, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Assembly assemblyConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(assembly);
	
	    try {
			System.Globalization.CompareInfo __returnValue = System.Globalization.CompareInfo.GetCompareInfo(nameConverted, assemblyConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetCompareInfo_2")]
	internal static void* /* System.Globalization.CompareInfo */ System_Globalization_CompareInfo_GetCompareInfo_2(int /* System.Int32 */ culture, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.CompareInfo __returnValue = System.Globalization.CompareInfo.GetCompareInfo(culture);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetCompareInfo_3")]
	internal static void* /* System.Globalization.CompareInfo */ System_Globalization_CompareInfo_GetCompareInfo_3(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Globalization.CompareInfo __returnValue = System.Globalization.CompareInfo.GetCompareInfo(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsSortable")]
	internal static byte /* System.Boolean */ System_Globalization_CompareInfo_IsSortable(char /* System.Char */ ch, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Globalization.CompareInfo.IsSortable(ch);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsSortable_1")]
	internal static byte /* System.Boolean */ System_Globalization_CompareInfo_IsSortable_1(byte* /* System.String */ text, void** /* System.Exception */ __outException)
	{
		System.String textConverted = InteropUtils.ToDotNetString(text);
	
	    try {
			System.Boolean __returnValue = System.Globalization.CompareInfo.IsSortable(textConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsSortable_2")]
	internal static byte /* System.Boolean */ System_Globalization_CompareInfo_IsSortable_2(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Globalization.CompareInfo.IsSortable(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, byte* /* System.String */ string2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, string2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare_1")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare_1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, byte* /* System.String */ string2, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, string2Converted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare_2")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare_2(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, int /* System.Int32 */ offset1, int /* System.Int32 */ length1, byte* /* System.String */ string2, int /* System.Int32 */ offset2, int /* System.Int32 */ length2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, offset1, length1, string2Converted, offset2, length2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare_3")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare_3(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, int /* System.Int32 */ offset1, byte* /* System.String */ string2, int /* System.Int32 */ offset2, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, offset1, string2Converted, offset2, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare_4")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare_4(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, int /* System.Int32 */ offset1, byte* /* System.String */ string2, int /* System.Int32 */ offset2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, offset1, string2Converted, offset2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Compare_5")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_Compare_5(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ string1, int /* System.Int32 */ offset1, int /* System.Int32 */ length1, byte* /* System.String */ string2, int /* System.Int32 */ offset2, int /* System.Int32 */ length2, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String string1Converted = InteropUtils.ToDotNetString(string1);
		System.String string2Converted = InteropUtils.ToDotNetString(string2);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Compare(string1Converted, offset1, length1, string2Converted, offset2, length2, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsPrefix")]
	internal static byte /* System.Boolean */ System_Globalization_CompareInfo_IsPrefix(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ prefix, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String prefixConverted = InteropUtils.ToDotNetString(prefix);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPrefix(sourceConverted, prefixConverted, options);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsPrefix_1")]
	internal static byte /* System.Boolean */ System_Globalization_CompareInfo_IsPrefix_1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ prefix, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String prefixConverted = InteropUtils.ToDotNetString(prefix);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPrefix(sourceConverted, prefixConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsSuffix")]
	internal static byte /* System.Boolean */ System_Globalization_CompareInfo_IsSuffix(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ suffix, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String suffixConverted = InteropUtils.ToDotNetString(suffix);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSuffix(sourceConverted, suffixConverted, options);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IsSuffix_1")]
	internal static byte /* System.Boolean */ System_Globalization_CompareInfo_IsSuffix_1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ suffix, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String suffixConverted = InteropUtils.ToDotNetString(suffix);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSuffix(sourceConverted, suffixConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_1")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_2")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_2(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_3")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_3(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_4")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_4(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_5")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_5(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_6")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_6(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value, startIndex, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_7")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_7(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted, startIndex, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_8")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_8(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_9")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_9(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_10")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_10(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, value, startIndex, count, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_IndexOf_11")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_IndexOf_11(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(sourceConverted, valueConverted, startIndex, count, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_1")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_2")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_2(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_3")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_3(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_4")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_4(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_5")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_5(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_6")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_6(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value, startIndex, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_7")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_7(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted, startIndex, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_8")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_8(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_9")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_9(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_10")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_10(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, char /* System.Char */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, value, startIndex, count, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LastIndexOf_11")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LastIndexOf_11(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(sourceConverted, valueConverted, startIndex, count, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetSortKey")]
	internal static void* /* System.Globalization.SortKey */ System_Globalization_CompareInfo_GetSortKey(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Globalization.SortKey __returnValue = __selfConverted.GetSortKey(sourceConverted, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetSortKey_1")]
	internal static void* /* System.Globalization.SortKey */ System_Globalization_CompareInfo_GetSortKey_1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Globalization.SortKey __returnValue = __selfConverted.GetSortKey(sourceConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Equals")]
	internal static byte /* System.Boolean */ System_Globalization_CompareInfo_Equals(void* /* System.Globalization.CompareInfo */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_GetHashCode(void* /* System.Globalization.CompareInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_GetHashCode_1")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_GetHashCode_1(void* /* System.Globalization.CompareInfo */ __self, byte* /* System.String */ source, System.Globalization.CompareOptions /* System.Globalization.CompareOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
		System.String sourceConverted = InteropUtils.ToDotNetString(source);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode(sourceConverted, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_ToString")]
	internal static byte* /* System.String */ System_Globalization_CompareInfo_ToString(void* /* System.Globalization.CompareInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Name_Get")]
	internal static byte* /* System.String */ System_Globalization_CompareInfo_Name_Get(void* /* System.Globalization.CompareInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Version_Get")]
	internal static void* /* System.Globalization.SortVersion */ System_Globalization_CompareInfo_Version_Get(void* /* System.Globalization.CompareInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
	
	    try {
			System.Globalization.SortVersion __returnValue = __selfConverted.Version;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_LCID_Get")]
	internal static int /* System.Int32 */ System_Globalization_CompareInfo_LCID_Get(void* /* System.Globalization.CompareInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.CompareInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.CompareInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LCID;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_CompareInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.CompareInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareInfo_Destroy")]
	internal static void /* System.Void */ System_Globalization_CompareInfo_Destroy(void* /* System.Globalization.CompareInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_Assembly
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Load")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_Load(byte* /* System.String */ assemblyString, void** /* System.Exception */ __outException)
	{
		System.String assemblyStringConverted = InteropUtils.ToDotNetString(assemblyString);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.Load(assemblyStringConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_LoadWithPartialName")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_LoadWithPartialName(byte* /* System.String */ partialName, void** /* System.Exception */ __outException)
	{
		System.String partialNameConverted = InteropUtils.ToDotNetString(partialName);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.LoadWithPartialName(partialNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Load_1")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_Load_1(void* /* System.Reflection.AssemblyName */ assemblyRef, void** /* System.Exception */ __outException)
	{
		System.Reflection.AssemblyName assemblyRefConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(assemblyRef);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.Load(assemblyRefConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetExecutingAssembly")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetExecutingAssembly(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.GetExecutingAssembly();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetCallingAssembly")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetCallingAssembly(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.GetCallingAssembly();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetTypes")]
	internal static void* /* System.Type[] */ System_Reflection_Assembly_GetTypes(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetTypes();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetExportedTypes")]
	internal static void* /* System.Type[] */ System_Reflection_Assembly_GetExportedTypes(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetExportedTypes();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetForwardedTypes")]
	internal static void* /* System.Type[] */ System_Reflection_Assembly_GetForwardedTypes(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetForwardedTypes();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetManifestResourceInfo")]
	internal static void* /* System.Reflection.ManifestResourceInfo */ System_Reflection_Assembly_GetManifestResourceInfo(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ resourceName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String resourceNameConverted = InteropUtils.ToDotNetString(resourceName);
	
	    try {
			System.Reflection.ManifestResourceInfo __returnValue = __selfConverted.GetManifestResourceInfo(resourceNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetManifestResourceNames")]
	internal static void* /* System.String[] */ System_Reflection_Assembly_GetManifestResourceNames(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.GetManifestResourceNames();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetManifestResourceStream")]
	internal static void* /* System.IO.Stream */ System_Reflection_Assembly_GetManifestResourceStream(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.IO.Stream __returnValue = __selfConverted.GetManifestResourceStream(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetManifestResourceStream_1")]
	internal static void* /* System.IO.Stream */ System_Reflection_Assembly_GetManifestResourceStream_1(void* /* System.Reflection.Assembly */ __self, void* /* System.Type */ type, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.IO.Stream __returnValue = __selfConverted.GetManifestResourceStream(typeConverted, nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetName")]
	internal static void* /* System.Reflection.AssemblyName */ System_Reflection_Assembly_GetName(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Reflection.AssemblyName __returnValue = __selfConverted.GetName();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetName_1")]
	internal static void* /* System.Reflection.AssemblyName */ System_Reflection_Assembly_GetName_1(void* /* System.Reflection.Assembly */ __self, byte /* System.Boolean */ copiedName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Boolean copiedNameConverted = copiedName.ToBool();
	
	    try {
			System.Reflection.AssemblyName __returnValue = __selfConverted.GetName(copiedNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetType_1")]
	internal static void* /* System.Type */ System_Reflection_Assembly_GetType_1(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetType_2")]
	internal static void* /* System.Type */ System_Reflection_Assembly_GetType_2(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, byte /* System.Boolean */ throwOnError, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(nameConverted, throwOnErrorConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetType_3")]
	internal static void* /* System.Type */ System_Reflection_Assembly_GetType_3(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, byte /* System.Boolean */ throwOnError, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(nameConverted, throwOnErrorConverted, ignoreCaseConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_IsDefined")]
	internal static byte /* System.Boolean */ System_Reflection_Assembly_IsDefined(void* /* System.Reflection.Assembly */ __self, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefined(attributeTypeConverted, inheritConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetCustomAttributes")]
	internal static void* /* System.Object[] */ System_Reflection_Assembly_GetCustomAttributes(void* /* System.Reflection.Assembly */ __self, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Object[] __returnValue = __selfConverted.GetCustomAttributes(inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetCustomAttributes_1")]
	internal static void* /* System.Object[] */ System_Reflection_Assembly_GetCustomAttributes_1(void* /* System.Reflection.Assembly */ __self, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Object[] __returnValue = __selfConverted.GetCustomAttributes(attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_CreateInstance")]
	internal static void* /* System.Object */ System_Reflection_Assembly_CreateInstance(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ typeName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstance(typeNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_CreateInstance_1")]
	internal static void* /* System.Object */ System_Reflection_Assembly_CreateInstance_1(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ typeName, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstance(typeNameConverted, ignoreCaseConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_CreateInstance_2")]
	internal static void* /* System.Object */ System_Reflection_Assembly_CreateInstance_2(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ typeName, byte /* System.Boolean */ ignoreCase, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object[] */ args, void* /* System.Globalization.CultureInfo */ culture, void* /* System.Object[] */ activationAttributes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
		System.Object[] activationAttributesConverted = InteropUtils.GetInstance<System.Object[]>(activationAttributes);
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstance(typeNameConverted, ignoreCaseConverted, bindingAttr, binderConverted, argsConverted, cultureConverted, activationAttributesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetModule")]
	internal static void* /* System.Reflection.Module */ System_Reflection_Assembly_GetModule(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.Module __returnValue = __selfConverted.GetModule(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetModules")]
	internal static void* /* System.Reflection.Module[] */ System_Reflection_Assembly_GetModules(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Reflection.Module[] __returnValue = __selfConverted.GetModules();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetModules_1")]
	internal static void* /* System.Reflection.Module[] */ System_Reflection_Assembly_GetModules_1(void* /* System.Reflection.Assembly */ __self, byte /* System.Boolean */ getResourceModules, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Boolean getResourceModulesConverted = getResourceModules.ToBool();
	
	    try {
			System.Reflection.Module[] __returnValue = __selfConverted.GetModules(getResourceModulesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetLoadedModules")]
	internal static void* /* System.Reflection.Module[] */ System_Reflection_Assembly_GetLoadedModules(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Reflection.Module[] __returnValue = __selfConverted.GetLoadedModules();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetLoadedModules_1")]
	internal static void* /* System.Reflection.Module[] */ System_Reflection_Assembly_GetLoadedModules_1(void* /* System.Reflection.Assembly */ __self, byte /* System.Boolean */ getResourceModules, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Boolean getResourceModulesConverted = getResourceModules.ToBool();
	
	    try {
			System.Reflection.Module[] __returnValue = __selfConverted.GetLoadedModules(getResourceModulesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetReferencedAssemblies")]
	internal static void* /* System.Reflection.AssemblyName[] */ System_Reflection_Assembly_GetReferencedAssemblies(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Reflection.AssemblyName[] __returnValue = __selfConverted.GetReferencedAssemblies();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetSatelliteAssembly")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetSatelliteAssembly(void* /* System.Reflection.Assembly */ __self, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.GetSatelliteAssembly(cultureConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetSatelliteAssembly_1")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetSatelliteAssembly_1(void* /* System.Reflection.Assembly */ __self, void* /* System.Globalization.CultureInfo */ culture, void* /* System.Version */ version, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
		System.Version versionConverted = InteropUtils.GetInstance<System.Version>(version);
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.GetSatelliteAssembly(cultureConverted, versionConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetFile")]
	internal static void* /* System.IO.FileStream */ System_Reflection_Assembly_GetFile(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.IO.FileStream __returnValue = __selfConverted.GetFile(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetFiles")]
	internal static void* /* System.IO.FileStream[] */ System_Reflection_Assembly_GetFiles(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.IO.FileStream[] __returnValue = __selfConverted.GetFiles();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetFiles_1")]
	internal static void* /* System.IO.FileStream[] */ System_Reflection_Assembly_GetFiles_1(void* /* System.Reflection.Assembly */ __self, byte /* System.Boolean */ getResourceModules, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Boolean getResourceModulesConverted = getResourceModules.ToBool();
	
	    try {
			System.IO.FileStream[] __returnValue = __selfConverted.GetFiles(getResourceModulesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetObjectData")]
	internal static void /* System.Void */ System_Reflection_Assembly_GetObjectData(void* /* System.Reflection.Assembly */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ToString")]
	internal static byte* /* System.String */ System_Reflection_Assembly_ToString(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Equals")]
	internal static byte /* System.Boolean */ System_Reflection_Assembly_Equals(void* /* System.Reflection.Assembly */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_Assembly_GetHashCode(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_CreateQualifiedName")]
	internal static byte* /* System.String */ System_Reflection_Assembly_CreateQualifiedName(byte* /* System.String */ assemblyName, byte* /* System.String */ typeName, void** /* System.Exception */ __outException)
	{
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
	
	    try {
			System.String __returnValue = System.Reflection.Assembly.CreateQualifiedName(assemblyNameConverted, typeNameConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetAssembly")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetAssembly(void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.GetAssembly(typeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GetEntryAssembly")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_GetEntryAssembly(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.GetEntryAssembly();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Load_2")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_Load_2(void* /* System.Byte[] */ rawAssembly, void** /* System.Exception */ __outException)
	{
		System.Byte[] rawAssemblyConverted = InteropUtils.GetInstance<System.Byte[]>(rawAssembly);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.Load(rawAssemblyConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Load_3")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_Load_3(void* /* System.Byte[] */ rawAssembly, void* /* System.Byte[] */ rawSymbolStore, void** /* System.Exception */ __outException)
	{
		System.Byte[] rawAssemblyConverted = InteropUtils.GetInstance<System.Byte[]>(rawAssembly);
		System.Byte[] rawSymbolStoreConverted = InteropUtils.GetInstance<System.Byte[]>(rawSymbolStore);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.Load(rawAssemblyConverted, rawSymbolStoreConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_LoadFile")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_LoadFile(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.LoadFile(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_LoadFrom")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_LoadFrom(byte* /* System.String */ assemblyFile, void** /* System.Exception */ __outException)
	{
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.LoadFrom(assemblyFileConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_LoadFrom_1")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_LoadFrom_1(byte* /* System.String */ assemblyFile, void* /* System.Byte[] */ hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */ hashAlgorithm, void** /* System.Exception */ __outException)
	{
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
		System.Byte[] hashValueConverted = InteropUtils.GetInstance<System.Byte[]>(hashValue);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.LoadFrom(assemblyFileConverted, hashValueConverted, hashAlgorithm);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_UnsafeLoadFrom")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_UnsafeLoadFrom(byte* /* System.String */ assemblyFile, void** /* System.Exception */ __outException)
	{
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.UnsafeLoadFrom(assemblyFileConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_LoadModule")]
	internal static void* /* System.Reflection.Module */ System_Reflection_Assembly_LoadModule(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ moduleName, void* /* System.Byte[] */ rawModule, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String moduleNameConverted = InteropUtils.ToDotNetString(moduleName);
		System.Byte[] rawModuleConverted = InteropUtils.GetInstance<System.Byte[]>(rawModule);
	
	    try {
			System.Reflection.Module __returnValue = __selfConverted.LoadModule(moduleNameConverted, rawModuleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_LoadModule_1")]
	internal static void* /* System.Reflection.Module */ System_Reflection_Assembly_LoadModule_1(void* /* System.Reflection.Assembly */ __self, byte* /* System.String */ moduleName, void* /* System.Byte[] */ rawModule, void* /* System.Byte[] */ rawSymbolStore, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
		System.String moduleNameConverted = InteropUtils.ToDotNetString(moduleName);
		System.Byte[] rawModuleConverted = InteropUtils.GetInstance<System.Byte[]>(rawModule);
		System.Byte[] rawSymbolStoreConverted = InteropUtils.GetInstance<System.Byte[]>(rawSymbolStore);
	
	    try {
			System.Reflection.Module __returnValue = __selfConverted.LoadModule(moduleNameConverted, rawModuleConverted, rawSymbolStoreConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ReflectionOnlyLoad")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_ReflectionOnlyLoad(void* /* System.Byte[] */ rawAssembly, void** /* System.Exception */ __outException)
	{
		System.Byte[] rawAssemblyConverted = InteropUtils.GetInstance<System.Byte[]>(rawAssembly);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.ReflectionOnlyLoad(rawAssemblyConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ReflectionOnlyLoad_1")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_ReflectionOnlyLoad_1(byte* /* System.String */ assemblyString, void** /* System.Exception */ __outException)
	{
		System.String assemblyStringConverted = InteropUtils.ToDotNetString(assemblyString);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.ReflectionOnlyLoad(assemblyStringConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ReflectionOnlyLoadFrom")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Assembly_ReflectionOnlyLoadFrom(byte* /* System.String */ assemblyFile, void** /* System.Exception */ __outException)
	{
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
	
	    try {
			System.Reflection.Assembly __returnValue = System.Reflection.Assembly.ReflectionOnlyLoadFrom(assemblyFileConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_CodeBase_Get")]
	internal static byte* /* System.String */ System_Reflection_Assembly_CodeBase_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CodeBase;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_EntryPoint_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_Assembly_EntryPoint_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.EntryPoint;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_FullName_Get")]
	internal static byte* /* System.String */ System_Reflection_Assembly_FullName_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ImageRuntimeVersion_Get")]
	internal static byte* /* System.String */ System_Reflection_Assembly_ImageRuntimeVersion_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ImageRuntimeVersion;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_IsDynamic_Get")]
	internal static byte /* System.Boolean */ System_Reflection_Assembly_IsDynamic_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDynamic;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Location_Get")]
	internal static byte* /* System.String */ System_Reflection_Assembly_Location_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Location;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ReflectionOnly_Get")]
	internal static byte /* System.Boolean */ System_Reflection_Assembly_ReflectionOnly_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.ReflectionOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_IsCollectible_Get")]
	internal static byte /* System.Boolean */ System_Reflection_Assembly_IsCollectible_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCollectible;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_IsFullyTrusted_Get")]
	internal static byte /* System.Boolean */ System_Reflection_Assembly_IsFullyTrusted_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFullyTrusted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_EscapedCodeBase_Get")]
	internal static byte* /* System.String */ System_Reflection_Assembly_EscapedCodeBase_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.EscapedCodeBase;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ManifestModule_Get")]
	internal static void* /* System.Reflection.Module */ System_Reflection_Assembly_ManifestModule_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Reflection.Module __returnValue = __selfConverted.ManifestModule;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_GlobalAssemblyCache_Get")]
	internal static byte /* System.Boolean */ System_Reflection_Assembly_GlobalAssemblyCache_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.GlobalAssemblyCache;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_HostContext_Get")]
	internal static long /* System.Int64 */ System_Reflection_Assembly_HostContext_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.HostContext;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_SecurityRuleSet_Get")]
	internal static System.Security.SecurityRuleSet /* System.Security.SecurityRuleSet */ System_Reflection_Assembly_SecurityRuleSet_Get(void* /* System.Reflection.Assembly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
	    try {
			System.Security.SecurityRuleSet __returnValue = __selfConverted.SecurityRuleSet;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Security.SecurityRuleSet);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ModuleResolve_Add")]
	internal static void /* System.Void */ System_Reflection_Assembly_ModuleResolve_Add(void* /* System.Reflection.Assembly */ __self, void* /* System.Reflection.ModuleResolveEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
		__selfConverted.ModuleResolve += InteropUtils.GetInstance<System_Reflection_ModuleResolveEventHandler>(__value)?.Trampoline;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_ModuleResolve_Remove")]
	internal static void /* System.Void */ System_Reflection_Assembly_ModuleResolve_Remove(void* /* System.Reflection.Assembly */ __self, void* /* System.Reflection.ModuleResolveEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Assembly __selfConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__self);
	
	
		__selfConverted.ModuleResolve -= InteropUtils.GetInstance<System_Reflection_ModuleResolveEventHandler>(__value)?.Trampoline;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_Assembly_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.Assembly);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Assembly_Destroy")]
	internal static void /* System.Void */ System_Reflection_Assembly_Destroy(void* /* System.Reflection.Assembly */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_AssemblyName
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Clone")]
	internal static void* /* System.Object */ System_Reflection_AssemblyName_Clone(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_GetAssemblyName")]
	internal static void* /* System.Reflection.AssemblyName */ System_Reflection_AssemblyName_GetAssemblyName(byte* /* System.String */ assemblyFile, void** /* System.Exception */ __outException)
	{
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
	
	    try {
			System.Reflection.AssemblyName __returnValue = System.Reflection.AssemblyName.GetAssemblyName(assemblyFileConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_GetPublicKey")]
	internal static void* /* System.Byte[] */ System_Reflection_AssemblyName_GetPublicKey(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Byte[] __returnValue = __selfConverted.GetPublicKey();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_SetPublicKey")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_SetPublicKey(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Byte[] */ publicKey, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
		System.Byte[] publicKeyConverted = InteropUtils.GetInstance<System.Byte[]>(publicKey);
	
	    try {
			__selfConverted.SetPublicKey(publicKeyConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_GetPublicKeyToken")]
	internal static void* /* System.Byte[] */ System_Reflection_AssemblyName_GetPublicKeyToken(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Byte[] __returnValue = __selfConverted.GetPublicKeyToken();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_SetPublicKeyToken")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_SetPublicKeyToken(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Byte[] */ publicKeyToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
		System.Byte[] publicKeyTokenConverted = InteropUtils.GetInstance<System.Byte[]>(publicKeyToken);
	
	    try {
			__selfConverted.SetPublicKeyToken(publicKeyTokenConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ToString")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_ToString(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_GetObjectData")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_GetObjectData(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_OnDeserialization")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_OnDeserialization(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Object */ sender, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
		System.Object senderConverted = InteropUtils.GetInstance<System.Object>(sender);
	
	    try {
			__selfConverted.OnDeserialization(senderConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ReferenceMatchesDefinition")]
	internal static byte /* System.Boolean */ System_Reflection_AssemblyName_ReferenceMatchesDefinition(void* /* System.Reflection.AssemblyName */ reference, void* /* System.Reflection.AssemblyName */ definition, void** /* System.Exception */ __outException)
	{
		System.Reflection.AssemblyName referenceConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(reference);
		System.Reflection.AssemblyName definitionConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(definition);
	
	    try {
			System.Boolean __returnValue = System.Reflection.AssemblyName.ReferenceMatchesDefinition(referenceConverted, definitionConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Create")]
	internal static void* /* System.Reflection.AssemblyName */ System_Reflection_AssemblyName_Create(byte* /* System.String */ assemblyName, void** /* System.Exception */ __outException)
	{
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
	
	    try {
			System.Reflection.AssemblyName __returnValue = new System.Reflection.AssemblyName(assemblyNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Create_1")]
	internal static void* /* System.Reflection.AssemblyName */ System_Reflection_AssemblyName_Create_1(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.AssemblyName __returnValue = new System.Reflection.AssemblyName();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Name_Get")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_Name_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Name_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_Name_Set(void* /* System.Reflection.AssemblyName */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.Name = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Version_Get")]
	internal static void* /* System.Version */ System_Reflection_AssemblyName_Version_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Version __returnValue = __selfConverted.Version;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Version_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_Version_Set(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Version */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.Version = InteropUtils.GetInstance<System.Version>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CultureInfo_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Reflection_AssemblyName_CultureInfo_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Globalization.CultureInfo __returnValue = __selfConverted.CultureInfo;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CultureInfo_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_CultureInfo_Set(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.CultureInfo = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CultureName_Get")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_CultureName_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CultureName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CultureName_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_CultureName_Set(void* /* System.Reflection.AssemblyName */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.CultureName = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CodeBase_Get")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_CodeBase_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CodeBase;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_CodeBase_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_CodeBase_Set(void* /* System.Reflection.AssemblyName */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.CodeBase = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_EscapedCodeBase_Get")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_EscapedCodeBase_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.EscapedCodeBase;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ProcessorArchitecture_Get")]
	internal static System.Reflection.ProcessorArchitecture /* System.Reflection.ProcessorArchitecture */ System_Reflection_AssemblyName_ProcessorArchitecture_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Reflection.ProcessorArchitecture __returnValue = __selfConverted.ProcessorArchitecture;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.ProcessorArchitecture);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ProcessorArchitecture_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_ProcessorArchitecture_Set(void* /* System.Reflection.AssemblyName */ __self, System.Reflection.ProcessorArchitecture /* System.Reflection.ProcessorArchitecture */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.ProcessorArchitecture = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ContentType_Get")]
	internal static System.Reflection.AssemblyContentType /* System.Reflection.AssemblyContentType */ System_Reflection_AssemblyName_ContentType_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Reflection.AssemblyContentType __returnValue = __selfConverted.ContentType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.AssemblyContentType);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_ContentType_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_ContentType_Set(void* /* System.Reflection.AssemblyName */ __self, System.Reflection.AssemblyContentType /* System.Reflection.AssemblyContentType */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.ContentType = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Flags_Get")]
	internal static System.Reflection.AssemblyNameFlags /* System.Reflection.AssemblyNameFlags */ System_Reflection_AssemblyName_Flags_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Reflection.AssemblyNameFlags __returnValue = __selfConverted.Flags;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.AssemblyNameFlags);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Flags_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_Flags_Set(void* /* System.Reflection.AssemblyName */ __self, System.Reflection.AssemblyNameFlags /* System.Reflection.AssemblyNameFlags */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.Flags = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_HashAlgorithm_Get")]
	internal static System.Configuration.Assemblies.AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */ System_Reflection_AssemblyName_HashAlgorithm_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Configuration.Assemblies.AssemblyHashAlgorithm __returnValue = __selfConverted.HashAlgorithm;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Configuration.Assemblies.AssemblyHashAlgorithm);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_HashAlgorithm_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_HashAlgorithm_Set(void* /* System.Reflection.AssemblyName */ __self, System.Configuration.Assemblies.AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.HashAlgorithm = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_VersionCompatibility_Get")]
	internal static System.Configuration.Assemblies.AssemblyVersionCompatibility /* System.Configuration.Assemblies.AssemblyVersionCompatibility */ System_Reflection_AssemblyName_VersionCompatibility_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Configuration.Assemblies.AssemblyVersionCompatibility __returnValue = __selfConverted.VersionCompatibility;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Configuration.Assemblies.AssemblyVersionCompatibility);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_VersionCompatibility_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_VersionCompatibility_Set(void* /* System.Reflection.AssemblyName */ __self, System.Configuration.Assemblies.AssemblyVersionCompatibility /* System.Configuration.Assemblies.AssemblyVersionCompatibility */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.VersionCompatibility = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_KeyPair_Get")]
	internal static void* /* System.Reflection.StrongNameKeyPair */ System_Reflection_AssemblyName_KeyPair_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.Reflection.StrongNameKeyPair __returnValue = __selfConverted.KeyPair;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_KeyPair_Set")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_KeyPair_Set(void* /* System.Reflection.AssemblyName */ __self, void* /* System.Reflection.StrongNameKeyPair */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			__selfConverted.KeyPair = InteropUtils.GetInstance<System.Reflection.StrongNameKeyPair>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_FullName_Get")]
	internal static byte* /* System.String */ System_Reflection_AssemblyName_FullName_Get(void* /* System.Reflection.AssemblyName */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.AssemblyName __selfConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_AssemblyName_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.AssemblyName);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyName_Destroy")]
	internal static void /* System.Void */ System_Reflection_AssemblyName_Destroy(void* /* System.Reflection.AssemblyName */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Version
{
	[UnmanagedCallersOnly(EntryPoint = "System_Version_Clone")]
	internal static void* /* System.Object */ System_Version_Clone(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_CompareTo")]
	internal static int /* System.Int32 */ System_Version_CompareTo(void* /* System.Version */ __self, void* /* System.Object */ version, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
		System.Object versionConverted = InteropUtils.GetInstance<System.Object>(version);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(versionConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_CompareTo_1")]
	internal static int /* System.Int32 */ System_Version_CompareTo_1(void* /* System.Version */ __self, void* /* System.Version */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
		System.Version valueConverted = InteropUtils.GetInstance<System.Version>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Equals")]
	internal static byte /* System.Boolean */ System_Version_Equals(void* /* System.Version */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Equals_1")]
	internal static byte /* System.Boolean */ System_Version_Equals_1(void* /* System.Version */ __self, void* /* System.Version */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
		System.Version objConverted = InteropUtils.GetInstance<System.Version>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_GetHashCode")]
	internal static int /* System.Int32 */ System_Version_GetHashCode(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_ToString")]
	internal static byte* /* System.String */ System_Version_ToString(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_ToString_1")]
	internal static byte* /* System.String */ System_Version_ToString_1(void* /* System.Version */ __self, int /* System.Int32 */ fieldCount, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString(fieldCount);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Parse")]
	internal static void* /* System.Version */ System_Version_Parse(byte* /* System.String */ input, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
	
	    try {
			System.Version __returnValue = System.Version.Parse(inputConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_TryParse")]
	internal static byte /* System.Boolean */ System_Version_TryParse(byte* /* System.String */ input, void** /* System.Version */ result, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.Version resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Version.TryParse(inputConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Create")]
	internal static void* /* System.Version */ System_Version_Create(int /* System.Int32 */ major, int /* System.Int32 */ minor, int /* System.Int32 */ build, int /* System.Int32 */ revision, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Version __returnValue = new System.Version(major, minor, build, revision);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Create_1")]
	internal static void* /* System.Version */ System_Version_Create_1(int /* System.Int32 */ major, int /* System.Int32 */ minor, int /* System.Int32 */ build, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Version __returnValue = new System.Version(major, minor, build);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Create_2")]
	internal static void* /* System.Version */ System_Version_Create_2(int /* System.Int32 */ major, int /* System.Int32 */ minor, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Version __returnValue = new System.Version(major, minor);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Create_3")]
	internal static void* /* System.Version */ System_Version_Create_3(byte* /* System.String */ version, void** /* System.Exception */ __outException)
	{
		System.String versionConverted = InteropUtils.ToDotNetString(version);
	
	    try {
			System.Version __returnValue = new System.Version(versionConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Create_4")]
	internal static void* /* System.Version */ System_Version_Create_4(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Version __returnValue = new System.Version();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Major_Get")]
	internal static int /* System.Int32 */ System_Version_Major_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Major;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Minor_Get")]
	internal static int /* System.Int32 */ System_Version_Minor_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Minor;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Build_Get")]
	internal static int /* System.Int32 */ System_Version_Build_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Build;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Revision_Get")]
	internal static int /* System.Int32 */ System_Version_Revision_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Revision;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_MajorRevision_Get")]
	internal static short /* System.Int16 */ System_Version_MajorRevision_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int16 __returnValue = __selfConverted.MajorRevision;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_MinorRevision_Get")]
	internal static short /* System.Int16 */ System_Version_MinorRevision_Get(void* /* System.Version */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Version __selfConverted = InteropUtils.GetInstance<System.Version>(__self);
	
	
	    try {
			System.Int16 __returnValue = __selfConverted.MinorRevision;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_TypeOf")]
	internal static void* /* System.Type */ System_Version_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Version);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Version_Destroy")]
	internal static void /* System.Void */ System_Version_Destroy(void* /* System.Version */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.

internal unsafe class System_Reflection_ProcessorArchitecture
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ProcessorArchitecture_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_ProcessorArchitecture_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.ProcessorArchitecture);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Reflection_AssemblyContentType
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyContentType_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_AssemblyContentType_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.AssemblyContentType);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}





// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
internal unsafe class System_Reflection_AssemblyNameFlags
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_AssemblyNameFlags_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_AssemblyNameFlags_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.AssemblyNameFlags);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Configuration_Assemblies_AssemblyHashAlgorithm
{
	[UnmanagedCallersOnly(EntryPoint = "System_Configuration_Assemblies_AssemblyHashAlgorithm_TypeOf")]
	internal static void* /* System.Type */ System_Configuration_Assemblies_AssemblyHashAlgorithm_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Configuration.Assemblies.AssemblyHashAlgorithm);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Configuration_Assemblies_AssemblyVersionCompatibility
{
	[UnmanagedCallersOnly(EntryPoint = "System_Configuration_Assemblies_AssemblyVersionCompatibility_TypeOf")]
	internal static void* /* System.Type */ System_Configuration_Assemblies_AssemblyVersionCompatibility_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Configuration.Assemblies.AssemblyVersionCompatibility);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Reflection_StrongNameKeyPair
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_StrongNameKeyPair_Create")]
	internal static void* /* System.Reflection.StrongNameKeyPair */ System_Reflection_StrongNameKeyPair_Create(void* /* System.IO.FileStream */ keyPairFile, void** /* System.Exception */ __outException)
	{
		System.IO.FileStream keyPairFileConverted = InteropUtils.GetInstance<System.IO.FileStream>(keyPairFile);
	
	    try {
			System.Reflection.StrongNameKeyPair __returnValue = new System.Reflection.StrongNameKeyPair(keyPairFileConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_StrongNameKeyPair_Create_1")]
	internal static void* /* System.Reflection.StrongNameKeyPair */ System_Reflection_StrongNameKeyPair_Create_1(void* /* System.Byte[] */ keyPairArray, void** /* System.Exception */ __outException)
	{
		System.Byte[] keyPairArrayConverted = InteropUtils.GetInstance<System.Byte[]>(keyPairArray);
	
	    try {
			System.Reflection.StrongNameKeyPair __returnValue = new System.Reflection.StrongNameKeyPair(keyPairArrayConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_StrongNameKeyPair_Create_2")]
	internal static void* /* System.Reflection.StrongNameKeyPair */ System_Reflection_StrongNameKeyPair_Create_2(byte* /* System.String */ keyPairContainer, void** /* System.Exception */ __outException)
	{
		System.String keyPairContainerConverted = InteropUtils.ToDotNetString(keyPairContainer);
	
	    try {
			System.Reflection.StrongNameKeyPair __returnValue = new System.Reflection.StrongNameKeyPair(keyPairContainerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_StrongNameKeyPair_PublicKey_Get")]
	internal static void* /* System.Byte[] */ System_Reflection_StrongNameKeyPair_PublicKey_Get(void* /* System.Reflection.StrongNameKeyPair */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.StrongNameKeyPair __selfConverted = InteropUtils.GetInstance<System.Reflection.StrongNameKeyPair>(__self);
	
	
	    try {
			System.Byte[] __returnValue = __selfConverted.PublicKey;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_StrongNameKeyPair_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_StrongNameKeyPair_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.StrongNameKeyPair);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_StrongNameKeyPair_Destroy")]
	internal static void /* System.Void */ System_Reflection_StrongNameKeyPair_Destroy(void* /* System.Reflection.StrongNameKeyPair */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_FileStream
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Lock")]
	internal static void /* System.Void */ System_IO_FileStream_Lock(void* /* System.IO.FileStream */ __self, long /* System.Int64 */ position, long /* System.Int64 */ length, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.Lock(position, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Unlock")]
	internal static void /* System.Void */ System_IO_FileStream_Unlock(void* /* System.IO.FileStream */ __self, long /* System.Int64 */ position, long /* System.Int64 */ length, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.Unlock(position, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_FlushAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_FileStream_FlushAsync(void* /* System.IO.FileStream */ __self, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.FlushAsync(cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Read")]
	internal static int /* System.Int32 */ System_IO_FileStream_Read(void* /* System.IO.FileStream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Read(bufferConverted, offset, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Write")]
	internal static void /* System.Void */ System_IO_FileStream_Write(void* /* System.IO.FileStream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
	
	    try {
			__selfConverted.Write(bufferConverted, offset, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_WriteAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_FileStream_WriteAsync(void* /* System.IO.FileStream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(bufferConverted, offset, count, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Flush_1")]
	internal static void /* System.Void */ System_IO_FileStream_Flush_1(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.Flush();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Flush_2")]
	internal static void /* System.Void */ System_IO_FileStream_Flush_2(void* /* System.IO.FileStream */ __self, byte /* System.Boolean */ flushToDisk, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.Boolean flushToDiskConverted = flushToDisk.ToBool();
	
	    try {
			__selfConverted.Flush(flushToDiskConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_SetLength")]
	internal static void /* System.Void */ System_IO_FileStream_SetLength(void* /* System.IO.FileStream */ __self, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.SetLength(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_ReadByte")]
	internal static int /* System.Int32 */ System_IO_FileStream_ReadByte(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ReadByte();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_WriteByte")]
	internal static void /* System.Void */ System_IO_FileStream_WriteByte(void* /* System.IO.FileStream */ __self, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.WriteByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_DisposeAsync")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_IO_FileStream_DisposeAsync(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.DisposeAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_CopyTo")]
	internal static void /* System.Void */ System_IO_FileStream_CopyTo(void* /* System.IO.FileStream */ __self, void* /* System.IO.Stream */ destination, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
	
	    try {
			__selfConverted.CopyTo(destinationConverted, bufferSize);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_CopyToAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_FileStream_CopyToAsync(void* /* System.IO.FileStream */ __self, void* /* System.IO.Stream */ destination, int /* System.Int32 */ bufferSize, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CopyToAsync(destinationConverted, bufferSize, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_BeginRead")]
	internal static void* /* System.IAsyncResult */ System_IO_FileStream_BeginRead(void* /* System.IO.FileStream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void* /* System.AsyncCallback */ callback, void* /* System.Object */ state, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
		System.AsyncCallback callbackConverted = InteropUtils.GetInstance<System_AsyncCallback>(callback)?.Trampoline;
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
	
	    try {
			System.IAsyncResult __returnValue = __selfConverted.BeginRead(bufferConverted, offset, count, callbackConverted, stateConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_EndRead")]
	internal static int /* System.Int32 */ System_IO_FileStream_EndRead(void* /* System.IO.FileStream */ __self, void* /* System.IAsyncResult */ asyncResult, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.IAsyncResult asyncResultConverted = InteropUtils.GetInstance<System.IAsyncResult>(asyncResult);
	
	    try {
			System.Int32 __returnValue = __selfConverted.EndRead(asyncResultConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_BeginWrite")]
	internal static void* /* System.IAsyncResult */ System_IO_FileStream_BeginWrite(void* /* System.IO.FileStream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void* /* System.AsyncCallback */ callback, void* /* System.Object */ state, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
		System.AsyncCallback callbackConverted = InteropUtils.GetInstance<System_AsyncCallback>(callback)?.Trampoline;
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
	
	    try {
			System.IAsyncResult __returnValue = __selfConverted.BeginWrite(bufferConverted, offset, count, callbackConverted, stateConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_EndWrite")]
	internal static void /* System.Void */ System_IO_FileStream_EndWrite(void* /* System.IO.FileStream */ __self, void* /* System.IAsyncResult */ asyncResult, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
		System.IAsyncResult asyncResultConverted = InteropUtils.GetInstance<System.IAsyncResult>(asyncResult);
	
	    try {
			__selfConverted.EndWrite(asyncResultConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Seek")]
	internal static long /* System.Int64 */ System_IO_FileStream_Seek(void* /* System.IO.FileStream */ __self, long /* System.Int64 */ offset, System.IO.SeekOrigin /* System.IO.SeekOrigin */ origin, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Seek(offset, origin);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create(nint /* System.IntPtr */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handle, access);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_1")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_1(nint /* System.IntPtr */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, byte /* System.Boolean */ ownsHandle, void** /* System.Exception */ __outException)
	{
		System.Boolean ownsHandleConverted = ownsHandle.ToBool();
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handle, access, ownsHandleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_2")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_2(nint /* System.IntPtr */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, byte /* System.Boolean */ ownsHandle, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		System.Boolean ownsHandleConverted = ownsHandle.ToBool();
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handle, access, ownsHandleConverted, bufferSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_3")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_3(nint /* System.IntPtr */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, byte /* System.Boolean */ ownsHandle, int /* System.Int32 */ bufferSize, byte /* System.Boolean */ isAsync, void** /* System.Exception */ __outException)
	{
		System.Boolean ownsHandleConverted = ownsHandle.ToBool();
		System.Boolean isAsyncConverted = isAsync.ToBool();
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handle, access, ownsHandleConverted, bufferSize, isAsyncConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_4")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_4(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle handleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(handle);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handleConverted, access);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_5")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_5(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle handleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(handle);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handleConverted, access, bufferSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_6")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_6(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ handle, System.IO.FileAccess /* System.IO.FileAccess */ access, int /* System.Int32 */ bufferSize, byte /* System.Boolean */ isAsync, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle handleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(handle);
		System.Boolean isAsyncConverted = isAsync.ToBool();
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(handleConverted, access, bufferSize, isAsyncConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_7")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_7(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_8")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_8(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode, access);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_9")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_9(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode, access, share);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_10")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_10(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode, access, share, bufferSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_11")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_11(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, int /* System.Int32 */ bufferSize, byte /* System.Boolean */ useAsync, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Boolean useAsyncConverted = useAsync.ToBool();
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode, access, share, bufferSize, useAsyncConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_12")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_12(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, int /* System.Int32 */ bufferSize, System.IO.FileOptions /* System.IO.FileOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, mode, access, share, bufferSize, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Create_13")]
	internal static void* /* System.IO.FileStream */ System_IO_FileStream_Create_13(byte* /* System.String */ path, void* /* System.IO.FileStreamOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.IO.FileStreamOptions optionsConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(options);
	
	    try {
			System.IO.FileStream __returnValue = new System.IO.FileStream(pathConverted, optionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Handle_Get")]
	internal static nint /* System.IntPtr */ System_IO_FileStream_Handle_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.Handle;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_CanRead_Get")]
	internal static byte /* System.Boolean */ System_IO_FileStream_CanRead_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanRead;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_CanWrite_Get")]
	internal static byte /* System.Boolean */ System_IO_FileStream_CanWrite_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanWrite;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_SafeFileHandle_Get")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ System_IO_FileStream_SafeFileHandle_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			Microsoft.Win32.SafeHandles.SafeFileHandle __returnValue = __selfConverted.SafeFileHandle;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Name_Get")]
	internal static byte* /* System.String */ System_IO_FileStream_Name_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_IsAsync_Get")]
	internal static byte /* System.Boolean */ System_IO_FileStream_IsAsync_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAsync;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Length_Get")]
	internal static long /* System.Int64 */ System_IO_FileStream_Length_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Position_Get")]
	internal static long /* System.Int64 */ System_IO_FileStream_Position_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Position;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Position_Set")]
	internal static void /* System.Void */ System_IO_FileStream_Position_Set(void* /* System.IO.FileStream */ __self, long /* System.Int64 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			__selfConverted.Position = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_CanSeek_Get")]
	internal static byte /* System.Boolean */ System_IO_FileStream_CanSeek_Get(void* /* System.IO.FileStream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStream __selfConverted = InteropUtils.GetInstance<System.IO.FileStream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanSeek;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_TypeOf")]
	internal static void* /* System.Type */ System_IO_FileStream_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.FileStream);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStream_Destroy")]
	internal static void /* System.Void */ System_IO_FileStream_Destroy(void* /* System.IO.FileStream */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_Stream
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyTo")]
	internal static void /* System.Void */ System_IO_Stream_CopyTo(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
	
	    try {
			__selfConverted.CopyTo(destinationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyTo_1")]
	internal static void /* System.Void */ System_IO_Stream_CopyTo_1(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
	
	    try {
			__selfConverted.CopyTo(destinationConverted, bufferSize);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyToAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_CopyToAsync(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CopyToAsync(destinationConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyToAsync_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_CopyToAsync_1(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CopyToAsync(destinationConverted, bufferSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyToAsync_2")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_CopyToAsync_2(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CopyToAsync(destinationConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CopyToAsync_3")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_CopyToAsync_3(void* /* System.IO.Stream */ __self, void* /* System.IO.Stream */ destination, int /* System.Int32 */ bufferSize, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IO.Stream destinationConverted = InteropUtils.GetInstance<System.IO.Stream>(destination);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CopyToAsync(destinationConverted, bufferSize, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Dispose")]
	internal static void /* System.Void */ System_IO_Stream_Dispose(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Close")]
	internal static void /* System.Void */ System_IO_Stream_Close(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.Close();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_DisposeAsync")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_IO_Stream_DisposeAsync(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.DisposeAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Flush")]
	internal static void /* System.Void */ System_IO_Stream_Flush(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.Flush();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_FlushAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_FlushAsync(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.FlushAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_FlushAsync_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_FlushAsync_1(void* /* System.IO.Stream */ __self, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.FlushAsync(cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_BeginRead")]
	internal static void* /* System.IAsyncResult */ System_IO_Stream_BeginRead(void* /* System.IO.Stream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void* /* System.AsyncCallback */ callback, void* /* System.Object */ state, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
		System.AsyncCallback callbackConverted = InteropUtils.GetInstance<System_AsyncCallback>(callback)?.Trampoline;
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
	
	    try {
			System.IAsyncResult __returnValue = __selfConverted.BeginRead(bufferConverted, offset, count, callbackConverted, stateConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_EndRead")]
	internal static int /* System.Int32 */ System_IO_Stream_EndRead(void* /* System.IO.Stream */ __self, void* /* System.IAsyncResult */ asyncResult, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IAsyncResult asyncResultConverted = InteropUtils.GetInstance<System.IAsyncResult>(asyncResult);
	
	    try {
			System.Int32 __returnValue = __selfConverted.EndRead(asyncResultConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_ReadExactlyAsync")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_IO_Stream_ReadExactlyAsync(void* /* System.IO.Stream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.ReadExactlyAsync(bufferConverted, offset, count, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_BeginWrite")]
	internal static void* /* System.IAsyncResult */ System_IO_Stream_BeginWrite(void* /* System.IO.Stream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void* /* System.AsyncCallback */ callback, void* /* System.Object */ state, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
		System.AsyncCallback callbackConverted = InteropUtils.GetInstance<System_AsyncCallback>(callback)?.Trampoline;
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
	
	    try {
			System.IAsyncResult __returnValue = __selfConverted.BeginWrite(bufferConverted, offset, count, callbackConverted, stateConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_EndWrite")]
	internal static void /* System.Void */ System_IO_Stream_EndWrite(void* /* System.IO.Stream */ __self, void* /* System.IAsyncResult */ asyncResult, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.IAsyncResult asyncResultConverted = InteropUtils.GetInstance<System.IAsyncResult>(asyncResult);
	
	    try {
			__selfConverted.EndWrite(asyncResultConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_WriteAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_WriteAsync(void* /* System.IO.Stream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(bufferConverted, offset, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_WriteAsync_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_Stream_WriteAsync_1(void* /* System.IO.Stream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(bufferConverted, offset, count, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Seek")]
	internal static long /* System.Int64 */ System_IO_Stream_Seek(void* /* System.IO.Stream */ __self, long /* System.Int64 */ offset, System.IO.SeekOrigin /* System.IO.SeekOrigin */ origin, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Seek(offset, origin);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_SetLength")]
	internal static void /* System.Void */ System_IO_Stream_SetLength(void* /* System.IO.Stream */ __self, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.SetLength(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Read_1")]
	internal static int /* System.Int32 */ System_IO_Stream_Read_1(void* /* System.IO.Stream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Read(bufferConverted, offset, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_ReadByte")]
	internal static int /* System.Int32 */ System_IO_Stream_ReadByte(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ReadByte();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_ReadExactly_1")]
	internal static void /* System.Void */ System_IO_Stream_ReadExactly_1(void* /* System.IO.Stream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
	
	    try {
			__selfConverted.ReadExactly(bufferConverted, offset, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Write_1")]
	internal static void /* System.Void */ System_IO_Stream_Write_1(void* /* System.IO.Stream */ __self, void* /* System.Byte[] */ buffer, int /* System.Int32 */ offset, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
	
	    try {
			__selfConverted.Write(bufferConverted, offset, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_WriteByte")]
	internal static void /* System.Void */ System_IO_Stream_WriteByte(void* /* System.IO.Stream */ __self, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.WriteByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Synchronized")]
	internal static void* /* System.IO.Stream */ System_IO_Stream_Synchronized(void* /* System.IO.Stream */ stream, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
	
	    try {
			System.IO.Stream __returnValue = System.IO.Stream.Synchronized(streamConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CanRead_Get")]
	internal static byte /* System.Boolean */ System_IO_Stream_CanRead_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanRead;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CanWrite_Get")]
	internal static byte /* System.Boolean */ System_IO_Stream_CanWrite_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanWrite;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CanSeek_Get")]
	internal static byte /* System.Boolean */ System_IO_Stream_CanSeek_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanSeek;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_CanTimeout_Get")]
	internal static byte /* System.Boolean */ System_IO_Stream_CanTimeout_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanTimeout;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Length_Get")]
	internal static long /* System.Int64 */ System_IO_Stream_Length_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Position_Get")]
	internal static long /* System.Int64 */ System_IO_Stream_Position_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Position;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Position_Set")]
	internal static void /* System.Void */ System_IO_Stream_Position_Set(void* /* System.IO.Stream */ __self, long /* System.Int64 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.Position = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_ReadTimeout_Get")]
	internal static int /* System.Int32 */ System_IO_Stream_ReadTimeout_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ReadTimeout;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_ReadTimeout_Set")]
	internal static void /* System.Void */ System_IO_Stream_ReadTimeout_Set(void* /* System.IO.Stream */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.ReadTimeout = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_WriteTimeout_Get")]
	internal static int /* System.Int32 */ System_IO_Stream_WriteTimeout_Get(void* /* System.IO.Stream */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.WriteTimeout;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_WriteTimeout_Set")]
	internal static void /* System.Void */ System_IO_Stream_WriteTimeout_Set(void* /* System.IO.Stream */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.Stream __selfConverted = InteropUtils.GetInstance<System.IO.Stream>(__self);
	
	
	    try {
			__selfConverted.WriteTimeout = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Null_Get")]
	internal static void* /* System.IO.Stream */ System_IO_Stream_Null_Get()
	{
	
		System.IO.Stream __returnValue = System.IO.Stream.Null;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_TypeOf")]
	internal static void* /* System.Type */ System_IO_Stream_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.Stream);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Stream_Destroy")]
	internal static void /* System.Void */ System_IO_Stream_Destroy(void* /* System.IO.Stream */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_MarshalByRefObject
{
	[UnmanagedCallersOnly(EntryPoint = "System_MarshalByRefObject_GetLifetimeService")]
	internal static void* /* System.Object */ System_MarshalByRefObject_GetLifetimeService(void* /* System.MarshalByRefObject */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.MarshalByRefObject __selfConverted = InteropUtils.GetInstance<System.MarshalByRefObject>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetLifetimeService();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_MarshalByRefObject_InitializeLifetimeService")]
	internal static void* /* System.Object */ System_MarshalByRefObject_InitializeLifetimeService(void* /* System.MarshalByRefObject */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.MarshalByRefObject __selfConverted = InteropUtils.GetInstance<System.MarshalByRefObject>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.InitializeLifetimeService();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_MarshalByRefObject_TypeOf")]
	internal static void* /* System.Type */ System_MarshalByRefObject_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.MarshalByRefObject);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_MarshalByRefObject_Destroy")]
	internal static void /* System.Void */ System_MarshalByRefObject_Destroy(void* /* System.MarshalByRefObject */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_Tasks_Task
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Start")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Start(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			__selfConverted.Start();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Start_1")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Start_1(void* /* System.Threading.Tasks.Task */ __self, void* /* System.Threading.Tasks.TaskScheduler */ scheduler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Threading.Tasks.TaskScheduler schedulerConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(scheduler);
	
	    try {
			__selfConverted.Start(schedulerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_RunSynchronously")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_RunSynchronously(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			__selfConverted.RunSynchronously();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_RunSynchronously_1")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_RunSynchronously_1(void* /* System.Threading.Tasks.Task */ __self, void* /* System.Threading.Tasks.TaskScheduler */ scheduler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Threading.Tasks.TaskScheduler schedulerConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(scheduler);
	
	    try {
			__selfConverted.RunSynchronously(schedulerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Dispose")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Dispose(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_GetAwaiter")]
	internal static void* /* System.Runtime.CompilerServices.TaskAwaiter */ System_Threading_Tasks_Task_GetAwaiter(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Runtime.CompilerServices.TaskAwaiter __returnValue = __selfConverted.GetAwaiter();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_ConfigureAwait")]
	internal static void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable */ System_Threading_Tasks_Task_ConfigureAwait(void* /* System.Threading.Tasks.Task */ __self, byte /* System.Boolean */ continueOnCapturedContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Boolean continueOnCapturedContextConverted = continueOnCapturedContext.ToBool();
	
	    try {
			System.Runtime.CompilerServices.ConfiguredTaskAwaitable __returnValue = __selfConverted.ConfigureAwait(continueOnCapturedContextConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Yield")]
	internal static void* /* System.Runtime.CompilerServices.YieldAwaitable */ System_Threading_Tasks_Task_Yield(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.CompilerServices.YieldAwaitable __returnValue = System.Threading.Tasks.Task.Yield();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Wait(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			__selfConverted.Wait();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait_1")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_Wait_1(void* /* System.Threading.Tasks.Task */ __self, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Wait(timeoutConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait_2")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_Wait_2(void* /* System.Threading.Tasks.Task */ __self, void* /* System.TimeSpan */ timeout, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Wait(timeoutConverted, cancellationTokenConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait_3")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Wait_3(void* /* System.Threading.Tasks.Task */ __self, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			__selfConverted.Wait(cancellationTokenConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait_4")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_Wait_4(void* /* System.Threading.Tasks.Task */ __self, int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Wait(millisecondsTimeout);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Wait_5")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_Wait_5(void* /* System.Threading.Tasks.Task */ __self, int /* System.Int32 */ millisecondsTimeout, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Wait(millisecondsTimeout, cancellationTokenConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_WaitAsync(void* /* System.Threading.Tasks.Task */ __self, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WaitAsync(cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAsync_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_WaitAsync_1(void* /* System.Threading.Tasks.Task */ __self, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WaitAsync(timeoutConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAsync_2")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_WaitAsync_2(void* /* System.Threading.Tasks.Task */ __self, void* /* System.TimeSpan */ timeout, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WaitAsync(timeoutConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAll")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_WaitAll(void* /* System.Threading.Tasks.Task[] */ tasks, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
	
	    try {
			System.Threading.Tasks.Task.WaitAll(tasksConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAll_1")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_WaitAll_1(void* /* System.Threading.Tasks.Task[] */ tasks, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Boolean __returnValue = System.Threading.Tasks.Task.WaitAll(tasksConverted, timeoutConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAll_2")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_WaitAll_2(void* /* System.Threading.Tasks.Task[] */ tasks, int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
	
	    try {
			System.Boolean __returnValue = System.Threading.Tasks.Task.WaitAll(tasksConverted, millisecondsTimeout);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAll_3")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_WaitAll_3(void* /* System.Threading.Tasks.Task[] */ tasks, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task.WaitAll(tasksConverted, cancellationTokenConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAll_4")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_WaitAll_4(void* /* System.Threading.Tasks.Task[] */ tasks, int /* System.Int32 */ millisecondsTimeout, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Boolean __returnValue = System.Threading.Tasks.Task.WaitAll(tasksConverted, millisecondsTimeout, cancellationTokenConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAny")]
	internal static int /* System.Int32 */ System_Threading_Tasks_Task_WaitAny(void* /* System.Threading.Tasks.Task[] */ tasks, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
	
	    try {
			System.Int32 __returnValue = System.Threading.Tasks.Task.WaitAny(tasksConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAny_1")]
	internal static int /* System.Int32 */ System_Threading_Tasks_Task_WaitAny_1(void* /* System.Threading.Tasks.Task[] */ tasks, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Int32 __returnValue = System.Threading.Tasks.Task.WaitAny(tasksConverted, timeoutConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAny_2")]
	internal static int /* System.Int32 */ System_Threading_Tasks_Task_WaitAny_2(void* /* System.Threading.Tasks.Task[] */ tasks, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Int32 __returnValue = System.Threading.Tasks.Task.WaitAny(tasksConverted, cancellationTokenConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAny_3")]
	internal static int /* System.Int32 */ System_Threading_Tasks_Task_WaitAny_3(void* /* System.Threading.Tasks.Task[] */ tasks, int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
	
	    try {
			System.Int32 __returnValue = System.Threading.Tasks.Task.WaitAny(tasksConverted, millisecondsTimeout);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WaitAny_4")]
	internal static int /* System.Int32 */ System_Threading_Tasks_Task_WaitAny_4(void* /* System.Threading.Tasks.Task[] */ tasks, int /* System.Int32 */ millisecondsTimeout, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Int32 __returnValue = System.Threading.Tasks.Task.WaitAny(tasksConverted, millisecondsTimeout, cancellationTokenConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_FromException")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_FromException(void* /* System.Exception */ exception, void** /* System.Exception */ __outException)
	{
		System.Exception exceptionConverted = InteropUtils.GetInstance<System.Exception>(exception);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.FromException(exceptionConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_FromCanceled")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_FromCanceled(void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.FromCanceled(cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Run_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Run_1(void* /* System.Action */ action, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System_Action>(action)?.Trampoline;
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Run(actionConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Run_2")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Run_2(void* /* System.Action */ action, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System_Action>(action)?.Trampoline;
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Run(actionConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Delay")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Delay(void* /* System.TimeSpan */ delay, void** /* System.Exception */ __outException)
	{
		System.TimeSpan delayConverted = InteropUtils.GetInstance<System.TimeSpan>(delay);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Delay(delayConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Delay_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Delay_1(void* /* System.TimeSpan */ delay, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.TimeSpan delayConverted = InteropUtils.GetInstance<System.TimeSpan>(delay);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Delay(delayConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Delay_2")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Delay_2(int /* System.Int32 */ millisecondsDelay, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Delay(millisecondsDelay);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Delay_3")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Delay_3(int /* System.Int32 */ millisecondsDelay, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.Delay(millisecondsDelay, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_WhenAll")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_WhenAll(void* /* System.Threading.Tasks.Task[] */ tasks, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task[] tasksConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task[]>(tasks);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.WhenAll(tasksConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Create")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Create(void* /* System.Action */ action, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System_Action>(action)?.Trampoline;
	
	    try {
			System.Threading.Tasks.Task __returnValue = new System.Threading.Tasks.Task(actionConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Create_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Create_1(void* /* System.Action */ action, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System_Action>(action)?.Trampoline;
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = new System.Threading.Tasks.Task(actionConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Create_2")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Create_2(void* /* System.Action */ action, System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System_Action>(action)?.Trampoline;
	
	    try {
			System.Threading.Tasks.Task __returnValue = new System.Threading.Tasks.Task(actionConverted, creationOptions);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Create_3")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_Create_3(void* /* System.Action */ action, void* /* System.Threading.CancellationToken */ cancellationToken, System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, void** /* System.Exception */ __outException)
	{
		System.Action actionConverted = InteropUtils.GetInstance<System_Action>(action)?.Trampoline;
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = new System.Threading.Tasks.Task(actionConverted, cancellationTokenConverted, creationOptions);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Id_Get")]
	internal static int /* System.Int32 */ System_Threading_Tasks_Task_Id_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Id;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Exception_Get")]
	internal static void* /* System.AggregateException */ System_Threading_Tasks_Task_Exception_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.AggregateException __returnValue = __selfConverted.Exception;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Status_Get")]
	internal static System.Threading.Tasks.TaskStatus /* System.Threading.Tasks.TaskStatus */ System_Threading_Tasks_Task_Status_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Threading.Tasks.TaskStatus __returnValue = __selfConverted.Status;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.Tasks.TaskStatus);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_IsCanceled_Get")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_IsCanceled_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCanceled;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_IsCompleted_Get")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_IsCompleted_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_IsCompletedSuccessfully_Get")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_IsCompletedSuccessfully_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompletedSuccessfully;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_CreationOptions_Get")]
	internal static System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ System_Threading_Tasks_Task_CreationOptions_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Threading.Tasks.TaskCreationOptions __returnValue = __selfConverted.CreationOptions;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.Tasks.TaskCreationOptions);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_AsyncState_Get")]
	internal static void* /* System.Object */ System_Threading_Tasks_Task_AsyncState_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.AsyncState;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Factory_Get")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_Task_Factory_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = System.Threading.Tasks.Task.Factory;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_CompletedTask_Get")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_Task_CompletedTask_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.Threading.Tasks.Task.CompletedTask;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_IsFaulted_Get")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_Task_IsFaulted_Get(void* /* System.Threading.Tasks.Task */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Task __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFaulted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Tasks_Task_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Tasks.Task);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Task_Destroy")]
	internal static void /* System.Void */ System_Threading_Tasks_Task_Destroy(void* /* System.Threading.Tasks.Task */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_Tasks_TaskScheduler
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_FromCurrentSynchronizationContext")]
	internal static void* /* System.Threading.Tasks.TaskScheduler */ System_Threading_Tasks_TaskScheduler_FromCurrentSynchronizationContext(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskScheduler __returnValue = System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_MaximumConcurrencyLevel_Get")]
	internal static int /* System.Int32 */ System_Threading_Tasks_TaskScheduler_MaximumConcurrencyLevel_Get(void* /* System.Threading.Tasks.TaskScheduler */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskScheduler __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MaximumConcurrencyLevel;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_Default_Get")]
	internal static void* /* System.Threading.Tasks.TaskScheduler */ System_Threading_Tasks_TaskScheduler_Default_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskScheduler __returnValue = System.Threading.Tasks.TaskScheduler.Default;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_Current_Get")]
	internal static void* /* System.Threading.Tasks.TaskScheduler */ System_Threading_Tasks_TaskScheduler_Current_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskScheduler __returnValue = System.Threading.Tasks.TaskScheduler.Current;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_Id_Get")]
	internal static int /* System.Int32 */ System_Threading_Tasks_TaskScheduler_Id_Get(void* /* System.Threading.Tasks.TaskScheduler */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskScheduler __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Id;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Tasks_TaskScheduler_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Tasks.TaskScheduler);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskScheduler_Destroy")]
	internal static void /* System.Void */ System_Threading_Tasks_TaskScheduler_Destroy(void* /* System.Threading.Tasks.TaskScheduler */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_AggregateException
{
	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_GetObjectData")]
	internal static void /* System.Void */ System_AggregateException_GetObjectData(void* /* System.AggregateException */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AggregateException __selfConverted = InteropUtils.GetInstance<System.AggregateException>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_GetBaseException")]
	internal static void* /* System.Exception */ System_AggregateException_GetBaseException(void* /* System.AggregateException */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AggregateException __selfConverted = InteropUtils.GetInstance<System.AggregateException>(__self);
	
	
	    try {
			System.Exception __returnValue = __selfConverted.GetBaseException();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Flatten")]
	internal static void* /* System.AggregateException */ System_AggregateException_Flatten(void* /* System.AggregateException */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AggregateException __selfConverted = InteropUtils.GetInstance<System.AggregateException>(__self);
	
	
	    try {
			System.AggregateException __returnValue = __selfConverted.Flatten();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_ToString")]
	internal static byte* /* System.String */ System_AggregateException_ToString(void* /* System.AggregateException */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AggregateException __selfConverted = InteropUtils.GetInstance<System.AggregateException>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Create")]
	internal static void* /* System.AggregateException */ System_AggregateException_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.AggregateException __returnValue = new System.AggregateException();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Create_1")]
	internal static void* /* System.AggregateException */ System_AggregateException_Create_1(byte* /* System.String */ message, void** /* System.Exception */ __outException)
	{
		System.String messageConverted = InteropUtils.ToDotNetString(message);
	
	    try {
			System.AggregateException __returnValue = new System.AggregateException(messageConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Create_2")]
	internal static void* /* System.AggregateException */ System_AggregateException_Create_2(byte* /* System.String */ message, void* /* System.Exception */ innerException, void** /* System.Exception */ __outException)
	{
		System.String messageConverted = InteropUtils.ToDotNetString(message);
		System.Exception innerExceptionConverted = InteropUtils.GetInstance<System.Exception>(innerException);
	
	    try {
			System.AggregateException __returnValue = new System.AggregateException(messageConverted, innerExceptionConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Create_3")]
	internal static void* /* System.AggregateException */ System_AggregateException_Create_3(void* /* System.Exception[] */ innerExceptions, void** /* System.Exception */ __outException)
	{
		System.Exception[] innerExceptionsConverted = InteropUtils.GetInstance<System.Exception[]>(innerExceptions);
	
	    try {
			System.AggregateException __returnValue = new System.AggregateException(innerExceptionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Create_4")]
	internal static void* /* System.AggregateException */ System_AggregateException_Create_4(byte* /* System.String */ message, void* /* System.Exception[] */ innerExceptions, void** /* System.Exception */ __outException)
	{
		System.String messageConverted = InteropUtils.ToDotNetString(message);
		System.Exception[] innerExceptionsConverted = InteropUtils.GetInstance<System.Exception[]>(innerExceptions);
	
	    try {
			System.AggregateException __returnValue = new System.AggregateException(messageConverted, innerExceptionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Message_Get")]
	internal static byte* /* System.String */ System_AggregateException_Message_Get(void* /* System.AggregateException */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AggregateException __selfConverted = InteropUtils.GetInstance<System.AggregateException>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Message;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_TypeOf")]
	internal static void* /* System.Type */ System_AggregateException_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.AggregateException);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AggregateException_Destroy")]
	internal static void /* System.Void */ System_AggregateException_Destroy(void* /* System.AggregateException */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Exception
{
	[UnmanagedCallersOnly(EntryPoint = "System_Exception_GetBaseException")]
	internal static void* /* System.Exception */ System_Exception_GetBaseException(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Exception __returnValue = __selfConverted.GetBaseException();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_GetObjectData")]
	internal static void /* System.Void */ System_Exception_GetObjectData(void* /* System.Exception */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_ToString")]
	internal static byte* /* System.String */ System_Exception_ToString(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_GetType")]
	internal static void* /* System.Type */ System_Exception_GetType(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Create")]
	internal static void* /* System.Exception */ System_Exception_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Exception __returnValue = new System.Exception();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Create_1")]
	internal static void* /* System.Exception */ System_Exception_Create_1(byte* /* System.String */ message, void** /* System.Exception */ __outException)
	{
		System.String messageConverted = InteropUtils.ToDotNetString(message);
	
	    try {
			System.Exception __returnValue = new System.Exception(messageConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Create_2")]
	internal static void* /* System.Exception */ System_Exception_Create_2(byte* /* System.String */ message, void* /* System.Exception */ innerException, void** /* System.Exception */ __outException)
	{
		System.String messageConverted = InteropUtils.ToDotNetString(message);
		System.Exception innerExceptionConverted = InteropUtils.GetInstance<System.Exception>(innerException);
	
	    try {
			System.Exception __returnValue = new System.Exception(messageConverted, innerExceptionConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_TargetSite_Get")]
	internal static void* /* System.Reflection.MethodBase */ System_Exception_TargetSite_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Reflection.MethodBase __returnValue = __selfConverted.TargetSite;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Message_Get")]
	internal static byte* /* System.String */ System_Exception_Message_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Message;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Data_Get")]
	internal static void* /* System.Collections.IDictionary */ System_Exception_Data_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Collections.IDictionary __returnValue = __selfConverted.Data;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_InnerException_Get")]
	internal static void* /* System.Exception */ System_Exception_InnerException_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Exception __returnValue = __selfConverted.InnerException;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_HelpLink_Get")]
	internal static byte* /* System.String */ System_Exception_HelpLink_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.HelpLink;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Exception_HelpLink_Set")]
	internal static void /* System.Void */ System_Exception_HelpLink_Set(void* /* System.Exception */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			__selfConverted.HelpLink = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Source_Get")]
	internal static byte* /* System.String */ System_Exception_Source_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Source;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Source_Set")]
	internal static void /* System.Void */ System_Exception_Source_Set(void* /* System.Exception */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			__selfConverted.Source = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_HResult_Get")]
	internal static int /* System.Int32 */ System_Exception_HResult_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.HResult;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Exception_HResult_Set")]
	internal static void /* System.Void */ System_Exception_HResult_Set(void* /* System.Exception */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			__selfConverted.HResult = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_StackTrace_Get")]
	internal static byte* /* System.String */ System_Exception_StackTrace_Get(void* /* System.Exception */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Exception __selfConverted = InteropUtils.GetInstance<System.Exception>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.StackTrace;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_TypeOf")]
	internal static void* /* System.Type */ System_Exception_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Exception);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Exception_Destroy")]
	internal static void /* System.Void */ System_Exception_Destroy(void* /* System.Exception */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_MethodBase
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetMethodFromHandle")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_MethodBase_GetMethodFromHandle(void* /* System.RuntimeMethodHandle */ handle, void** /* System.Exception */ __outException)
	{
		System.RuntimeMethodHandle handleConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(handle);
	
	    try {
			System.Reflection.MethodBase __returnValue = System.Reflection.MethodBase.GetMethodFromHandle(handleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetMethodFromHandle_1")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_MethodBase_GetMethodFromHandle_1(void* /* System.RuntimeMethodHandle */ handle, void* /* System.RuntimeTypeHandle */ declaringType, void** /* System.Exception */ __outException)
	{
		System.RuntimeMethodHandle handleConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(handle);
		System.RuntimeTypeHandle declaringTypeConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(declaringType);
	
	    try {
			System.Reflection.MethodBase __returnValue = System.Reflection.MethodBase.GetMethodFromHandle(handleConverted, declaringTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetCurrentMethod")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_MethodBase_GetCurrentMethod(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.MethodBase __returnValue = System.Reflection.MethodBase.GetCurrentMethod();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetParameters")]
	internal static void* /* System.Reflection.ParameterInfo[] */ System_Reflection_MethodBase_GetParameters(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.ParameterInfo[] __returnValue = __selfConverted.GetParameters();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetMethodImplementationFlags")]
	internal static System.Reflection.MethodImplAttributes /* System.Reflection.MethodImplAttributes */ System_Reflection_MethodBase_GetMethodImplementationFlags(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.MethodImplAttributes __returnValue = __selfConverted.GetMethodImplementationFlags();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MethodImplAttributes);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetMethodBody")]
	internal static void* /* System.Reflection.MethodBody */ System_Reflection_MethodBase_GetMethodBody(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.MethodBody __returnValue = __selfConverted.GetMethodBody();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetGenericArguments")]
	internal static void* /* System.Type[] */ System_Reflection_MethodBase_GetGenericArguments(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetGenericArguments();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_Invoke")]
	internal static void* /* System.Object */ System_Reflection_MethodBase_Invoke(void* /* System.Reflection.MethodBase */ __self, void* /* System.Object */ obj, void* /* System.Object[] */ parameters, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object[] parametersConverted = InteropUtils.GetInstance<System.Object[]>(parameters);
	
	    try {
			System.Object __returnValue = __selfConverted.Invoke(objConverted, parametersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_Invoke_1")]
	internal static void* /* System.Object */ System_Reflection_MethodBase_Invoke_1(void* /* System.Reflection.MethodBase */ __self, void* /* System.Object */ obj, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ invokeAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object[] */ parameters, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object[] parametersConverted = InteropUtils.GetInstance<System.Object[]>(parameters);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Object __returnValue = __selfConverted.Invoke(objConverted, invokeAttr, binderConverted, parametersConverted, cultureConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_Equals")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_Equals(void* /* System.Reflection.MethodBase */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_MethodBase_GetHashCode(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_Attributes_Get")]
	internal static System.Reflection.MethodAttributes /* System.Reflection.MethodAttributes */ System_Reflection_MethodBase_Attributes_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.MethodAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MethodAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_MethodImplementationFlags_Get")]
	internal static System.Reflection.MethodImplAttributes /* System.Reflection.MethodImplAttributes */ System_Reflection_MethodBase_MethodImplementationFlags_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.MethodImplAttributes __returnValue = __selfConverted.MethodImplementationFlags;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MethodImplAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_CallingConvention_Get")]
	internal static System.Reflection.CallingConventions /* System.Reflection.CallingConventions */ System_Reflection_MethodBase_CallingConvention_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Reflection.CallingConventions __returnValue = __selfConverted.CallingConvention;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.CallingConventions);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsAbstract_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsAbstract_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAbstract;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsConstructor_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsConstructor_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsConstructor;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsFinal_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsFinal_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFinal;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsHideBySig_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsHideBySig_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsHideBySig;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsSpecialName_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsSpecialName_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSpecialName;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsStatic_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsStatic_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsStatic;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsVirtual_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsVirtual_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsVirtual;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsAssembly_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsAssembly_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAssembly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsFamily_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsFamily_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamily;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsFamilyAndAssembly_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsFamilyAndAssembly_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamilyAndAssembly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsFamilyOrAssembly_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsFamilyOrAssembly_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamilyOrAssembly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsPrivate_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsPrivate_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPrivate;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsPublic_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsPublic_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPublic;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsConstructedGenericMethod_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsConstructedGenericMethod_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsConstructedGenericMethod;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsGenericMethod_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsGenericMethod_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericMethod;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsGenericMethodDefinition_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsGenericMethodDefinition_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsGenericMethodDefinition;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_ContainsGenericParameters_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_ContainsGenericParameters_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.ContainsGenericParameters;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_MethodHandle_Get")]
	internal static void* /* System.RuntimeMethodHandle */ System_Reflection_MethodBase_MethodHandle_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.RuntimeMethodHandle __returnValue = __selfConverted.MethodHandle;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsSecurityCritical_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsSecurityCritical_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityCritical;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsSecuritySafeCritical_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsSecuritySafeCritical_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecuritySafeCritical;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_IsSecurityTransparent_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBase_IsSecurityTransparent_Get(void* /* System.Reflection.MethodBase */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBase __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBase>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityTransparent;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_MethodBase_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.MethodBase);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBase_Destroy")]
	internal static void /* System.Void */ System_Reflection_MethodBase_Destroy(void* /* System.Reflection.MethodBase */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_RuntimeMethodHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_GetObjectData")]
	internal static void /* System.Void */ System_RuntimeMethodHandle_GetObjectData(void* /* System.RuntimeMethodHandle */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_GetHashCode")]
	internal static int /* System.Int32 */ System_RuntimeMethodHandle_GetHashCode(void* /* System.RuntimeMethodHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_Equals")]
	internal static byte /* System.Boolean */ System_RuntimeMethodHandle_Equals(void* /* System.RuntimeMethodHandle */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_FromIntPtr")]
	internal static void* /* System.RuntimeMethodHandle */ System_RuntimeMethodHandle_FromIntPtr(nint /* System.IntPtr */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.RuntimeMethodHandle __returnValue = System.RuntimeMethodHandle.FromIntPtr(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_ToIntPtr")]
	internal static nint /* System.IntPtr */ System_RuntimeMethodHandle_ToIntPtr(void* /* System.RuntimeMethodHandle */ value, void** /* System.Exception */ __outException)
	{
		System.RuntimeMethodHandle valueConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(value);
	
	    try {
			System.IntPtr __returnValue = System.RuntimeMethodHandle.ToIntPtr(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_Equals_1")]
	internal static byte /* System.Boolean */ System_RuntimeMethodHandle_Equals_1(void* /* System.RuntimeMethodHandle */ __self, void* /* System.RuntimeMethodHandle */ handle, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
		System.RuntimeMethodHandle handleConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(handle);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(handleConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_GetFunctionPointer")]
	internal static nint /* System.IntPtr */ System_RuntimeMethodHandle_GetFunctionPointer(void* /* System.RuntimeMethodHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.GetFunctionPointer();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_Value_Get")]
	internal static nint /* System.IntPtr */ System_RuntimeMethodHandle_Value_Get(void* /* System.RuntimeMethodHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeMethodHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeMethodHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.Value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_TypeOf")]
	internal static void* /* System.Type */ System_RuntimeMethodHandle_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.RuntimeMethodHandle);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeMethodHandle_Destroy")]
	internal static void /* System.Void */ System_RuntimeMethodHandle_Destroy(void* /* System.RuntimeMethodHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_Serialization_SerializationInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_SetType")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_SetType(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			__selfConverted.SetType(typeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetEnumerator")]
	internal static void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ System_Runtime_Serialization_SerializationInfo_GetEnumerator(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.Runtime.Serialization.SerializationInfoEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void* /* System.Object */ value, void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			__selfConverted.AddValue(nameConverted, valueConverted, typeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_1")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_1(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.AddValue(nameConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_2")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_2(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			__selfConverted.AddValue(nameConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_3")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_3(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_4")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_4(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_5")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_5(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_6")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_6(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_7")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_7(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_8")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_8(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_9")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_9(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_10")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_10(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_11")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_11(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_12")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_12(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_13")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_13(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.AddValue(nameConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_14")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_14(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			__selfConverted.AddValue(nameConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AddValue_15")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AddValue_15(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			__selfConverted.AddValue(nameConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetValue")]
	internal static void* /* System.Object */ System_Runtime_Serialization_SerializationInfo_GetValue(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(nameConverted, typeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetBoolean")]
	internal static byte /* System.Boolean */ System_Runtime_Serialization_SerializationInfo_GetBoolean(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Boolean __returnValue = __selfConverted.GetBoolean(nameConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetChar")]
	internal static char /* System.Char */ System_Runtime_Serialization_SerializationInfo_GetChar(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Char __returnValue = __selfConverted.GetChar(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetSByte")]
	internal static sbyte /* System.SByte */ System_Runtime_Serialization_SerializationInfo_GetSByte(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.SByte __returnValue = __selfConverted.GetSByte(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetByte")]
	internal static byte /* System.Byte */ System_Runtime_Serialization_SerializationInfo_GetByte(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Byte __returnValue = __selfConverted.GetByte(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetInt16")]
	internal static short /* System.Int16 */ System_Runtime_Serialization_SerializationInfo_GetInt16(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Int16 __returnValue = __selfConverted.GetInt16(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetUInt16")]
	internal static ushort /* System.UInt16 */ System_Runtime_Serialization_SerializationInfo_GetUInt16(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.UInt16 __returnValue = __selfConverted.GetUInt16(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetInt32")]
	internal static int /* System.Int32 */ System_Runtime_Serialization_SerializationInfo_GetInt32(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetInt32(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetUInt32")]
	internal static uint /* System.UInt32 */ System_Runtime_Serialization_SerializationInfo_GetUInt32(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.UInt32 __returnValue = __selfConverted.GetUInt32(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetInt64")]
	internal static long /* System.Int64 */ System_Runtime_Serialization_SerializationInfo_GetInt64(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Int64 __returnValue = __selfConverted.GetInt64(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetUInt64")]
	internal static ulong /* System.UInt64 */ System_Runtime_Serialization_SerializationInfo_GetUInt64(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.UInt64 __returnValue = __selfConverted.GetUInt64(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetSingle")]
	internal static float /* System.Single */ System_Runtime_Serialization_SerializationInfo_GetSingle(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Single __returnValue = __selfConverted.GetSingle(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetDouble")]
	internal static double /* System.Double */ System_Runtime_Serialization_SerializationInfo_GetDouble(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Double __returnValue = __selfConverted.GetDouble(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetDecimal")]
	internal static void* /* System.Decimal */ System_Runtime_Serialization_SerializationInfo_GetDecimal(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Decimal __returnValue = __selfConverted.GetDecimal(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetDateTime")]
	internal static void* /* System.DateTime */ System_Runtime_Serialization_SerializationInfo_GetDateTime(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.DateTime __returnValue = __selfConverted.GetDateTime(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_GetString")]
	internal static byte* /* System.String */ System_Runtime_Serialization_SerializationInfo_GetString(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.String __returnValue = __selfConverted.GetString(nameConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_Create")]
	internal static void* /* System.Runtime.Serialization.SerializationInfo */ System_Runtime_Serialization_SerializationInfo_Create(void* /* System.Type */ type, void* /* System.Runtime.Serialization.IFormatterConverter */ converter, void** /* System.Exception */ __outException)
	{
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
		System.Runtime.Serialization.IFormatterConverter converterConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(converter);
	
	    try {
			System.Runtime.Serialization.SerializationInfo __returnValue = new System.Runtime.Serialization.SerializationInfo(typeConverted, converterConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_Create_1")]
	internal static void* /* System.Runtime.Serialization.SerializationInfo */ System_Runtime_Serialization_SerializationInfo_Create_1(void* /* System.Type */ type, void* /* System.Runtime.Serialization.IFormatterConverter */ converter, byte /* System.Boolean */ requireSameTokenInPartialTrust, void** /* System.Exception */ __outException)
	{
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
		System.Runtime.Serialization.IFormatterConverter converterConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(converter);
		System.Boolean requireSameTokenInPartialTrustConverted = requireSameTokenInPartialTrust.ToBool();
	
	    try {
			System.Runtime.Serialization.SerializationInfo __returnValue = new System.Runtime.Serialization.SerializationInfo(typeConverted, converterConverted, requireSameTokenInPartialTrustConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_FullTypeName_Get")]
	internal static byte* /* System.String */ System_Runtime_Serialization_SerializationInfo_FullTypeName_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullTypeName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_FullTypeName_Set")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_FullTypeName_Set(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			__selfConverted.FullTypeName = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AssemblyName_Get")]
	internal static byte* /* System.String */ System_Runtime_Serialization_SerializationInfo_AssemblyName_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.AssemblyName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_AssemblyName_Set")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_AssemblyName_Set(void* /* System.Runtime.Serialization.SerializationInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			__selfConverted.AssemblyName = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_IsFullTypeNameSetExplicit_Get")]
	internal static byte /* System.Boolean */ System_Runtime_Serialization_SerializationInfo_IsFullTypeNameSetExplicit_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFullTypeNameSetExplicit;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_IsAssemblyNameSetExplicit_Get")]
	internal static byte /* System.Boolean */ System_Runtime_Serialization_SerializationInfo_IsAssemblyNameSetExplicit_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAssemblyNameSetExplicit;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_MemberCount_Get")]
	internal static int /* System.Int32 */ System_Runtime_Serialization_SerializationInfo_MemberCount_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MemberCount;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_ObjectType_Get")]
	internal static void* /* System.Type */ System_Runtime_Serialization_SerializationInfo_ObjectType_Get(void* /* System.Runtime.Serialization.SerializationInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfo __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ObjectType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_Serialization_SerializationInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.Serialization.SerializationInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfo_Destroy")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfo_Destroy(void* /* System.Runtime.Serialization.SerializationInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_Serialization_SerializationInfoEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_MoveNext")]
	internal static byte /* System.Boolean */ System_Runtime_Serialization_SerializationInfoEnumerator_MoveNext(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MoveNext();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_Reset")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfoEnumerator_Reset(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_Current_Get")]
	internal static void* /* System.Runtime.Serialization.SerializationEntry */ System_Runtime_Serialization_SerializationInfoEnumerator_Current_Get(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			System.Runtime.Serialization.SerializationEntry __returnValue = __selfConverted.Current;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_Name_Get")]
	internal static byte* /* System.String */ System_Runtime_Serialization_SerializationInfoEnumerator_Name_Get(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_Value_Get")]
	internal static void* /* System.Object */ System_Runtime_Serialization_SerializationInfoEnumerator_Value_Get(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Value;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_ObjectType_Get")]
	internal static void* /* System.Type */ System_Runtime_Serialization_SerializationInfoEnumerator_ObjectType_Get(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationInfoEnumerator __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfoEnumerator>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ObjectType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_Serialization_SerializationInfoEnumerator_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.Serialization.SerializationInfoEnumerator);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationInfoEnumerator_Destroy")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationInfoEnumerator_Destroy(void* /* System.Runtime.Serialization.SerializationInfoEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_Serialization_SerializationEntry
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationEntry_Value_Get")]
	internal static void* /* System.Object */ System_Runtime_Serialization_SerializationEntry_Value_Get(void* /* System.Runtime.Serialization.SerializationEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationEntry __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationEntry>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Value;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationEntry_Name_Get")]
	internal static byte* /* System.String */ System_Runtime_Serialization_SerializationEntry_Name_Get(void* /* System.Runtime.Serialization.SerializationEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationEntry __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationEntry>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationEntry_ObjectType_Get")]
	internal static void* /* System.Type */ System_Runtime_Serialization_SerializationEntry_ObjectType_Get(void* /* System.Runtime.Serialization.SerializationEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.SerializationEntry __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationEntry>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ObjectType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationEntry_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_Serialization_SerializationEntry_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.Serialization.SerializationEntry);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_SerializationEntry_Destroy")]
	internal static void /* System.Void */ System_Runtime_Serialization_SerializationEntry_Destroy(void* /* System.Runtime.Serialization.SerializationEntry */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Globalization_UnicodeCategory
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_UnicodeCategory_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_UnicodeCategory_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.UnicodeCategory);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}




internal unsafe class System_MidpointRounding
{
	[UnmanagedCallersOnly(EntryPoint = "System_MidpointRounding_TypeOf")]
	internal static void* /* System.Type */ System_MidpointRounding_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.MidpointRounding);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.


// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
internal unsafe class System_Decimal
{
	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_FromOACurrency")]
	internal static void* /* System.Decimal */ System_Decimal_FromOACurrency(long /* System.Int64 */ cy, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Decimal.FromOACurrency(cy);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToOACurrency")]
	internal static long /* System.Int64 */ System_Decimal_ToOACurrency(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Int64 __returnValue = System.Decimal.ToOACurrency(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Add")]
	internal static void* /* System.Decimal */ System_Decimal_Add(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Add(d1Converted, d2Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Ceiling")]
	internal static void* /* System.Decimal */ System_Decimal_Ceiling(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Ceiling(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Compare")]
	internal static int /* System.Int32 */ System_Decimal_Compare(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Int32 __returnValue = System.Decimal.Compare(d1Converted, d2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_CompareTo")]
	internal static int /* System.Int32 */ System_Decimal_CompareTo(void* /* System.Decimal */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_CompareTo_1")]
	internal static int /* System.Int32 */ System_Decimal_CompareTo_1(void* /* System.Decimal */ __self, void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Divide")]
	internal static void* /* System.Decimal */ System_Decimal_Divide(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Divide(d1Converted, d2Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Equals")]
	internal static byte /* System.Boolean */ System_Decimal_Equals(void* /* System.Decimal */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Equals_1")]
	internal static byte /* System.Boolean */ System_Decimal_Equals_1(void* /* System.Decimal */ __self, void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_GetHashCode")]
	internal static int /* System.Int32 */ System_Decimal_GetHashCode(void* /* System.Decimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Equals_2")]
	internal static byte /* System.Boolean */ System_Decimal_Equals_2(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Boolean __returnValue = System.Decimal.Equals(d1Converted, d2Converted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Floor")]
	internal static void* /* System.Decimal */ System_Decimal_Floor(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Floor(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToString")]
	internal static byte* /* System.String */ System_Decimal_ToString(void* /* System.Decimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToString_1")]
	internal static byte* /* System.String */ System_Decimal_ToString_1(void* /* System.Decimal */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToString_2")]
	internal static byte* /* System.String */ System_Decimal_ToString_2(void* /* System.Decimal */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToString_3")]
	internal static byte* /* System.String */ System_Decimal_ToString_3(void* /* System.Decimal */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Parse")]
	internal static void* /* System.Decimal */ System_Decimal_Parse(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Parse(sConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Parse_1")]
	internal static void* /* System.Decimal */ System_Decimal_Parse_1(byte* /* System.String */ s, System.Globalization.NumberStyles /* System.Globalization.NumberStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Parse(sConverted, style);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Parse_2")]
	internal static void* /* System.Decimal */ System_Decimal_Parse_2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Parse(sConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Parse_3")]
	internal static void* /* System.Decimal */ System_Decimal_Parse_3(byte* /* System.String */ s, System.Globalization.NumberStyles /* System.Globalization.NumberStyles */ style, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Parse(sConverted, style, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_TryParse")]
	internal static byte /* System.Boolean */ System_Decimal_TryParse(byte* /* System.String */ s, void** /* System.Decimal */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.Decimal resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Decimal.TryParse(sConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_TryParse_1")]
	internal static byte /* System.Boolean */ System_Decimal_TryParse_1(byte* /* System.String */ s, System.Globalization.NumberStyles /* System.Globalization.NumberStyles */ style, void* /* System.IFormatProvider */ provider, void** /* System.Decimal */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Decimal resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Decimal.TryParse(sConverted, style, providerConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_GetBits")]
	internal static void* /* System.Int32[] */ System_Decimal_GetBits(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Int32[] __returnValue = System.Decimal.GetBits(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Remainder")]
	internal static void* /* System.Decimal */ System_Decimal_Remainder(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Remainder(d1Converted, d2Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Multiply")]
	internal static void* /* System.Decimal */ System_Decimal_Multiply(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Multiply(d1Converted, d2Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Negate")]
	internal static void* /* System.Decimal */ System_Decimal_Negate(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Negate(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Round")]
	internal static void* /* System.Decimal */ System_Decimal_Round(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Round(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Round_1")]
	internal static void* /* System.Decimal */ System_Decimal_Round_1(void* /* System.Decimal */ d, int /* System.Int32 */ decimals, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Round(dConverted, decimals);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Round_2")]
	internal static void* /* System.Decimal */ System_Decimal_Round_2(void* /* System.Decimal */ d, System.MidpointRounding /* System.MidpointRounding */ mode, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Round(dConverted, mode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Round_3")]
	internal static void* /* System.Decimal */ System_Decimal_Round_3(void* /* System.Decimal */ d, int /* System.Int32 */ decimals, System.MidpointRounding /* System.MidpointRounding */ mode, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Round(dConverted, decimals, mode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Subtract")]
	internal static void* /* System.Decimal */ System_Decimal_Subtract(void* /* System.Decimal */ d1, void* /* System.Decimal */ d2, void** /* System.Exception */ __outException)
	{
		System.Decimal d1Converted = InteropUtils.GetInstance<System.Decimal>(d1);
		System.Decimal d2Converted = InteropUtils.GetInstance<System.Decimal>(d2);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Subtract(d1Converted, d2Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToByte")]
	internal static byte /* System.Byte */ System_Decimal_ToByte(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Byte __returnValue = System.Decimal.ToByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToSByte")]
	internal static sbyte /* System.SByte */ System_Decimal_ToSByte(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.SByte __returnValue = System.Decimal.ToSByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToInt16")]
	internal static short /* System.Int16 */ System_Decimal_ToInt16(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Int16 __returnValue = System.Decimal.ToInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToDouble")]
	internal static double /* System.Double */ System_Decimal_ToDouble(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Double __returnValue = System.Decimal.ToDouble(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToInt32")]
	internal static int /* System.Int32 */ System_Decimal_ToInt32(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Int32 __returnValue = System.Decimal.ToInt32(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToInt64")]
	internal static long /* System.Int64 */ System_Decimal_ToInt64(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Int64 __returnValue = System.Decimal.ToInt64(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToUInt16")]
	internal static ushort /* System.UInt16 */ System_Decimal_ToUInt16(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.UInt16 __returnValue = System.Decimal.ToUInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToUInt32")]
	internal static uint /* System.UInt32 */ System_Decimal_ToUInt32(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.UInt32 __returnValue = System.Decimal.ToUInt32(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToUInt64")]
	internal static ulong /* System.UInt64 */ System_Decimal_ToUInt64(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.UInt64 __returnValue = System.Decimal.ToUInt64(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_ToSingle")]
	internal static float /* System.Single */ System_Decimal_ToSingle(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Single __returnValue = System.Decimal.ToSingle(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Truncate")]
	internal static void* /* System.Decimal */ System_Decimal_Truncate(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Truncate(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_Decimal_GetTypeCode(void* /* System.Decimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
	
	    try {
			System.TypeCode __returnValue = __selfConverted.GetTypeCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Clamp")]
	internal static void* /* System.Decimal */ System_Decimal_Clamp(void* /* System.Decimal */ value, void* /* System.Decimal */ min, void* /* System.Decimal */ max, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
		System.Decimal minConverted = InteropUtils.GetInstance<System.Decimal>(min);
		System.Decimal maxConverted = InteropUtils.GetInstance<System.Decimal>(max);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Clamp(valueConverted, minConverted, maxConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_CopySign")]
	internal static void* /* System.Decimal */ System_Decimal_CopySign(void* /* System.Decimal */ value, void* /* System.Decimal */ sign, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
		System.Decimal signConverted = InteropUtils.GetInstance<System.Decimal>(sign);
	
	    try {
			System.Decimal __returnValue = System.Decimal.CopySign(valueConverted, signConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Max")]
	internal static void* /* System.Decimal */ System_Decimal_Max(void* /* System.Decimal */ x, void* /* System.Decimal */ y, void** /* System.Exception */ __outException)
	{
		System.Decimal xConverted = InteropUtils.GetInstance<System.Decimal>(x);
		System.Decimal yConverted = InteropUtils.GetInstance<System.Decimal>(y);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Max(xConverted, yConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Min")]
	internal static void* /* System.Decimal */ System_Decimal_Min(void* /* System.Decimal */ x, void* /* System.Decimal */ y, void** /* System.Exception */ __outException)
	{
		System.Decimal xConverted = InteropUtils.GetInstance<System.Decimal>(x);
		System.Decimal yConverted = InteropUtils.GetInstance<System.Decimal>(y);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Min(xConverted, yConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Sign")]
	internal static int /* System.Int32 */ System_Decimal_Sign(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Int32 __returnValue = System.Decimal.Sign(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Abs")]
	internal static void* /* System.Decimal */ System_Decimal_Abs(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Decimal __returnValue = System.Decimal.Abs(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_CreateChecked_A1")]
	internal static void* /* System.Decimal */ System_Decimal_CreateChecked_A1(void* /* System.Type */ TOther, void* /* TOther */ value, void** /* System.Exception */ __outException)
	{
		System.Type TOtherConverted = InteropUtils.GetInstance<System.Type>(TOther);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Decimal);
			System.String __nameOfMethodForGenericCall = nameof(System.Decimal.CreateChecked);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TOtherConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TOtherConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method CreateChecked not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Decimal __returnValue = (System.Decimal)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_CreateSaturating_A1")]
	internal static void* /* System.Decimal */ System_Decimal_CreateSaturating_A1(void* /* System.Type */ TOther, void* /* TOther */ value, void** /* System.Exception */ __outException)
	{
		System.Type TOtherConverted = InteropUtils.GetInstance<System.Type>(TOther);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Decimal);
			System.String __nameOfMethodForGenericCall = nameof(System.Decimal.CreateSaturating);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TOtherConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TOtherConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method CreateSaturating not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Decimal __returnValue = (System.Decimal)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_CreateTruncating_A1")]
	internal static void* /* System.Decimal */ System_Decimal_CreateTruncating_A1(void* /* System.Type */ TOther, void* /* TOther */ value, void** /* System.Exception */ __outException)
	{
		System.Type TOtherConverted = InteropUtils.GetInstance<System.Type>(TOther);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Decimal);
			System.String __nameOfMethodForGenericCall = nameof(System.Decimal.CreateTruncating);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TOtherConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TOtherConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method CreateTruncating not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Decimal __returnValue = (System.Decimal)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsCanonical")]
	internal static byte /* System.Boolean */ System_Decimal_IsCanonical(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsCanonical(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsEvenInteger")]
	internal static byte /* System.Boolean */ System_Decimal_IsEvenInteger(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsEvenInteger(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsInteger")]
	internal static byte /* System.Boolean */ System_Decimal_IsInteger(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsInteger(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsNegative")]
	internal static byte /* System.Boolean */ System_Decimal_IsNegative(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsNegative(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsOddInteger")]
	internal static byte /* System.Boolean */ System_Decimal_IsOddInteger(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsOddInteger(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_IsPositive")]
	internal static byte /* System.Boolean */ System_Decimal_IsPositive(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Decimal.IsPositive(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_MaxMagnitude")]
	internal static void* /* System.Decimal */ System_Decimal_MaxMagnitude(void* /* System.Decimal */ x, void* /* System.Decimal */ y, void** /* System.Exception */ __outException)
	{
		System.Decimal xConverted = InteropUtils.GetInstance<System.Decimal>(x);
		System.Decimal yConverted = InteropUtils.GetInstance<System.Decimal>(y);
	
	    try {
			System.Decimal __returnValue = System.Decimal.MaxMagnitude(xConverted, yConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_MinMagnitude")]
	internal static void* /* System.Decimal */ System_Decimal_MinMagnitude(void* /* System.Decimal */ x, void* /* System.Decimal */ y, void** /* System.Exception */ __outException)
	{
		System.Decimal xConverted = InteropUtils.GetInstance<System.Decimal>(x);
		System.Decimal yConverted = InteropUtils.GetInstance<System.Decimal>(y);
	
	    try {
			System.Decimal __returnValue = System.Decimal.MinMagnitude(xConverted, yConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_TryParse_2")]
	internal static byte /* System.Boolean */ System_Decimal_TryParse_2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Decimal */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Decimal resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Decimal.TryParse(sConverted, providerConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create_1")]
	internal static void* /* System.Decimal */ System_Decimal_Create_1(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create_2")]
	internal static void* /* System.Decimal */ System_Decimal_Create_2(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create_3")]
	internal static void* /* System.Decimal */ System_Decimal_Create_3(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create_4")]
	internal static void* /* System.Decimal */ System_Decimal_Create_4(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create_5")]
	internal static void* /* System.Decimal */ System_Decimal_Create_5(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create_6")]
	internal static void* /* System.Decimal */ System_Decimal_Create_6(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = new System.Decimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create_7")]
	internal static void* /* System.Decimal */ System_Decimal_Create_7(void* /* System.Int32[] */ bits, void** /* System.Exception */ __outException)
	{
		System.Int32[] bitsConverted = InteropUtils.GetInstance<System.Int32[]>(bits);
	
	    try {
			System.Decimal __returnValue = new System.Decimal(bitsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Create_8")]
	internal static void* /* System.Decimal */ System_Decimal_Create_8(int /* System.Int32 */ lo, int /* System.Int32 */ mid, int /* System.Int32 */ hi, byte /* System.Boolean */ isNegative, byte /* System.Byte */ scale, void** /* System.Exception */ __outException)
	{
		System.Boolean isNegativeConverted = isNegative.ToBool();
	
	    try {
			System.Decimal __returnValue = new System.Decimal(lo, mid, hi, isNegativeConverted, scale);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Scale_Get")]
	internal static byte /* System.Byte */ System_Decimal_Scale_Get(void* /* System.Decimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Decimal __selfConverted = InteropUtils.GetInstance<System.Decimal>(__self);
	
	
	    try {
			System.Byte __returnValue = __selfConverted.Scale;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Zero_Get")]
	internal static void* /* System.Decimal */ System_Decimal_Zero_Get()
	{
	
		System.Decimal __returnValue = System.Decimal.Zero;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_One_Get")]
	internal static void* /* System.Decimal */ System_Decimal_One_Get()
	{
	
		System.Decimal __returnValue = System.Decimal.One;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_MinusOne_Get")]
	internal static void* /* System.Decimal */ System_Decimal_MinusOne_Get()
	{
	
		System.Decimal __returnValue = System.Decimal.MinusOne;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_MaxValue_Get")]
	internal static void* /* System.Decimal */ System_Decimal_MaxValue_Get()
	{
	
		System.Decimal __returnValue = System.Decimal.MaxValue;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_MinValue_Get")]
	internal static void* /* System.Decimal */ System_Decimal_MinValue_Get()
	{
	
		System.Decimal __returnValue = System.Decimal.MinValue;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_TypeOf")]
	internal static void* /* System.Type */ System_Decimal_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Decimal);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Decimal_Destroy")]
	internal static void /* System.Void */ System_Decimal_Destroy(void* /* System.Decimal */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
internal unsafe class System_DateTime
{
	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Add")]
	internal static void* /* System.DateTime */ System_DateTime_Add(void* /* System.DateTime */ __self, void* /* System.TimeSpan */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.TimeSpan valueConverted = InteropUtils.GetInstance<System.TimeSpan>(value);
	
	    try {
			System.DateTime __returnValue = __selfConverted.Add(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddDays")]
	internal static void* /* System.DateTime */ System_DateTime_AddDays(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddDays(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddHours")]
	internal static void* /* System.DateTime */ System_DateTime_AddHours(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddHours(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddMilliseconds")]
	internal static void* /* System.DateTime */ System_DateTime_AddMilliseconds(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMilliseconds(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddMicroseconds")]
	internal static void* /* System.DateTime */ System_DateTime_AddMicroseconds(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMicroseconds(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddMinutes")]
	internal static void* /* System.DateTime */ System_DateTime_AddMinutes(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMinutes(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddMonths")]
	internal static void* /* System.DateTime */ System_DateTime_AddMonths(void* /* System.DateTime */ __self, int /* System.Int32 */ months, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMonths(months);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddSeconds")]
	internal static void* /* System.DateTime */ System_DateTime_AddSeconds(void* /* System.DateTime */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddSeconds(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddTicks")]
	internal static void* /* System.DateTime */ System_DateTime_AddTicks(void* /* System.DateTime */ __self, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddTicks(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_AddYears")]
	internal static void* /* System.DateTime */ System_DateTime_AddYears(void* /* System.DateTime */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddYears(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Compare")]
	internal static int /* System.Int32 */ System_DateTime_Compare(void* /* System.DateTime */ t1, void* /* System.DateTime */ t2, void** /* System.Exception */ __outException)
	{
		System.DateTime t1Converted = InteropUtils.GetInstance<System.DateTime>(t1);
		System.DateTime t2Converted = InteropUtils.GetInstance<System.DateTime>(t2);
	
	    try {
			System.Int32 __returnValue = System.DateTime.Compare(t1Converted, t2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_CompareTo")]
	internal static int /* System.Int32 */ System_DateTime_CompareTo(void* /* System.DateTime */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_CompareTo_1")]
	internal static int /* System.Int32 */ System_DateTime_CompareTo_1(void* /* System.DateTime */ __self, void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_DaysInMonth")]
	internal static int /* System.Int32 */ System_DateTime_DaysInMonth(int /* System.Int32 */ year, int /* System.Int32 */ month, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.DateTime.DaysInMonth(year, month);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Equals")]
	internal static byte /* System.Boolean */ System_DateTime_Equals(void* /* System.DateTime */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Equals_1")]
	internal static byte /* System.Boolean */ System_DateTime_Equals_1(void* /* System.DateTime */ __self, void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Equals_2")]
	internal static byte /* System.Boolean */ System_DateTime_Equals_2(void* /* System.DateTime */ t1, void* /* System.DateTime */ t2, void** /* System.Exception */ __outException)
	{
		System.DateTime t1Converted = InteropUtils.GetInstance<System.DateTime>(t1);
		System.DateTime t2Converted = InteropUtils.GetInstance<System.DateTime>(t2);
	
	    try {
			System.Boolean __returnValue = System.DateTime.Equals(t1Converted, t2Converted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_FromBinary")]
	internal static void* /* System.DateTime */ System_DateTime_FromBinary(long /* System.Int64 */ dateData, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.FromBinary(dateData);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_FromFileTime")]
	internal static void* /* System.DateTime */ System_DateTime_FromFileTime(long /* System.Int64 */ fileTime, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.FromFileTime(fileTime);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_FromFileTimeUtc")]
	internal static void* /* System.DateTime */ System_DateTime_FromFileTimeUtc(long /* System.Int64 */ fileTime, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.FromFileTimeUtc(fileTime);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_FromOADate")]
	internal static void* /* System.DateTime */ System_DateTime_FromOADate(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.FromOADate(d);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_IsDaylightSavingTime")]
	internal static byte /* System.Boolean */ System_DateTime_IsDaylightSavingTime(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDaylightSavingTime();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_SpecifyKind")]
	internal static void* /* System.DateTime */ System_DateTime_SpecifyKind(void* /* System.DateTime */ value, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.DateTime __returnValue = System.DateTime.SpecifyKind(valueConverted, kind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToBinary")]
	internal static long /* System.Int64 */ System_DateTime_ToBinary(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.ToBinary();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_GetHashCode")]
	internal static int /* System.Int32 */ System_DateTime_GetHashCode(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_IsLeapYear")]
	internal static byte /* System.Boolean */ System_DateTime_IsLeapYear(int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.DateTime.IsLeapYear(year);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Parse")]
	internal static void* /* System.DateTime */ System_DateTime_Parse(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.DateTime __returnValue = System.DateTime.Parse(sConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Parse_1")]
	internal static void* /* System.DateTime */ System_DateTime_Parse_1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.DateTime.Parse(sConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Parse_2")]
	internal static void* /* System.DateTime */ System_DateTime_Parse_2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ styles, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.DateTime.Parse(sConverted, providerConverted, styles);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ParseExact")]
	internal static void* /* System.DateTime */ System_DateTime_ParseExact(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.DateTime.ParseExact(sConverted, formatConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ParseExact_1")]
	internal static void* /* System.DateTime */ System_DateTime_ParseExact_1(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.DateTime.ParseExact(sConverted, formatConverted, providerConverted, style);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ParseExact_2")]
	internal static void* /* System.DateTime */ System_DateTime_ParseExact_2(byte* /* System.String */ s, void* /* System.String[] */ formats, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.DateTime.ParseExact(sConverted, formatsConverted, providerConverted, style);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Subtract")]
	internal static void* /* System.TimeSpan */ System_DateTime_Subtract(void* /* System.DateTime */ __self, void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Subtract(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Subtract_1")]
	internal static void* /* System.DateTime */ System_DateTime_Subtract_1(void* /* System.DateTime */ __self, void* /* System.TimeSpan */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.TimeSpan valueConverted = InteropUtils.GetInstance<System.TimeSpan>(value);
	
	    try {
			System.DateTime __returnValue = __selfConverted.Subtract(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToOADate")]
	internal static double /* System.Double */ System_DateTime_ToOADate(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.ToOADate();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToFileTime")]
	internal static long /* System.Int64 */ System_DateTime_ToFileTime(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.ToFileTime();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToFileTimeUtc")]
	internal static long /* System.Int64 */ System_DateTime_ToFileTimeUtc(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.ToFileTimeUtc();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToLocalTime")]
	internal static void* /* System.DateTime */ System_DateTime_ToLocalTime(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToLocalTime();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToLongDateString")]
	internal static byte* /* System.String */ System_DateTime_ToLongDateString(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLongDateString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToLongTimeString")]
	internal static byte* /* System.String */ System_DateTime_ToLongTimeString(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLongTimeString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToShortDateString")]
	internal static byte* /* System.String */ System_DateTime_ToShortDateString(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToShortDateString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToShortTimeString")]
	internal static byte* /* System.String */ System_DateTime_ToShortTimeString(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToShortTimeString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToString")]
	internal static byte* /* System.String */ System_DateTime_ToString(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToString_1")]
	internal static byte* /* System.String */ System_DateTime_ToString_1(void* /* System.DateTime */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToString_2")]
	internal static byte* /* System.String */ System_DateTime_ToString_2(void* /* System.DateTime */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToString_3")]
	internal static byte* /* System.String */ System_DateTime_ToString_3(void* /* System.DateTime */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_ToUniversalTime")]
	internal static void* /* System.DateTime */ System_DateTime_ToUniversalTime(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToUniversalTime();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_TryParse")]
	internal static byte /* System.Boolean */ System_DateTime_TryParse(byte* /* System.String */ s, void** /* System.DateTime */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.DateTime resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateTime.TryParse(sConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_TryParse_1")]
	internal static byte /* System.Boolean */ System_DateTime_TryParse_1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ styles, void** /* System.DateTime */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.DateTime resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateTime.TryParse(sConverted, providerConverted, styles, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_TryParseExact")]
	internal static byte /* System.Boolean */ System_DateTime_TryParseExact(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.DateTime */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.DateTime resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateTime.TryParseExact(sConverted, formatConverted, providerConverted, style, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_TryParseExact_1")]
	internal static byte /* System.Boolean */ System_DateTime_TryParseExact_1(byte* /* System.String */ s, void* /* System.String[] */ formats, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.DateTime */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.DateTime resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateTime.TryParseExact(sConverted, formatsConverted, providerConverted, style, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Deconstruct")]
	internal static void /* System.Void */ System_DateTime_Deconstruct(void* /* System.DateTime */ __self, void** /* System.DateOnly */ date, void** /* System.TimeOnly */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.DateOnly dateConverted;
		System.TimeOnly timeConverted;
	
	    try {
			__selfConverted.Deconstruct(out dateConverted, out timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (date is not null) {
				*date = dateConverted.AllocateGCHandleAndGetAddress();
			}
	
			if (time is not null) {
				*time = timeConverted.AllocateGCHandleAndGetAddress();
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (date is not null) {
				*date = null;
			}
	
			if (time is not null) {
				*time = null;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Deconstruct_1")]
	internal static void /* System.Void */ System_DateTime_Deconstruct_1(void* /* System.DateTime */ __self, int* /* System.Int32 */ year, int* /* System.Int32 */ month, int* /* System.Int32 */ day, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.Int32 yearConverted;
		System.Int32 monthConverted;
		System.Int32 dayConverted;
	
	    try {
			__selfConverted.Deconstruct(out yearConverted, out monthConverted, out dayConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (year is not null) {
				*year = yearConverted;
			}
	
			if (month is not null) {
				*month = monthConverted;
			}
	
			if (day is not null) {
				*day = dayConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (year is not null) {
				*year = -1;
			}
	
			if (month is not null) {
				*month = -1;
			}
	
			if (day is not null) {
				*day = -1;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_GetDateTimeFormats")]
	internal static void* /* System.String[] */ System_DateTime_GetDateTimeFormats(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.GetDateTimeFormats();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_GetDateTimeFormats_1")]
	internal static void* /* System.String[] */ System_DateTime_GetDateTimeFormats_1(void* /* System.DateTime */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String[] __returnValue = __selfConverted.GetDateTimeFormats(providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_GetDateTimeFormats_2")]
	internal static void* /* System.String[] */ System_DateTime_GetDateTimeFormats_2(void* /* System.DateTime */ __self, char /* System.Char */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.GetDateTimeFormats(format);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_GetDateTimeFormats_3")]
	internal static void* /* System.String[] */ System_DateTime_GetDateTimeFormats_3(void* /* System.DateTime */ __self, char /* System.Char */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String[] __returnValue = __selfConverted.GetDateTimeFormats(format, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_DateTime_GetTypeCode(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.TypeCode __returnValue = __selfConverted.GetTypeCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_TryParse_2")]
	internal static byte /* System.Boolean */ System_DateTime_TryParse_2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.DateTime */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.DateTime resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateTime.TryParse(sConverted, providerConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create")]
	internal static void* /* System.DateTime */ System_DateTime_Create(long /* System.Int64 */ ticks, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(ticks);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_1")]
	internal static void* /* System.DateTime */ System_DateTime_Create_1(long /* System.Int64 */ ticks, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(ticks, kind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_2")]
	internal static void* /* System.DateTime */ System_DateTime_Create_2(void* /* System.DateOnly */ date, void* /* System.TimeOnly */ time, void** /* System.Exception */ __outException)
	{
		System.DateOnly dateConverted = InteropUtils.GetInstance<System.DateOnly>(date);
		System.TimeOnly timeConverted = InteropUtils.GetInstance<System.TimeOnly>(time);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(dateConverted, timeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_3")]
	internal static void* /* System.DateTime */ System_DateTime_Create_3(void* /* System.DateOnly */ date, void* /* System.TimeOnly */ time, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
		System.DateOnly dateConverted = InteropUtils.GetInstance<System.DateOnly>(date);
		System.TimeOnly timeConverted = InteropUtils.GetInstance<System.TimeOnly>(time);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(dateConverted, timeConverted, kind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_4")]
	internal static void* /* System.DateTime */ System_DateTime_Create_4(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_5")]
	internal static void* /* System.DateTime */ System_DateTime_Create_5(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, calendarConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_6")]
	internal static void* /* System.DateTime */ System_DateTime_Create_6(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, void* /* System.Globalization.Calendar */ calendar, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, calendarConverted, kind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_7")]
	internal static void* /* System.DateTime */ System_DateTime_Create_7(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_8")]
	internal static void* /* System.DateTime */ System_DateTime_Create_8(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, kind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_9")]
	internal static void* /* System.DateTime */ System_DateTime_Create_9(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, calendarConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_10")]
	internal static void* /* System.DateTime */ System_DateTime_Create_10(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_11")]
	internal static void* /* System.DateTime */ System_DateTime_Create_11(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, kind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_12")]
	internal static void* /* System.DateTime */ System_DateTime_Create_12(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, calendarConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_13")]
	internal static void* /* System.DateTime */ System_DateTime_Create_13(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ microsecond, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, microsecond);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_14")]
	internal static void* /* System.DateTime */ System_DateTime_Create_14(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ microsecond, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, microsecond, kind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_15")]
	internal static void* /* System.DateTime */ System_DateTime_Create_15(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ microsecond, void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, microsecond, calendarConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Create_16")]
	internal static void* /* System.DateTime */ System_DateTime_Create_16(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ microsecond, void* /* System.Globalization.Calendar */ calendar, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateTime __returnValue = new System.DateTime(year, month, day, hour, minute, second, millisecond, microsecond, calendarConverted, kind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Date_Get")]
	internal static void* /* System.DateTime */ System_DateTime_Date_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.Date;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Day_Get")]
	internal static int /* System.Int32 */ System_DateTime_Day_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Day;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_DayOfWeek_Get")]
	internal static System.DayOfWeek /* System.DayOfWeek */ System_DateTime_DayOfWeek_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DayOfWeek __returnValue = __selfConverted.DayOfWeek;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.DayOfWeek);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_DayOfYear_Get")]
	internal static int /* System.Int32 */ System_DateTime_DayOfYear_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.DayOfYear;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Hour_Get")]
	internal static int /* System.Int32 */ System_DateTime_Hour_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Hour;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Kind_Get")]
	internal static System.DateTimeKind /* System.DateTimeKind */ System_DateTime_Kind_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.DateTimeKind __returnValue = __selfConverted.Kind;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.DateTimeKind);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Millisecond_Get")]
	internal static int /* System.Int32 */ System_DateTime_Millisecond_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Millisecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Microsecond_Get")]
	internal static int /* System.Int32 */ System_DateTime_Microsecond_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Microsecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Nanosecond_Get")]
	internal static int /* System.Int32 */ System_DateTime_Nanosecond_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Nanosecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Minute_Get")]
	internal static int /* System.Int32 */ System_DateTime_Minute_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Minute;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Month_Get")]
	internal static int /* System.Int32 */ System_DateTime_Month_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Month;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Now_Get")]
	internal static void* /* System.DateTime */ System_DateTime_Now_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.Now;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Second_Get")]
	internal static int /* System.Int32 */ System_DateTime_Second_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Second;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Ticks_Get")]
	internal static long /* System.Int64 */ System_DateTime_Ticks_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Ticks;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_TimeOfDay_Get")]
	internal static void* /* System.TimeSpan */ System_DateTime_TimeOfDay_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.TimeOfDay;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Today_Get")]
	internal static void* /* System.DateTime */ System_DateTime_Today_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.Today;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Year_Get")]
	internal static int /* System.Int32 */ System_DateTime_Year_Get(void* /* System.DateTime */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateTime __selfConverted = InteropUtils.GetInstance<System.DateTime>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Year;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_UtcNow_Get")]
	internal static void* /* System.DateTime */ System_DateTime_UtcNow_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.DateTime.UtcNow;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_MinValue_Get")]
	internal static void* /* System.DateTime */ System_DateTime_MinValue_Get()
	{
	
		System.DateTime __returnValue = System.DateTime.MinValue;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_MaxValue_Get")]
	internal static void* /* System.DateTime */ System_DateTime_MaxValue_Get()
	{
	
		System.DateTime __returnValue = System.DateTime.MaxValue;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_UnixEpoch_Get")]
	internal static void* /* System.DateTime */ System_DateTime_UnixEpoch_Get()
	{
	
		System.DateTime __returnValue = System.DateTime.UnixEpoch;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_TypeOf")]
	internal static void* /* System.Type */ System_DateTime_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.DateTime);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateTime_Destroy")]
	internal static void /* System.Void */ System_DateTime_Destroy(void* /* System.DateTime */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_TimeSpan
{
	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Add")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Add(void* /* System.TimeSpan */ __self, void* /* System.TimeSpan */ ts, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.TimeSpan tsConverted = InteropUtils.GetInstance<System.TimeSpan>(ts);
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Add(tsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Compare")]
	internal static int /* System.Int32 */ System_TimeSpan_Compare(void* /* System.TimeSpan */ t1, void* /* System.TimeSpan */ t2, void** /* System.Exception */ __outException)
	{
		System.TimeSpan t1Converted = InteropUtils.GetInstance<System.TimeSpan>(t1);
		System.TimeSpan t2Converted = InteropUtils.GetInstance<System.TimeSpan>(t2);
	
	    try {
			System.Int32 __returnValue = System.TimeSpan.Compare(t1Converted, t2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_CompareTo")]
	internal static int /* System.Int32 */ System_TimeSpan_CompareTo(void* /* System.TimeSpan */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_CompareTo_1")]
	internal static int /* System.Int32 */ System_TimeSpan_CompareTo_1(void* /* System.TimeSpan */ __self, void* /* System.TimeSpan */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.TimeSpan valueConverted = InteropUtils.GetInstance<System.TimeSpan>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromDays")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromDays(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromDays(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Duration")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Duration(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Duration();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Equals")]
	internal static byte /* System.Boolean */ System_TimeSpan_Equals(void* /* System.TimeSpan */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Equals_1")]
	internal static byte /* System.Boolean */ System_TimeSpan_Equals_1(void* /* System.TimeSpan */ __self, void* /* System.TimeSpan */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.TimeSpan objConverted = InteropUtils.GetInstance<System.TimeSpan>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Equals_2")]
	internal static byte /* System.Boolean */ System_TimeSpan_Equals_2(void* /* System.TimeSpan */ t1, void* /* System.TimeSpan */ t2, void** /* System.Exception */ __outException)
	{
		System.TimeSpan t1Converted = InteropUtils.GetInstance<System.TimeSpan>(t1);
		System.TimeSpan t2Converted = InteropUtils.GetInstance<System.TimeSpan>(t2);
	
	    try {
			System.Boolean __returnValue = System.TimeSpan.Equals(t1Converted, t2Converted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_GetHashCode")]
	internal static int /* System.Int32 */ System_TimeSpan_GetHashCode(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromHours")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromHours(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromHours(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromMilliseconds")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromMilliseconds(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromMilliseconds(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromMicroseconds")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromMicroseconds(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromMicroseconds(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromMinutes")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromMinutes(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromMinutes(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Negate")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Negate(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Negate();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromSeconds")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromSeconds(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromSeconds(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Subtract")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Subtract(void* /* System.TimeSpan */ __self, void* /* System.TimeSpan */ ts, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.TimeSpan tsConverted = InteropUtils.GetInstance<System.TimeSpan>(ts);
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Subtract(tsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Multiply")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Multiply(void* /* System.TimeSpan */ __self, double /* System.Double */ factor, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Multiply(factor);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Divide")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Divide(void* /* System.TimeSpan */ __self, double /* System.Double */ divisor, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.Divide(divisor);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Divide_1")]
	internal static double /* System.Double */ System_TimeSpan_Divide_1(void* /* System.TimeSpan */ __self, void* /* System.TimeSpan */ ts, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.TimeSpan tsConverted = InteropUtils.GetInstance<System.TimeSpan>(ts);
	
	    try {
			System.Double __returnValue = __selfConverted.Divide(tsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_FromTicks")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_FromTicks(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.FromTicks(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Parse")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Parse(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.Parse(sConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Parse_1")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Parse_1(byte* /* System.String */ input, void* /* System.IFormatProvider */ formatProvider, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.Parse(inputConverted, formatProviderConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ParseExact")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_ParseExact(byte* /* System.String */ input, byte* /* System.String */ format, void* /* System.IFormatProvider */ formatProvider, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.ParseExact(inputConverted, formatConverted, formatProviderConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ParseExact_1")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_ParseExact_1(byte* /* System.String */ input, void* /* System.String[] */ formats, void* /* System.IFormatProvider */ formatProvider, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.ParseExact(inputConverted, formatsConverted, formatProviderConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ParseExact_2")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_ParseExact_2(byte* /* System.String */ input, byte* /* System.String */ format, void* /* System.IFormatProvider */ formatProvider, System.Globalization.TimeSpanStyles /* System.Globalization.TimeSpanStyles */ styles, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.ParseExact(inputConverted, formatConverted, formatProviderConverted, styles);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ParseExact_3")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_ParseExact_3(byte* /* System.String */ input, void* /* System.String[] */ formats, void* /* System.IFormatProvider */ formatProvider, System.Globalization.TimeSpanStyles /* System.Globalization.TimeSpanStyles */ styles, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.TimeSpan __returnValue = System.TimeSpan.ParseExact(inputConverted, formatsConverted, formatProviderConverted, styles);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TryParse")]
	internal static byte /* System.Boolean */ System_TimeSpan_TryParse(byte* /* System.String */ s, void** /* System.TimeSpan */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.TimeSpan resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeSpan.TryParse(sConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TryParse_1")]
	internal static byte /* System.Boolean */ System_TimeSpan_TryParse_1(byte* /* System.String */ input, void* /* System.IFormatProvider */ formatProvider, void** /* System.TimeSpan */ result, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
		System.TimeSpan resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeSpan.TryParse(inputConverted, formatProviderConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TryParseExact")]
	internal static byte /* System.Boolean */ System_TimeSpan_TryParseExact(byte* /* System.String */ input, byte* /* System.String */ format, void* /* System.IFormatProvider */ formatProvider, void** /* System.TimeSpan */ result, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
		System.TimeSpan resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeSpan.TryParseExact(inputConverted, formatConverted, formatProviderConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TryParseExact_1")]
	internal static byte /* System.Boolean */ System_TimeSpan_TryParseExact_1(byte* /* System.String */ input, void* /* System.String[] */ formats, void* /* System.IFormatProvider */ formatProvider, void** /* System.TimeSpan */ result, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
		System.TimeSpan resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeSpan.TryParseExact(inputConverted, formatsConverted, formatProviderConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TryParseExact_2")]
	internal static byte /* System.Boolean */ System_TimeSpan_TryParseExact_2(byte* /* System.String */ input, byte* /* System.String */ format, void* /* System.IFormatProvider */ formatProvider, System.Globalization.TimeSpanStyles /* System.Globalization.TimeSpanStyles */ styles, void** /* System.TimeSpan */ result, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
		System.TimeSpan resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeSpan.TryParseExact(inputConverted, formatConverted, formatProviderConverted, styles, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TryParseExact_3")]
	internal static byte /* System.Boolean */ System_TimeSpan_TryParseExact_3(byte* /* System.String */ input, void* /* System.String[] */ formats, void* /* System.IFormatProvider */ formatProvider, System.Globalization.TimeSpanStyles /* System.Globalization.TimeSpanStyles */ styles, void** /* System.TimeSpan */ result, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
		System.TimeSpan resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeSpan.TryParseExact(inputConverted, formatsConverted, formatProviderConverted, styles, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ToString")]
	internal static byte* /* System.String */ System_TimeSpan_ToString(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ToString_1")]
	internal static byte* /* System.String */ System_TimeSpan_ToString_1(void* /* System.TimeSpan */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_ToString_2")]
	internal static byte* /* System.String */ System_TimeSpan_ToString_2(void* /* System.TimeSpan */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ formatProvider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, formatProviderConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Create")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Create(long /* System.Int64 */ ticks, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = new System.TimeSpan(ticks);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Create_1")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Create_1(int /* System.Int32 */ hours, int /* System.Int32 */ minutes, int /* System.Int32 */ seconds, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = new System.TimeSpan(hours, minutes, seconds);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Create_2")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Create_2(int /* System.Int32 */ days, int /* System.Int32 */ hours, int /* System.Int32 */ minutes, int /* System.Int32 */ seconds, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = new System.TimeSpan(days, hours, minutes, seconds);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Create_3")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Create_3(int /* System.Int32 */ days, int /* System.Int32 */ hours, int /* System.Int32 */ minutes, int /* System.Int32 */ seconds, int /* System.Int32 */ milliseconds, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = new System.TimeSpan(days, hours, minutes, seconds, milliseconds);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Create_4")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Create_4(int /* System.Int32 */ days, int /* System.Int32 */ hours, int /* System.Int32 */ minutes, int /* System.Int32 */ seconds, int /* System.Int32 */ milliseconds, int /* System.Int32 */ microseconds, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = new System.TimeSpan(days, hours, minutes, seconds, milliseconds, microseconds);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Ticks_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_Ticks_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Ticks;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Days_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Days_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Days;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Hours_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Hours_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Hours;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Milliseconds_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Milliseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Milliseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Microseconds_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Microseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Microseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Nanoseconds_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Nanoseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Nanoseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Minutes_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Minutes_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Minutes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Seconds_Get")]
	internal static int /* System.Int32 */ System_TimeSpan_Seconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Seconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalDays_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalDays_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalDays;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalHours_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalHours_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalHours;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalMilliseconds_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalMilliseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalMilliseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalMicroseconds_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalMicroseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalMicroseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalNanoseconds_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalNanoseconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalNanoseconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalMinutes_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalMinutes_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalMinutes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TotalSeconds_Get")]
	internal static double /* System.Double */ System_TimeSpan_TotalSeconds_Get(void* /* System.TimeSpan */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeSpan __selfConverted = InteropUtils.GetInstance<System.TimeSpan>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.TotalSeconds;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Zero_Get")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_Zero_Get()
	{
	
		System.TimeSpan __returnValue = System.TimeSpan.Zero;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_MaxValue_Get")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_MaxValue_Get()
	{
	
		System.TimeSpan __returnValue = System.TimeSpan.MaxValue;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_MinValue_Get")]
	internal static void* /* System.TimeSpan */ System_TimeSpan_MinValue_Get()
	{
	
		System.TimeSpan __returnValue = System.TimeSpan.MinValue;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_NanosecondsPerTick_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_NanosecondsPerTick_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.NanosecondsPerTick;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerMicrosecond_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerMicrosecond_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerMicrosecond;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerMillisecond_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerMillisecond_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerMillisecond;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerSecond_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerSecond_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerSecond;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerMinute_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerMinute_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerMinute;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerHour_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerHour_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerHour;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TicksPerDay_Get")]
	internal static long /* System.Int64 */ System_TimeSpan_TicksPerDay_Get()
	{
	
		System.Int64 __returnValue = System.TimeSpan.TicksPerDay;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_TypeOf")]
	internal static void* /* System.Type */ System_TimeSpan_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.TimeSpan);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeSpan_Destroy")]
	internal static void /* System.Void */ System_TimeSpan_Destroy(void* /* System.TimeSpan */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Globalization_TimeSpanStyles
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TimeSpanStyles_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_TimeSpanStyles_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.TimeSpanStyles);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}



internal unsafe class System_DateTimeKind
{
	[UnmanagedCallersOnly(EntryPoint = "System_DateTimeKind_TypeOf")]
	internal static void* /* System.Type */ System_DateTimeKind_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.DateTimeKind);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_DayOfWeek
{
	[UnmanagedCallersOnly(EntryPoint = "System_DayOfWeek_TypeOf")]
	internal static void* /* System.Type */ System_DayOfWeek_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.DayOfWeek);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Globalization_DateTimeStyles
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeStyles_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_DateTimeStyles_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.DateTimeStyles);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}



internal unsafe class System_DateOnly
{
	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_FromDayNumber")]
	internal static void* /* System.DateOnly */ System_DateOnly_FromDayNumber(int /* System.Int32 */ dayNumber, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.FromDayNumber(dayNumber);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_AddDays")]
	internal static void* /* System.DateOnly */ System_DateOnly_AddDays(void* /* System.DateOnly */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.DateOnly __returnValue = __selfConverted.AddDays(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_AddMonths")]
	internal static void* /* System.DateOnly */ System_DateOnly_AddMonths(void* /* System.DateOnly */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.DateOnly __returnValue = __selfConverted.AddMonths(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_AddYears")]
	internal static void* /* System.DateOnly */ System_DateOnly_AddYears(void* /* System.DateOnly */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.DateOnly __returnValue = __selfConverted.AddYears(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Deconstruct")]
	internal static void /* System.Void */ System_DateOnly_Deconstruct(void* /* System.DateOnly */ __self, int* /* System.Int32 */ year, int* /* System.Int32 */ month, int* /* System.Int32 */ day, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.Int32 yearConverted;
		System.Int32 monthConverted;
		System.Int32 dayConverted;
	
	    try {
			__selfConverted.Deconstruct(out yearConverted, out monthConverted, out dayConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (year is not null) {
				*year = yearConverted;
			}
	
			if (month is not null) {
				*month = monthConverted;
			}
	
			if (day is not null) {
				*day = dayConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (year is not null) {
				*year = -1;
			}
	
			if (month is not null) {
				*month = -1;
			}
	
			if (day is not null) {
				*day = -1;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToDateTime")]
	internal static void* /* System.DateTime */ System_DateOnly_ToDateTime(void* /* System.DateOnly */ __self, void* /* System.TimeOnly */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.TimeOnly timeConverted = InteropUtils.GetInstance<System.TimeOnly>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToDateTime(timeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToDateTime_1")]
	internal static void* /* System.DateTime */ System_DateOnly_ToDateTime_1(void* /* System.DateOnly */ __self, void* /* System.TimeOnly */ time, System.DateTimeKind /* System.DateTimeKind */ kind, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.TimeOnly timeConverted = InteropUtils.GetInstance<System.TimeOnly>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToDateTime(timeConverted, kind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_FromDateTime")]
	internal static void* /* System.DateOnly */ System_DateOnly_FromDateTime(void* /* System.DateTime */ dateTime, void** /* System.Exception */ __outException)
	{
		System.DateTime dateTimeConverted = InteropUtils.GetInstance<System.DateTime>(dateTime);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.FromDateTime(dateTimeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_CompareTo")]
	internal static int /* System.Int32 */ System_DateOnly_CompareTo(void* /* System.DateOnly */ __self, void* /* System.DateOnly */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.DateOnly valueConverted = InteropUtils.GetInstance<System.DateOnly>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_CompareTo_1")]
	internal static int /* System.Int32 */ System_DateOnly_CompareTo_1(void* /* System.DateOnly */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Equals")]
	internal static byte /* System.Boolean */ System_DateOnly_Equals(void* /* System.DateOnly */ __self, void* /* System.DateOnly */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.DateOnly valueConverted = InteropUtils.GetInstance<System.DateOnly>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Equals_1")]
	internal static byte /* System.Boolean */ System_DateOnly_Equals_1(void* /* System.DateOnly */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_GetHashCode")]
	internal static int /* System.Int32 */ System_DateOnly_GetHashCode(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Parse")]
	internal static void* /* System.DateOnly */ System_DateOnly_Parse(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.Parse(sConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Parse_1")]
	internal static void* /* System.DateOnly */ System_DateOnly_Parse_1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.Parse(sConverted, providerConverted, style);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ParseExact")]
	internal static void* /* System.DateOnly */ System_DateOnly_ParseExact(byte* /* System.String */ s, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.ParseExact(sConverted, formatConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ParseExact_1")]
	internal static void* /* System.DateOnly */ System_DateOnly_ParseExact_1(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.ParseExact(sConverted, formatConverted, providerConverted, style);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ParseExact_2")]
	internal static void* /* System.DateOnly */ System_DateOnly_ParseExact_2(byte* /* System.String */ s, void* /* System.String[] */ formats, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.ParseExact(sConverted, formatsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ParseExact_3")]
	internal static void* /* System.DateOnly */ System_DateOnly_ParseExact_3(byte* /* System.String */ s, void* /* System.String[] */ formats, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.ParseExact(sConverted, formatsConverted, providerConverted, style);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_TryParse")]
	internal static byte /* System.Boolean */ System_DateOnly_TryParse(byte* /* System.String */ s, void** /* System.DateOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.DateOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateOnly.TryParse(sConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_TryParse_1")]
	internal static byte /* System.Boolean */ System_DateOnly_TryParse_1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.DateOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.DateOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateOnly.TryParse(sConverted, providerConverted, style, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_TryParseExact")]
	internal static byte /* System.Boolean */ System_DateOnly_TryParseExact(byte* /* System.String */ s, byte* /* System.String */ format, void** /* System.DateOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.DateOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateOnly.TryParseExact(sConverted, formatConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_TryParseExact_1")]
	internal static byte /* System.Boolean */ System_DateOnly_TryParseExact_1(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.DateOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.DateOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateOnly.TryParseExact(sConverted, formatConverted, providerConverted, style, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_TryParseExact_2")]
	internal static byte /* System.Boolean */ System_DateOnly_TryParseExact_2(byte* /* System.String */ s, void* /* System.String[] */ formats, void** /* System.DateOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.DateOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateOnly.TryParseExact(sConverted, formatsConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_TryParseExact_3")]
	internal static byte /* System.Boolean */ System_DateOnly_TryParseExact_3(byte* /* System.String */ s, void* /* System.String[] */ formats, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.DateOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.DateOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateOnly.TryParseExact(sConverted, formatsConverted, providerConverted, style, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToLongDateString")]
	internal static byte* /* System.String */ System_DateOnly_ToLongDateString(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLongDateString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToShortDateString")]
	internal static byte* /* System.String */ System_DateOnly_ToShortDateString(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToShortDateString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToString")]
	internal static byte* /* System.String */ System_DateOnly_ToString(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToString_1")]
	internal static byte* /* System.String */ System_DateOnly_ToString_1(void* /* System.DateOnly */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToString_2")]
	internal static byte* /* System.String */ System_DateOnly_ToString_2(void* /* System.DateOnly */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_ToString_3")]
	internal static byte* /* System.String */ System_DateOnly_ToString_3(void* /* System.DateOnly */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Parse_2")]
	internal static void* /* System.DateOnly */ System_DateOnly_Parse_2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.Parse(sConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_TryParse_2")]
	internal static byte /* System.Boolean */ System_DateOnly_TryParse_2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.DateOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.DateOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.DateOnly.TryParse(sConverted, providerConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Create")]
	internal static void* /* System.DateOnly */ System_DateOnly_Create(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateOnly __returnValue = new System.DateOnly(year, month, day);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Create_1")]
	internal static void* /* System.DateOnly */ System_DateOnly_Create_1(int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.DateOnly __returnValue = new System.DateOnly(year, month, day, calendarConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_MinValue_Get")]
	internal static void* /* System.DateOnly */ System_DateOnly_MinValue_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.MinValue;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_MaxValue_Get")]
	internal static void* /* System.DateOnly */ System_DateOnly_MaxValue_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateOnly __returnValue = System.DateOnly.MaxValue;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Year_Get")]
	internal static int /* System.Int32 */ System_DateOnly_Year_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Year;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Month_Get")]
	internal static int /* System.Int32 */ System_DateOnly_Month_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Month;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Day_Get")]
	internal static int /* System.Int32 */ System_DateOnly_Day_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Day;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_DayOfWeek_Get")]
	internal static System.DayOfWeek /* System.DayOfWeek */ System_DateOnly_DayOfWeek_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.DayOfWeek __returnValue = __selfConverted.DayOfWeek;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.DayOfWeek);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_DayOfYear_Get")]
	internal static int /* System.Int32 */ System_DateOnly_DayOfYear_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.DayOfYear;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_DayNumber_Get")]
	internal static int /* System.Int32 */ System_DateOnly_DayNumber_Get(void* /* System.DateOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.DateOnly __selfConverted = InteropUtils.GetInstance<System.DateOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.DayNumber;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_TypeOf")]
	internal static void* /* System.Type */ System_DateOnly_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.DateOnly);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_DateOnly_Destroy")]
	internal static void /* System.Void */ System_DateOnly_Destroy(void* /* System.DateOnly */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_TimeOnly
{
	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Add")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Add(void* /* System.TimeOnly */ __self, void* /* System.TimeSpan */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.TimeSpan valueConverted = InteropUtils.GetInstance<System.TimeSpan>(value);
	
	    try {
			System.TimeOnly __returnValue = __selfConverted.Add(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Add_1")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Add_1(void* /* System.TimeOnly */ __self, void* /* System.TimeSpan */ value, int* /* System.Int32 */ wrappedDays, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.TimeSpan valueConverted = InteropUtils.GetInstance<System.TimeSpan>(value);
		System.Int32 wrappedDaysConverted;
	
	    try {
			System.TimeOnly __returnValue = __selfConverted.Add(valueConverted, out wrappedDaysConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (wrappedDays is not null) {
				*wrappedDays = wrappedDaysConverted;
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (wrappedDays is not null) {
				*wrappedDays = -1;
			}
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_AddHours")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_AddHours(void* /* System.TimeOnly */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.TimeOnly __returnValue = __selfConverted.AddHours(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_AddHours_1")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_AddHours_1(void* /* System.TimeOnly */ __self, double /* System.Double */ value, int* /* System.Int32 */ wrappedDays, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.Int32 wrappedDaysConverted;
	
	    try {
			System.TimeOnly __returnValue = __selfConverted.AddHours(value, out wrappedDaysConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (wrappedDays is not null) {
				*wrappedDays = wrappedDaysConverted;
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (wrappedDays is not null) {
				*wrappedDays = -1;
			}
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_AddMinutes")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_AddMinutes(void* /* System.TimeOnly */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.TimeOnly __returnValue = __selfConverted.AddMinutes(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_AddMinutes_1")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_AddMinutes_1(void* /* System.TimeOnly */ __self, double /* System.Double */ value, int* /* System.Int32 */ wrappedDays, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.Int32 wrappedDaysConverted;
	
	    try {
			System.TimeOnly __returnValue = __selfConverted.AddMinutes(value, out wrappedDaysConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (wrappedDays is not null) {
				*wrappedDays = wrappedDaysConverted;
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (wrappedDays is not null) {
				*wrappedDays = -1;
			}
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_IsBetween")]
	internal static byte /* System.Boolean */ System_TimeOnly_IsBetween(void* /* System.TimeOnly */ __self, void* /* System.TimeOnly */ start, void* /* System.TimeOnly */ end, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.TimeOnly startConverted = InteropUtils.GetInstance<System.TimeOnly>(start);
		System.TimeOnly endConverted = InteropUtils.GetInstance<System.TimeOnly>(end);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsBetween(startConverted, endConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Deconstruct")]
	internal static void /* System.Void */ System_TimeOnly_Deconstruct(void* /* System.TimeOnly */ __self, int* /* System.Int32 */ hour, int* /* System.Int32 */ minute, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.Int32 hourConverted;
		System.Int32 minuteConverted;
	
	    try {
			__selfConverted.Deconstruct(out hourConverted, out minuteConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (hour is not null) {
				*hour = hourConverted;
			}
	
			if (minute is not null) {
				*minute = minuteConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (hour is not null) {
				*hour = -1;
			}
	
			if (minute is not null) {
				*minute = -1;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Deconstruct_1")]
	internal static void /* System.Void */ System_TimeOnly_Deconstruct_1(void* /* System.TimeOnly */ __self, int* /* System.Int32 */ hour, int* /* System.Int32 */ minute, int* /* System.Int32 */ second, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.Int32 hourConverted;
		System.Int32 minuteConverted;
		System.Int32 secondConverted;
	
	    try {
			__selfConverted.Deconstruct(out hourConverted, out minuteConverted, out secondConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (hour is not null) {
				*hour = hourConverted;
			}
	
			if (minute is not null) {
				*minute = minuteConverted;
			}
	
			if (second is not null) {
				*second = secondConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (hour is not null) {
				*hour = -1;
			}
	
			if (minute is not null) {
				*minute = -1;
			}
	
			if (second is not null) {
				*second = -1;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Deconstruct_2")]
	internal static void /* System.Void */ System_TimeOnly_Deconstruct_2(void* /* System.TimeOnly */ __self, int* /* System.Int32 */ hour, int* /* System.Int32 */ minute, int* /* System.Int32 */ second, int* /* System.Int32 */ millisecond, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.Int32 hourConverted;
		System.Int32 minuteConverted;
		System.Int32 secondConverted;
		System.Int32 millisecondConverted;
	
	    try {
			__selfConverted.Deconstruct(out hourConverted, out minuteConverted, out secondConverted, out millisecondConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (hour is not null) {
				*hour = hourConverted;
			}
	
			if (minute is not null) {
				*minute = minuteConverted;
			}
	
			if (second is not null) {
				*second = secondConverted;
			}
	
			if (millisecond is not null) {
				*millisecond = millisecondConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (hour is not null) {
				*hour = -1;
			}
	
			if (minute is not null) {
				*minute = -1;
			}
	
			if (second is not null) {
				*second = -1;
			}
	
			if (millisecond is not null) {
				*millisecond = -1;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Deconstruct_3")]
	internal static void /* System.Void */ System_TimeOnly_Deconstruct_3(void* /* System.TimeOnly */ __self, int* /* System.Int32 */ hour, int* /* System.Int32 */ minute, int* /* System.Int32 */ second, int* /* System.Int32 */ millisecond, int* /* System.Int32 */ microsecond, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.Int32 hourConverted;
		System.Int32 minuteConverted;
		System.Int32 secondConverted;
		System.Int32 millisecondConverted;
		System.Int32 microsecondConverted;
	
	    try {
			__selfConverted.Deconstruct(out hourConverted, out minuteConverted, out secondConverted, out millisecondConverted, out microsecondConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (hour is not null) {
				*hour = hourConverted;
			}
	
			if (minute is not null) {
				*minute = minuteConverted;
			}
	
			if (second is not null) {
				*second = secondConverted;
			}
	
			if (millisecond is not null) {
				*millisecond = millisecondConverted;
			}
	
			if (microsecond is not null) {
				*microsecond = microsecondConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (hour is not null) {
				*hour = -1;
			}
	
			if (minute is not null) {
				*minute = -1;
			}
	
			if (second is not null) {
				*second = -1;
			}
	
			if (millisecond is not null) {
				*millisecond = -1;
			}
	
			if (microsecond is not null) {
				*microsecond = -1;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_FromTimeSpan")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_FromTimeSpan(void* /* System.TimeSpan */ timeSpan, void** /* System.Exception */ __outException)
	{
		System.TimeSpan timeSpanConverted = InteropUtils.GetInstance<System.TimeSpan>(timeSpan);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.FromTimeSpan(timeSpanConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_FromDateTime")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_FromDateTime(void* /* System.DateTime */ dateTime, void** /* System.Exception */ __outException)
	{
		System.DateTime dateTimeConverted = InteropUtils.GetInstance<System.DateTime>(dateTime);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.FromDateTime(dateTimeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToTimeSpan")]
	internal static void* /* System.TimeSpan */ System_TimeOnly_ToTimeSpan(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.ToTimeSpan();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_CompareTo")]
	internal static int /* System.Int32 */ System_TimeOnly_CompareTo(void* /* System.TimeOnly */ __self, void* /* System.TimeOnly */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.TimeOnly valueConverted = InteropUtils.GetInstance<System.TimeOnly>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_CompareTo_1")]
	internal static int /* System.Int32 */ System_TimeOnly_CompareTo_1(void* /* System.TimeOnly */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Equals")]
	internal static byte /* System.Boolean */ System_TimeOnly_Equals(void* /* System.TimeOnly */ __self, void* /* System.TimeOnly */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.TimeOnly valueConverted = InteropUtils.GetInstance<System.TimeOnly>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Equals_1")]
	internal static byte /* System.Boolean */ System_TimeOnly_Equals_1(void* /* System.TimeOnly */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_GetHashCode")]
	internal static int /* System.Int32 */ System_TimeOnly_GetHashCode(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Parse")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Parse(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.Parse(sConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Parse_1")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Parse_1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.Parse(sConverted, providerConverted, style);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ParseExact")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_ParseExact(byte* /* System.String */ s, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.ParseExact(sConverted, formatConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ParseExact_1")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_ParseExact_1(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.ParseExact(sConverted, formatConverted, providerConverted, style);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ParseExact_2")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_ParseExact_2(byte* /* System.String */ s, void* /* System.String[] */ formats, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.ParseExact(sConverted, formatsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ParseExact_3")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_ParseExact_3(byte* /* System.String */ s, void* /* System.String[] */ formats, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.ParseExact(sConverted, formatsConverted, providerConverted, style);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_TryParse")]
	internal static byte /* System.Boolean */ System_TimeOnly_TryParse(byte* /* System.String */ s, void** /* System.TimeOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.TimeOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeOnly.TryParse(sConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_TryParse_1")]
	internal static byte /* System.Boolean */ System_TimeOnly_TryParse_1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.TimeOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.TimeOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeOnly.TryParse(sConverted, providerConverted, style, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_TryParseExact")]
	internal static byte /* System.Boolean */ System_TimeOnly_TryParseExact(byte* /* System.String */ s, byte* /* System.String */ format, void** /* System.TimeOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.TimeOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeOnly.TryParseExact(sConverted, formatConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_TryParseExact_1")]
	internal static byte /* System.Boolean */ System_TimeOnly_TryParseExact_1(byte* /* System.String */ s, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.TimeOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.TimeOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeOnly.TryParseExact(sConverted, formatConverted, providerConverted, style, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_TryParseExact_2")]
	internal static byte /* System.Boolean */ System_TimeOnly_TryParseExact_2(byte* /* System.String */ s, void* /* System.String[] */ formats, void** /* System.TimeOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.TimeOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeOnly.TryParseExact(sConverted, formatsConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_TryParseExact_3")]
	internal static byte /* System.Boolean */ System_TimeOnly_TryParseExact_3(byte* /* System.String */ s, void* /* System.String[] */ formats, void* /* System.IFormatProvider */ provider, System.Globalization.DateTimeStyles /* System.Globalization.DateTimeStyles */ style, void** /* System.TimeOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.String[] formatsConverted = InteropUtils.GetInstance<System.String[]>(formats);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.TimeOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeOnly.TryParseExact(sConverted, formatsConverted, providerConverted, style, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToLongTimeString")]
	internal static byte* /* System.String */ System_TimeOnly_ToLongTimeString(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToLongTimeString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToShortTimeString")]
	internal static byte* /* System.String */ System_TimeOnly_ToShortTimeString(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToShortTimeString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToString")]
	internal static byte* /* System.String */ System_TimeOnly_ToString(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToString_1")]
	internal static byte* /* System.String */ System_TimeOnly_ToString_1(void* /* System.TimeOnly */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToString_2")]
	internal static byte* /* System.String */ System_TimeOnly_ToString_2(void* /* System.TimeOnly */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_ToString_3")]
	internal static byte* /* System.String */ System_TimeOnly_ToString_3(void* /* System.TimeOnly */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Parse_2")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Parse_2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.Parse(sConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_TryParse_2")]
	internal static byte /* System.Boolean */ System_TimeOnly_TryParse_2(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.TimeOnly */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.TimeOnly resultConverted;
	
	    try {
			System.Boolean __returnValue = System.TimeOnly.TryParse(sConverted, providerConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Create")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Create(int /* System.Int32 */ hour, int /* System.Int32 */ minute, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = new System.TimeOnly(hour, minute);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Create_1")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Create_1(int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = new System.TimeOnly(hour, minute, second);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Create_2")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Create_2(int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = new System.TimeOnly(hour, minute, second, millisecond);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Create_3")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Create_3(int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ microsecond, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = new System.TimeOnly(hour, minute, second, millisecond, microsecond);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Create_4")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_Create_4(long /* System.Int64 */ ticks, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = new System.TimeOnly(ticks);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_MinValue_Get")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_MinValue_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.MinValue;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_MaxValue_Get")]
	internal static void* /* System.TimeOnly */ System_TimeOnly_MaxValue_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeOnly __returnValue = System.TimeOnly.MaxValue;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Hour_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Hour_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Hour;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Minute_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Minute_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Minute;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Second_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Second_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Second;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Millisecond_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Millisecond_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Millisecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Microsecond_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Microsecond_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Microsecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Nanosecond_Get")]
	internal static int /* System.Int32 */ System_TimeOnly_Nanosecond_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Nanosecond;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Ticks_Get")]
	internal static long /* System.Int64 */ System_TimeOnly_Ticks_Get(void* /* System.TimeOnly */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.TimeOnly __selfConverted = InteropUtils.GetInstance<System.TimeOnly>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Ticks;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_TypeOf")]
	internal static void* /* System.Type */ System_TimeOnly_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.TimeOnly);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_TimeOnly_Destroy")]
	internal static void /* System.Void */ System_TimeOnly_Destroy(void* /* System.TimeOnly */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Globalization_Calendar
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_Clone")]
	internal static void* /* System.Object */ System_Globalization_Calendar_Clone(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_ReadOnly")]
	internal static void* /* System.Globalization.Calendar */ System_Globalization_Calendar_ReadOnly(void* /* System.Globalization.Calendar */ calendar, void** /* System.Exception */ __outException)
	{
		System.Globalization.Calendar calendarConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(calendar);
	
	    try {
			System.Globalization.Calendar __returnValue = System.Globalization.Calendar.ReadOnly(calendarConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddMilliseconds")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddMilliseconds(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, double /* System.Double */ milliseconds, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMilliseconds(timeConverted, milliseconds);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddDays")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddDays(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ days, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddDays(timeConverted, days);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddHours")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddHours(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ hours, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddHours(timeConverted, hours);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddMinutes")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddMinutes(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ minutes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMinutes(timeConverted, minutes);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddMonths")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddMonths(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ months, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddMonths(timeConverted, months);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddSeconds")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddSeconds(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ seconds, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddSeconds(timeConverted, seconds);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddWeeks")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddWeeks(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ weeks, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddWeeks(timeConverted, weeks);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AddYears")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_AddYears(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, int /* System.Int32 */ years, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DateTime __returnValue = __selfConverted.AddYears(timeConverted, years);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDayOfMonth")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDayOfMonth(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDayOfMonth(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDayOfWeek")]
	internal static System.DayOfWeek /* System.DayOfWeek */ System_Globalization_Calendar_GetDayOfWeek(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.DayOfWeek __returnValue = __selfConverted.GetDayOfWeek(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.DayOfWeek);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDayOfYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDayOfYear(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDayOfYear(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDaysInMonth")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDaysInMonth(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDaysInMonth(year, month);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDaysInMonth_1")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDaysInMonth_1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDaysInMonth(year, month, era);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDaysInYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDaysInYear(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDaysInYear(year);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetDaysInYear_1")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetDaysInYear_1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetDaysInYear(year, era);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetEra")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetEra(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetEra(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetHour")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetHour(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHour(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetMilliseconds")]
	internal static double /* System.Double */ System_Globalization_Calendar_GetMilliseconds(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Double __returnValue = __selfConverted.GetMilliseconds(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetMinute")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetMinute(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMinute(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetMonth")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetMonth(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMonth(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetMonthsInYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetMonthsInYear(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMonthsInYear(year);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetMonthsInYear_1")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetMonthsInYear_1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMonthsInYear(year, era);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetSecond")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetSecond(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetSecond(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetWeekOfYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetWeekOfYear(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, System.Globalization.CalendarWeekRule /* System.Globalization.CalendarWeekRule */ rule, System.DayOfWeek /* System.DayOfWeek */ firstDayOfWeek, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetWeekOfYear(timeConverted, rule, firstDayOfWeek);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetYear(void* /* System.Globalization.Calendar */ __self, void* /* System.DateTime */ time, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
		System.DateTime timeConverted = InteropUtils.GetInstance<System.DateTime>(time);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetYear(timeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapDay")]
	internal static byte /* System.Boolean */ System_Globalization_Calendar_IsLeapDay(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapDay(year, month, day);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapDay_1")]
	internal static byte /* System.Boolean */ System_Globalization_Calendar_IsLeapDay_1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapDay(year, month, day, era);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapMonth")]
	internal static byte /* System.Boolean */ System_Globalization_Calendar_IsLeapMonth(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapMonth(year, month);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapMonth_1")]
	internal static byte /* System.Boolean */ System_Globalization_Calendar_IsLeapMonth_1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapMonth(year, month, era);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetLeapMonth")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetLeapMonth(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetLeapMonth(year);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_GetLeapMonth_1")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_GetLeapMonth_1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetLeapMonth(year, era);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapYear")]
	internal static byte /* System.Boolean */ System_Globalization_Calendar_IsLeapYear(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapYear(year);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsLeapYear_1")]
	internal static byte /* System.Boolean */ System_Globalization_Calendar_IsLeapYear_1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLeapYear(year, era);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_ToDateTime")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_ToDateTime(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToDateTime(year, month, day, hour, minute, second, millisecond);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_ToDateTime_1")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_ToDateTime_1(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, int /* System.Int32 */ month, int /* System.Int32 */ day, int /* System.Int32 */ hour, int /* System.Int32 */ minute, int /* System.Int32 */ second, int /* System.Int32 */ millisecond, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToDateTime(year, month, day, hour, minute, second, millisecond, era);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_ToFourDigitYear")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_ToFourDigitYear(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ year, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ToFourDigitYear(year);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_MinSupportedDateTime_Get")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_MinSupportedDateTime_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.MinSupportedDateTime;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_MaxSupportedDateTime_Get")]
	internal static void* /* System.DateTime */ System_Globalization_Calendar_MaxSupportedDateTime_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.MaxSupportedDateTime;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_AlgorithmType_Get")]
	internal static System.Globalization.CalendarAlgorithmType /* System.Globalization.CalendarAlgorithmType */ System_Globalization_Calendar_AlgorithmType_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Globalization.CalendarAlgorithmType __returnValue = __selfConverted.AlgorithmType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Globalization.CalendarAlgorithmType);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Globalization_Calendar_IsReadOnly_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_Eras_Get")]
	internal static void* /* System.Int32[] */ System_Globalization_Calendar_Eras_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32[] __returnValue = __selfConverted.Eras;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_TwoDigitYearMax_Get")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_TwoDigitYearMax_Get(void* /* System.Globalization.Calendar */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.TwoDigitYearMax;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_TwoDigitYearMax_Set")]
	internal static void /* System.Void */ System_Globalization_Calendar_TwoDigitYearMax_Set(void* /* System.Globalization.Calendar */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.Calendar __selfConverted = InteropUtils.GetInstance<System.Globalization.Calendar>(__self);
	
	
	    try {
			__selfConverted.TwoDigitYearMax = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_CurrentEra_Get")]
	internal static int /* System.Int32 */ System_Globalization_Calendar_CurrentEra_Get()
	{
	
		System.Int32 __returnValue = System.Globalization.Calendar.CurrentEra;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_Calendar_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.Calendar);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_Calendar_Destroy")]
	internal static void /* System.Void */ System_Globalization_Calendar_Destroy(void* /* System.Globalization.Calendar */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Globalization_CalendarAlgorithmType
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CalendarAlgorithmType_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_CalendarAlgorithmType_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.CalendarAlgorithmType);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Globalization_CalendarWeekRule
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CalendarWeekRule_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_CalendarWeekRule_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.CalendarWeekRule);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Runtime_Serialization_IFormatterConverter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_Convert")]
	internal static void* /* System.Object */ System_Runtime_Serialization_IFormatterConverter_Convert(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.Object __returnValue = __selfConverted.Convert(valueConverted, typeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_Convert_1")]
	internal static void* /* System.Object */ System_Runtime_Serialization_IFormatterConverter_Convert_1(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, System.TypeCode /* System.TypeCode */ typeCode, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Object __returnValue = __selfConverted.Convert(valueConverted, typeCode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToBoolean")]
	internal static byte /* System.Boolean */ System_Runtime_Serialization_IFormatterConverter_ToBoolean(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.ToBoolean(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToChar")]
	internal static char /* System.Char */ System_Runtime_Serialization_IFormatterConverter_ToChar(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Char __returnValue = __selfConverted.ToChar(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToSByte")]
	internal static sbyte /* System.SByte */ System_Runtime_Serialization_IFormatterConverter_ToSByte(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.SByte __returnValue = __selfConverted.ToSByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToByte")]
	internal static byte /* System.Byte */ System_Runtime_Serialization_IFormatterConverter_ToByte(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Byte __returnValue = __selfConverted.ToByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToInt16")]
	internal static short /* System.Int16 */ System_Runtime_Serialization_IFormatterConverter_ToInt16(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int16 __returnValue = __selfConverted.ToInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToUInt16")]
	internal static ushort /* System.UInt16 */ System_Runtime_Serialization_IFormatterConverter_ToUInt16(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.UInt16 __returnValue = __selfConverted.ToUInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToInt32")]
	internal static int /* System.Int32 */ System_Runtime_Serialization_IFormatterConverter_ToInt32(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.ToInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToUInt32")]
	internal static uint /* System.UInt32 */ System_Runtime_Serialization_IFormatterConverter_ToUInt32(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.UInt32 __returnValue = __selfConverted.ToUInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToInt64")]
	internal static long /* System.Int64 */ System_Runtime_Serialization_IFormatterConverter_ToInt64(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int64 __returnValue = __selfConverted.ToInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToUInt64")]
	internal static ulong /* System.UInt64 */ System_Runtime_Serialization_IFormatterConverter_ToUInt64(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.UInt64 __returnValue = __selfConverted.ToUInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToSingle")]
	internal static float /* System.Single */ System_Runtime_Serialization_IFormatterConverter_ToSingle(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Single __returnValue = __selfConverted.ToSingle(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToDouble")]
	internal static double /* System.Double */ System_Runtime_Serialization_IFormatterConverter_ToDouble(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Double __returnValue = __selfConverted.ToDouble(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToDecimal")]
	internal static void* /* System.Decimal */ System_Runtime_Serialization_IFormatterConverter_ToDecimal(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Decimal __returnValue = __selfConverted.ToDecimal(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToDateTime")]
	internal static void* /* System.DateTime */ System_Runtime_Serialization_IFormatterConverter_ToDateTime(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.DateTime __returnValue = __selfConverted.ToDateTime(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_ToString")]
	internal static byte* /* System.String */ System_Runtime_Serialization_IFormatterConverter_ToString(void* /* System.Runtime.Serialization.IFormatterConverter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.IFormatterConverter __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.IFormatterConverter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_Serialization_IFormatterConverter_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.Serialization.IFormatterConverter);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_IFormatterConverter_Destroy")]
	internal static void /* System.Void */ System_Runtime_Serialization_IFormatterConverter_Destroy(void* /* System.Runtime.Serialization.IFormatterConverter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_Serialization_StreamingContext
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_Equals")]
	internal static byte /* System.Boolean */ System_Runtime_Serialization_StreamingContext_Equals(void* /* System.Runtime.Serialization.StreamingContext */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.StreamingContext __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_GetHashCode")]
	internal static int /* System.Int32 */ System_Runtime_Serialization_StreamingContext_GetHashCode(void* /* System.Runtime.Serialization.StreamingContext */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.StreamingContext __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_Create")]
	internal static void* /* System.Runtime.Serialization.StreamingContext */ System_Runtime_Serialization_StreamingContext_Create(System.Runtime.Serialization.StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */ state, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.Serialization.StreamingContext __returnValue = new System.Runtime.Serialization.StreamingContext(state);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_Create_1")]
	internal static void* /* System.Runtime.Serialization.StreamingContext */ System_Runtime_Serialization_StreamingContext_Create_1(System.Runtime.Serialization.StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */ state, void* /* System.Object */ additional, void** /* System.Exception */ __outException)
	{
		System.Object additionalConverted = InteropUtils.GetInstance<System.Object>(additional);
	
	    try {
			System.Runtime.Serialization.StreamingContext __returnValue = new System.Runtime.Serialization.StreamingContext(state, additionalConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_State_Get")]
	internal static System.Runtime.Serialization.StreamingContextStates /* System.Runtime.Serialization.StreamingContextStates */ System_Runtime_Serialization_StreamingContext_State_Get(void* /* System.Runtime.Serialization.StreamingContext */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.StreamingContext __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(__self);
	
	
	    try {
			System.Runtime.Serialization.StreamingContextStates __returnValue = __selfConverted.State;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Runtime.Serialization.StreamingContextStates);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_Context_Get")]
	internal static void* /* System.Object */ System_Runtime_Serialization_StreamingContext_Context_Get(void* /* System.Runtime.Serialization.StreamingContext */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Serialization.StreamingContext __selfConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Context;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_Serialization_StreamingContext_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.Serialization.StreamingContext);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContext_Destroy")]
	internal static void /* System.Void */ System_Runtime_Serialization_StreamingContext_Destroy(void* /* System.Runtime.Serialization.StreamingContext */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_Serialization_StreamingContextStates
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Serialization_StreamingContextStates_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_Serialization_StreamingContextStates_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.Serialization.StreamingContextStates);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}




// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
internal unsafe class System_RuntimeTypeHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_FromIntPtr")]
	internal static void* /* System.RuntimeTypeHandle */ System_RuntimeTypeHandle_FromIntPtr(nint /* System.IntPtr */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.RuntimeTypeHandle __returnValue = System.RuntimeTypeHandle.FromIntPtr(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_ToIntPtr")]
	internal static nint /* System.IntPtr */ System_RuntimeTypeHandle_ToIntPtr(void* /* System.RuntimeTypeHandle */ value, void** /* System.Exception */ __outException)
	{
		System.RuntimeTypeHandle valueConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(value);
	
	    try {
			System.IntPtr __returnValue = System.RuntimeTypeHandle.ToIntPtr(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_GetHashCode")]
	internal static int /* System.Int32 */ System_RuntimeTypeHandle_GetHashCode(void* /* System.RuntimeTypeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_Equals")]
	internal static byte /* System.Boolean */ System_RuntimeTypeHandle_Equals(void* /* System.RuntimeTypeHandle */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_Equals_1")]
	internal static byte /* System.Boolean */ System_RuntimeTypeHandle_Equals_1(void* /* System.RuntimeTypeHandle */ __self, void* /* System.RuntimeTypeHandle */ handle, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
		System.RuntimeTypeHandle handleConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(handle);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(handleConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_GetModuleHandle")]
	internal static void* /* System.ModuleHandle */ System_RuntimeTypeHandle_GetModuleHandle(void* /* System.RuntimeTypeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
	
	    try {
			System.ModuleHandle __returnValue = __selfConverted.GetModuleHandle();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_GetObjectData")]
	internal static void /* System.Void */ System_RuntimeTypeHandle_GetObjectData(void* /* System.RuntimeTypeHandle */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_Value_Get")]
	internal static nint /* System.IntPtr */ System_RuntimeTypeHandle_Value_Get(void* /* System.RuntimeTypeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeTypeHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.Value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_TypeOf")]
	internal static void* /* System.Type */ System_RuntimeTypeHandle_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.RuntimeTypeHandle);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeTypeHandle_Destroy")]
	internal static void /* System.Void */ System_RuntimeTypeHandle_Destroy(void* /* System.RuntimeTypeHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_ModuleHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_GetHashCode")]
	internal static int /* System.Int32 */ System_ModuleHandle_GetHashCode(void* /* System.ModuleHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_Equals")]
	internal static byte /* System.Boolean */ System_ModuleHandle_Equals(void* /* System.ModuleHandle */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_Equals_1")]
	internal static byte /* System.Boolean */ System_ModuleHandle_Equals_1(void* /* System.ModuleHandle */ __self, void* /* System.ModuleHandle */ handle, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
		System.ModuleHandle handleConverted = InteropUtils.GetInstance<System.ModuleHandle>(handle);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(handleConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_GetRuntimeTypeHandleFromMetadataToken")]
	internal static void* /* System.RuntimeTypeHandle */ System_ModuleHandle_GetRuntimeTypeHandleFromMetadataToken(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ typeToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeTypeHandle __returnValue = __selfConverted.GetRuntimeTypeHandleFromMetadataToken(typeToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_ResolveTypeHandle")]
	internal static void* /* System.RuntimeTypeHandle */ System_ModuleHandle_ResolveTypeHandle(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ typeToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeTypeHandle __returnValue = __selfConverted.ResolveTypeHandle(typeToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_ResolveTypeHandle_1")]
	internal static void* /* System.RuntimeTypeHandle */ System_ModuleHandle_ResolveTypeHandle_1(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ typeToken, void* /* System.RuntimeTypeHandle[] */ typeInstantiationContext, void* /* System.RuntimeTypeHandle[] */ methodInstantiationContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
		System.RuntimeTypeHandle[] typeInstantiationContextConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle[]>(typeInstantiationContext);
		System.RuntimeTypeHandle[] methodInstantiationContextConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle[]>(methodInstantiationContext);
	
	    try {
			System.RuntimeTypeHandle __returnValue = __selfConverted.ResolveTypeHandle(typeToken, typeInstantiationContextConverted, methodInstantiationContextConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_GetRuntimeMethodHandleFromMetadataToken")]
	internal static void* /* System.RuntimeMethodHandle */ System_ModuleHandle_GetRuntimeMethodHandleFromMetadataToken(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ methodToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeMethodHandle __returnValue = __selfConverted.GetRuntimeMethodHandleFromMetadataToken(methodToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_ResolveMethodHandle")]
	internal static void* /* System.RuntimeMethodHandle */ System_ModuleHandle_ResolveMethodHandle(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ methodToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeMethodHandle __returnValue = __selfConverted.ResolveMethodHandle(methodToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_ResolveMethodHandle_1")]
	internal static void* /* System.RuntimeMethodHandle */ System_ModuleHandle_ResolveMethodHandle_1(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ methodToken, void* /* System.RuntimeTypeHandle[] */ typeInstantiationContext, void* /* System.RuntimeTypeHandle[] */ methodInstantiationContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
		System.RuntimeTypeHandle[] typeInstantiationContextConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle[]>(typeInstantiationContext);
		System.RuntimeTypeHandle[] methodInstantiationContextConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle[]>(methodInstantiationContext);
	
	    try {
			System.RuntimeMethodHandle __returnValue = __selfConverted.ResolveMethodHandle(methodToken, typeInstantiationContextConverted, methodInstantiationContextConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_GetRuntimeFieldHandleFromMetadataToken")]
	internal static void* /* System.RuntimeFieldHandle */ System_ModuleHandle_GetRuntimeFieldHandleFromMetadataToken(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ fieldToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeFieldHandle __returnValue = __selfConverted.GetRuntimeFieldHandleFromMetadataToken(fieldToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_ResolveFieldHandle")]
	internal static void* /* System.RuntimeFieldHandle */ System_ModuleHandle_ResolveFieldHandle(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ fieldToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.RuntimeFieldHandle __returnValue = __selfConverted.ResolveFieldHandle(fieldToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_ResolveFieldHandle_1")]
	internal static void* /* System.RuntimeFieldHandle */ System_ModuleHandle_ResolveFieldHandle_1(void* /* System.ModuleHandle */ __self, int /* System.Int32 */ fieldToken, void* /* System.RuntimeTypeHandle[] */ typeInstantiationContext, void* /* System.RuntimeTypeHandle[] */ methodInstantiationContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
		System.RuntimeTypeHandle[] typeInstantiationContextConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle[]>(typeInstantiationContext);
		System.RuntimeTypeHandle[] methodInstantiationContextConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle[]>(methodInstantiationContext);
	
	    try {
			System.RuntimeFieldHandle __returnValue = __selfConverted.ResolveFieldHandle(fieldToken, typeInstantiationContextConverted, methodInstantiationContextConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_MDStreamVersion_Get")]
	internal static int /* System.Int32 */ System_ModuleHandle_MDStreamVersion_Get(void* /* System.ModuleHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ModuleHandle __selfConverted = InteropUtils.GetInstance<System.ModuleHandle>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MDStreamVersion;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_EmptyHandle_Get")]
	internal static void* /* System.ModuleHandle */ System_ModuleHandle_EmptyHandle_Get()
	{
	
		System.ModuleHandle __returnValue = System.ModuleHandle.EmptyHandle;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_TypeOf")]
	internal static void* /* System.Type */ System_ModuleHandle_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.ModuleHandle);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ModuleHandle_Destroy")]
	internal static void /* System.Void */ System_ModuleHandle_Destroy(void* /* System.ModuleHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_RuntimeFieldHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_GetHashCode")]
	internal static int /* System.Int32 */ System_RuntimeFieldHandle_GetHashCode(void* /* System.RuntimeFieldHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeFieldHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_Equals")]
	internal static byte /* System.Boolean */ System_RuntimeFieldHandle_Equals(void* /* System.RuntimeFieldHandle */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeFieldHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_Equals_1")]
	internal static byte /* System.Boolean */ System_RuntimeFieldHandle_Equals_1(void* /* System.RuntimeFieldHandle */ __self, void* /* System.RuntimeFieldHandle */ handle, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeFieldHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(__self);
	
		System.RuntimeFieldHandle handleConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(handle);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(handleConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_FromIntPtr")]
	internal static void* /* System.RuntimeFieldHandle */ System_RuntimeFieldHandle_FromIntPtr(nint /* System.IntPtr */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.RuntimeFieldHandle __returnValue = System.RuntimeFieldHandle.FromIntPtr(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_ToIntPtr")]
	internal static nint /* System.IntPtr */ System_RuntimeFieldHandle_ToIntPtr(void* /* System.RuntimeFieldHandle */ value, void** /* System.Exception */ __outException)
	{
		System.RuntimeFieldHandle valueConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(value);
	
	    try {
			System.IntPtr __returnValue = System.RuntimeFieldHandle.ToIntPtr(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_GetObjectData")]
	internal static void /* System.Void */ System_RuntimeFieldHandle_GetObjectData(void* /* System.RuntimeFieldHandle */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeFieldHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_Value_Get")]
	internal static nint /* System.IntPtr */ System_RuntimeFieldHandle_Value_Get(void* /* System.RuntimeFieldHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.RuntimeFieldHandle __selfConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.Value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_TypeOf")]
	internal static void* /* System.Type */ System_RuntimeFieldHandle_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.RuntimeFieldHandle);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_RuntimeFieldHandle_Destroy")]
	internal static void /* System.Void */ System_RuntimeFieldHandle_Destroy(void* /* System.RuntimeFieldHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Reflection_ParameterInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsDefined")]
	internal static byte /* System.Boolean */ System_Reflection_ParameterInfo_IsDefined(void* /* System.Reflection.ParameterInfo */ __self, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefined(attributeTypeConverted, inheritConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_GetCustomAttributes")]
	internal static void* /* System.Object[] */ System_Reflection_ParameterInfo_GetCustomAttributes(void* /* System.Reflection.ParameterInfo */ __self, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Object[] __returnValue = __selfConverted.GetCustomAttributes(inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_GetCustomAttributes_1")]
	internal static void* /* System.Object[] */ System_Reflection_ParameterInfo_GetCustomAttributes_1(void* /* System.Reflection.ParameterInfo */ __self, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Object[] __returnValue = __selfConverted.GetCustomAttributes(attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_GetModifiedParameterType")]
	internal static void* /* System.Type */ System_Reflection_ParameterInfo_GetModifiedParameterType(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetModifiedParameterType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_GetOptionalCustomModifiers")]
	internal static void* /* System.Type[] */ System_Reflection_ParameterInfo_GetOptionalCustomModifiers(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetOptionalCustomModifiers();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_GetRequiredCustomModifiers")]
	internal static void* /* System.Type[] */ System_Reflection_ParameterInfo_GetRequiredCustomModifiers(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetRequiredCustomModifiers();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_GetRealObject")]
	internal static void* /* System.Object */ System_Reflection_ParameterInfo_GetRealObject(void* /* System.Reflection.ParameterInfo */ __self, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			System.Object __returnValue = __selfConverted.GetRealObject(contextConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_ToString")]
	internal static byte* /* System.String */ System_Reflection_ParameterInfo_ToString(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_Attributes_Get")]
	internal static System.Reflection.ParameterAttributes /* System.Reflection.ParameterAttributes */ System_Reflection_ParameterInfo_Attributes_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Reflection.ParameterAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.ParameterAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_Member_Get")]
	internal static void* /* System.Reflection.MemberInfo */ System_Reflection_ParameterInfo_Member_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Reflection.MemberInfo __returnValue = __selfConverted.Member;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_Name_Get")]
	internal static byte* /* System.String */ System_Reflection_ParameterInfo_Name_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_ParameterType_Get")]
	internal static void* /* System.Type */ System_Reflection_ParameterInfo_ParameterType_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ParameterType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_Position_Get")]
	internal static int /* System.Int32 */ System_Reflection_ParameterInfo_Position_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Position;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsIn_Get")]
	internal static byte /* System.Boolean */ System_Reflection_ParameterInfo_IsIn_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsIn;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsLcid_Get")]
	internal static byte /* System.Boolean */ System_Reflection_ParameterInfo_IsLcid_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLcid;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsOptional_Get")]
	internal static byte /* System.Boolean */ System_Reflection_ParameterInfo_IsOptional_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsOptional;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsOut_Get")]
	internal static byte /* System.Boolean */ System_Reflection_ParameterInfo_IsOut_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsOut;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_IsRetval_Get")]
	internal static byte /* System.Boolean */ System_Reflection_ParameterInfo_IsRetval_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsRetval;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_DefaultValue_Get")]
	internal static void* /* System.Object */ System_Reflection_ParameterInfo_DefaultValue_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.DefaultValue;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_RawDefaultValue_Get")]
	internal static void* /* System.Object */ System_Reflection_ParameterInfo_RawDefaultValue_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.RawDefaultValue;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_HasDefaultValue_Get")]
	internal static byte /* System.Boolean */ System_Reflection_ParameterInfo_HasDefaultValue_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.HasDefaultValue;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_MetadataToken_Get")]
	internal static int /* System.Int32 */ System_Reflection_ParameterInfo_MetadataToken_Get(void* /* System.Reflection.ParameterInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ParameterInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MetadataToken;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_ParameterInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.ParameterInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_ParameterInfo_Destroy(void* /* System.Reflection.ParameterInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_ParameterAttributes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterAttributes_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_ParameterAttributes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.ParameterAttributes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}







internal unsafe class System_Reflection_MethodAttributes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodAttributes_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_MethodAttributes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.MethodAttributes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Reflection_MethodImplAttributes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodImplAttributes_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_MethodImplAttributes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.MethodImplAttributes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Reflection_MethodBody
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBody_GetILAsByteArray")]
	internal static void* /* System.Byte[] */ System_Reflection_MethodBody_GetILAsByteArray(void* /* System.Reflection.MethodBody */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBody __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBody>(__self);
	
	
	    try {
			System.Byte[] __returnValue = __selfConverted.GetILAsByteArray();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBody_LocalSignatureMetadataToken_Get")]
	internal static int /* System.Int32 */ System_Reflection_MethodBody_LocalSignatureMetadataToken_Get(void* /* System.Reflection.MethodBody */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBody __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBody>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LocalSignatureMetadataToken;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBody_MaxStackSize_Get")]
	internal static int /* System.Int32 */ System_Reflection_MethodBody_MaxStackSize_Get(void* /* System.Reflection.MethodBody */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBody __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBody>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MaxStackSize;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBody_InitLocals_Get")]
	internal static byte /* System.Boolean */ System_Reflection_MethodBody_InitLocals_Get(void* /* System.Reflection.MethodBody */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodBody __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodBody>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.InitLocals;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBody_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_MethodBody_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.MethodBody);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodBody_Destroy")]
	internal static void /* System.Void */ System_Reflection_MethodBody_Destroy(void* /* System.Reflection.MethodBody */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_CallingConventions
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_CallingConventions_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_CallingConventions_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.CallingConventions);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Reflection_BindingFlags
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_BindingFlags_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_BindingFlags_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.BindingFlags);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Reflection_Binder
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Binder_BindToField")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_Binder_BindToField(void* /* System.Reflection.Binder */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.FieldInfo[] */ match, void* /* System.Object */ value, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Binder __selfConverted = InteropUtils.GetInstance<System.Reflection.Binder>(__self);
	
		System.Reflection.FieldInfo[] matchConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo[]>(match);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.BindToField(bindingAttr, matchConverted, valueConverted, cultureConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Binder_BindToMethod")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_Binder_BindToMethod(void* /* System.Reflection.Binder */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.MethodBase[] */ match, void** /* System.Object[] */ args, void* /* System.Reflection.ParameterModifier[] */ modifiers, void* /* System.Globalization.CultureInfo */ culture, void* /* System.String[] */ names, void** /* System.Object */ state, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Binder __selfConverted = InteropUtils.GetInstance<System.Reflection.Binder>(__self);
	
		System.Reflection.MethodBase[] matchConverted = InteropUtils.GetInstance<System.Reflection.MethodBase[]>(match);
		System.Object[] argsConverted;
	
		if (args is not null) {
			argsConverted = InteropUtils.GetInstance<System.Object[]>((*args));
		} else {
			argsConverted = default(System.Object[]);
		}
	
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
		System.String[] namesConverted = InteropUtils.GetInstance<System.String[]>(names);
		System.Object stateConverted;
	
	    try {
			System.Reflection.MethodBase __returnValue = __selfConverted.BindToMethod(bindingAttr, matchConverted, ref argsConverted, modifiersConverted, cultureConverted, namesConverted, out stateConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (args is not null) {
				*args = argsConverted.AllocateGCHandleAndGetAddress();
			}
	
			if (state is not null) {
				*state = stateConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (state is not null) {
				*state = null;
			}
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Binder_ChangeType")]
	internal static void* /* System.Object */ System_Reflection_Binder_ChangeType(void* /* System.Reflection.Binder */ __self, void* /* System.Object */ value, void* /* System.Type */ type, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Binder __selfConverted = InteropUtils.GetInstance<System.Reflection.Binder>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Object __returnValue = __selfConverted.ChangeType(valueConverted, typeConverted, cultureConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Binder_ReorderArgumentArray")]
	internal static void /* System.Void */ System_Reflection_Binder_ReorderArgumentArray(void* /* System.Reflection.Binder */ __self, void** /* System.Object[] */ args, void* /* System.Object */ state, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Binder __selfConverted = InteropUtils.GetInstance<System.Reflection.Binder>(__self);
	
		System.Object[] argsConverted;
	
		if (args is not null) {
			argsConverted = InteropUtils.GetInstance<System.Object[]>((*args));
		} else {
			argsConverted = default(System.Object[]);
		}
	
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
	
	    try {
			__selfConverted.ReorderArgumentArray(ref argsConverted, stateConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (args is not null) {
				*args = argsConverted.AllocateGCHandleAndGetAddress();
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Binder_SelectMethod")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_Binder_SelectMethod(void* /* System.Reflection.Binder */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.MethodBase[] */ match, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Binder __selfConverted = InteropUtils.GetInstance<System.Reflection.Binder>(__self);
	
		System.Reflection.MethodBase[] matchConverted = InteropUtils.GetInstance<System.Reflection.MethodBase[]>(match);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.MethodBase __returnValue = __selfConverted.SelectMethod(bindingAttr, matchConverted, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Binder_SelectProperty")]
	internal static void* /* System.Reflection.PropertyInfo */ System_Reflection_Binder_SelectProperty(void* /* System.Reflection.Binder */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.PropertyInfo[] */ match, void* /* System.Type */ returnType, void* /* System.Type[] */ indexes, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Binder __selfConverted = InteropUtils.GetInstance<System.Reflection.Binder>(__self);
	
		System.Reflection.PropertyInfo[] matchConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo[]>(match);
		System.Type returnTypeConverted = InteropUtils.GetInstance<System.Type>(returnType);
		System.Type[] indexesConverted = InteropUtils.GetInstance<System.Type[]>(indexes);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.PropertyInfo __returnValue = __selfConverted.SelectProperty(bindingAttr, matchConverted, returnTypeConverted, indexesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Binder_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_Binder_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.Binder);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Binder_Destroy")]
	internal static void /* System.Void */ System_Reflection_Binder_Destroy(void* /* System.Reflection.Binder */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_FieldInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetFieldFromHandle")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_FieldInfo_GetFieldFromHandle(void* /* System.RuntimeFieldHandle */ handle, void** /* System.Exception */ __outException)
	{
		System.RuntimeFieldHandle handleConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(handle);
	
	    try {
			System.Reflection.FieldInfo __returnValue = System.Reflection.FieldInfo.GetFieldFromHandle(handleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetFieldFromHandle_1")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_FieldInfo_GetFieldFromHandle_1(void* /* System.RuntimeFieldHandle */ handle, void* /* System.RuntimeTypeHandle */ declaringType, void** /* System.Exception */ __outException)
	{
		System.RuntimeFieldHandle handleConverted = InteropUtils.GetInstance<System.RuntimeFieldHandle>(handle);
		System.RuntimeTypeHandle declaringTypeConverted = InteropUtils.GetInstance<System.RuntimeTypeHandle>(declaringType);
	
	    try {
			System.Reflection.FieldInfo __returnValue = System.Reflection.FieldInfo.GetFieldFromHandle(handleConverted, declaringTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_Equals")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_Equals(void* /* System.Reflection.FieldInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_FieldInfo_GetHashCode(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetValue")]
	internal static void* /* System.Object */ System_Reflection_FieldInfo_GetValue(void* /* System.Reflection.FieldInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(objConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_SetValue")]
	internal static void /* System.Void */ System_Reflection_FieldInfo_SetValue(void* /* System.Reflection.FieldInfo */ __self, void* /* System.Object */ obj, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(objConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_SetValue_1")]
	internal static void /* System.Void */ System_Reflection_FieldInfo_SetValue_1(void* /* System.Reflection.FieldInfo */ __self, void* /* System.Object */ obj, void* /* System.Object */ value, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ invokeAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			__selfConverted.SetValue(objConverted, valueConverted, invokeAttr, binderConverted, cultureConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetRawConstantValue")]
	internal static void* /* System.Object */ System_Reflection_FieldInfo_GetRawConstantValue(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetRawConstantValue();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetModifiedFieldType")]
	internal static void* /* System.Type */ System_Reflection_FieldInfo_GetModifiedFieldType(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetModifiedFieldType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetOptionalCustomModifiers")]
	internal static void* /* System.Type[] */ System_Reflection_FieldInfo_GetOptionalCustomModifiers(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetOptionalCustomModifiers();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_GetRequiredCustomModifiers")]
	internal static void* /* System.Type[] */ System_Reflection_FieldInfo_GetRequiredCustomModifiers(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetRequiredCustomModifiers();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_FieldInfo_MemberType_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_Attributes_Get")]
	internal static System.Reflection.FieldAttributes /* System.Reflection.FieldAttributes */ System_Reflection_FieldInfo_Attributes_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Reflection.FieldAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.FieldAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_FieldType_Get")]
	internal static void* /* System.Type */ System_Reflection_FieldInfo_FieldType_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.FieldType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsInitOnly_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsInitOnly_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInitOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsLiteral_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsLiteral_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsLiteral;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsNotSerialized_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsNotSerialized_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsNotSerialized;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsPinvokeImpl_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsPinvokeImpl_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPinvokeImpl;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsSpecialName_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsSpecialName_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSpecialName;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsStatic_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsStatic_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsStatic;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsAssembly_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsAssembly_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAssembly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsFamily_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsFamily_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamily;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsFamilyAndAssembly_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsFamilyAndAssembly_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamilyAndAssembly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsFamilyOrAssembly_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsFamilyOrAssembly_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFamilyOrAssembly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsPrivate_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsPrivate_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPrivate;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsPublic_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsPublic_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsPublic;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsSecurityCritical_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsSecurityCritical_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityCritical;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsSecuritySafeCritical_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsSecuritySafeCritical_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecuritySafeCritical;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_IsSecurityTransparent_Get")]
	internal static byte /* System.Boolean */ System_Reflection_FieldInfo_IsSecurityTransparent_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSecurityTransparent;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_FieldHandle_Get")]
	internal static void* /* System.RuntimeFieldHandle */ System_Reflection_FieldInfo_FieldHandle_Get(void* /* System.Reflection.FieldInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.FieldInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.FieldInfo>(__self);
	
	
	    try {
			System.RuntimeFieldHandle __returnValue = __selfConverted.FieldHandle;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_FieldInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.FieldInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_FieldInfo_Destroy(void* /* System.Reflection.FieldInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_FieldAttributes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_FieldAttributes_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_FieldAttributes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.FieldAttributes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}








internal unsafe class System_Reflection_ParameterModifier
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterModifier_Create")]
	internal static void* /* System.Reflection.ParameterModifier */ System_Reflection_ParameterModifier_Create(int /* System.Int32 */ parameterCount, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Reflection.ParameterModifier __returnValue = new System.Reflection.ParameterModifier(parameterCount);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterModifier_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_ParameterModifier_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.ParameterModifier);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ParameterModifier_Destroy")]
	internal static void /* System.Void */ System_Reflection_ParameterModifier_Destroy(void* /* System.Reflection.ParameterModifier */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Reflection_PropertyInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetIndexParameters")]
	internal static void* /* System.Reflection.ParameterInfo[] */ System_Reflection_PropertyInfo_GetIndexParameters(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.ParameterInfo[] __returnValue = __selfConverted.GetIndexParameters();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetAccessors")]
	internal static void* /* System.Reflection.MethodInfo[] */ System_Reflection_PropertyInfo_GetAccessors(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo[] __returnValue = __selfConverted.GetAccessors();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetAccessors_1")]
	internal static void* /* System.Reflection.MethodInfo[] */ System_Reflection_PropertyInfo_GetAccessors_1(void* /* System.Reflection.PropertyInfo */ __self, byte /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo[] __returnValue = __selfConverted.GetAccessors(nonPublicConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetGetMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_GetGetMethod(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetGetMethod();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetGetMethod_1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_GetGetMethod_1(void* /* System.Reflection.PropertyInfo */ __self, byte /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetGetMethod(nonPublicConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetSetMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_GetSetMethod(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetSetMethod();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetSetMethod_1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_GetSetMethod_1(void* /* System.Reflection.PropertyInfo */ __self, byte /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetSetMethod(nonPublicConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetModifiedPropertyType")]
	internal static void* /* System.Type */ System_Reflection_PropertyInfo_GetModifiedPropertyType(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.GetModifiedPropertyType();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetOptionalCustomModifiers")]
	internal static void* /* System.Type[] */ System_Reflection_PropertyInfo_GetOptionalCustomModifiers(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetOptionalCustomModifiers();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetRequiredCustomModifiers")]
	internal static void* /* System.Type[] */ System_Reflection_PropertyInfo_GetRequiredCustomModifiers(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetRequiredCustomModifiers();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetValue")]
	internal static void* /* System.Object */ System_Reflection_PropertyInfo_GetValue(void* /* System.Reflection.PropertyInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(objConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetValue_1")]
	internal static void* /* System.Object */ System_Reflection_PropertyInfo_GetValue_1(void* /* System.Reflection.PropertyInfo */ __self, void* /* System.Object */ obj, void* /* System.Object[] */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object[] indexConverted = InteropUtils.GetInstance<System.Object[]>(index);
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(objConverted, indexConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetValue_2")]
	internal static void* /* System.Object */ System_Reflection_PropertyInfo_GetValue_2(void* /* System.Reflection.PropertyInfo */ __self, void* /* System.Object */ obj, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ invokeAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object[] */ index, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object[] indexConverted = InteropUtils.GetInstance<System.Object[]>(index);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Object __returnValue = __selfConverted.GetValue(objConverted, invokeAttr, binderConverted, indexConverted, cultureConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetConstantValue")]
	internal static void* /* System.Object */ System_Reflection_PropertyInfo_GetConstantValue(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetConstantValue();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetRawConstantValue")]
	internal static void* /* System.Object */ System_Reflection_PropertyInfo_GetRawConstantValue(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.GetRawConstantValue();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_SetValue")]
	internal static void /* System.Void */ System_Reflection_PropertyInfo_SetValue(void* /* System.Reflection.PropertyInfo */ __self, void* /* System.Object */ obj, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.SetValue(objConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_SetValue_1")]
	internal static void /* System.Void */ System_Reflection_PropertyInfo_SetValue_1(void* /* System.Reflection.PropertyInfo */ __self, void* /* System.Object */ obj, void* /* System.Object */ value, void* /* System.Object[] */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Object[] indexConverted = InteropUtils.GetInstance<System.Object[]>(index);
	
	    try {
			__selfConverted.SetValue(objConverted, valueConverted, indexConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_SetValue_2")]
	internal static void /* System.Void */ System_Reflection_PropertyInfo_SetValue_2(void* /* System.Reflection.PropertyInfo */ __self, void* /* System.Object */ obj, void* /* System.Object */ value, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ invokeAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object[] */ index, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object[] indexConverted = InteropUtils.GetInstance<System.Object[]>(index);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			__selfConverted.SetValue(objConverted, valueConverted, invokeAttr, binderConverted, indexConverted, cultureConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_Equals")]
	internal static byte /* System.Boolean */ System_Reflection_PropertyInfo_Equals(void* /* System.Reflection.PropertyInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_PropertyInfo_GetHashCode(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_PropertyInfo_MemberType_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_PropertyType_Get")]
	internal static void* /* System.Type */ System_Reflection_PropertyInfo_PropertyType_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.PropertyType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_Attributes_Get")]
	internal static System.Reflection.PropertyAttributes /* System.Reflection.PropertyAttributes */ System_Reflection_PropertyInfo_Attributes_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.PropertyAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.PropertyAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_IsSpecialName_Get")]
	internal static byte /* System.Boolean */ System_Reflection_PropertyInfo_IsSpecialName_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSpecialName;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_CanRead_Get")]
	internal static byte /* System.Boolean */ System_Reflection_PropertyInfo_CanRead_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanRead;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_CanWrite_Get")]
	internal static byte /* System.Boolean */ System_Reflection_PropertyInfo_CanWrite_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanWrite;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_GetMethod_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_GetMethod_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_SetMethod_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_PropertyInfo_SetMethod_Get(void* /* System.Reflection.PropertyInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.PropertyInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.PropertyInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.SetMethod;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_PropertyInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.PropertyInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_PropertyInfo_Destroy(void* /* System.Reflection.PropertyInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_PropertyAttributes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PropertyAttributes_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_PropertyAttributes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.PropertyAttributes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}



internal unsafe class System_Reflection_MethodInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_GetGenericArguments")]
	internal static void* /* System.Type[] */ System_Reflection_MethodInfo_GetGenericArguments(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetGenericArguments();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_GetGenericMethodDefinition")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_MethodInfo_GetGenericMethodDefinition(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetGenericMethodDefinition();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_MakeGenericMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_MethodInfo_MakeGenericMethod(void* /* System.Reflection.MethodInfo */ __self, void* /* System.Type[] */ typeArguments, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
		System.Type[] typeArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(typeArguments);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.MakeGenericMethod(typeArgumentsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_GetBaseDefinition")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_MethodInfo_GetBaseDefinition(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetBaseDefinition();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_CreateDelegate")]
	internal static void* /* System.Delegate */ System_Reflection_MethodInfo_CreateDelegate(void* /* System.Reflection.MethodInfo */ __self, void* /* System.Type */ delegateType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
		System.Type delegateTypeConverted = InteropUtils.GetInstance<System.Type>(delegateType);
	
	    try {
			System.Delegate __returnValue = __selfConverted.CreateDelegate(delegateTypeConverted);
			void* __returnValueNative = new System_Delegate(__returnValue).AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_CreateDelegate_1")]
	internal static void* /* System.Delegate */ System_Reflection_MethodInfo_CreateDelegate_1(void* /* System.Reflection.MethodInfo */ __self, void* /* System.Type */ delegateType, void* /* System.Object */ target, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
		System.Type delegateTypeConverted = InteropUtils.GetInstance<System.Type>(delegateType);
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
	
	    try {
			System.Delegate __returnValue = __selfConverted.CreateDelegate(delegateTypeConverted, targetConverted);
			void* __returnValueNative = new System_Delegate(__returnValue).AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_CreateDelegate_A1")]
	internal static void* /* System.Object */ System_Reflection_MethodInfo_CreateDelegate_A1(void* /* System.Type */ T, void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Reflection.MethodInfo);
			System.String __nameOfMethodForGenericCall = nameof(System.Reflection.MethodInfo.CreateDelegate);
			System.Object? __methodTargetForGenericCall = __selfConverted;
	
			System.Object[]? __parametersForGenericCall = null;
			System.Type[] __parameterTypesForGenericCall = System.Type.EmptyTypes;
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method CreateDelegate not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Object __returnValue = (System.Object)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_CreateDelegate_A1_1")]
	internal static void* /* System.Object */ System_Reflection_MethodInfo_CreateDelegate_A1_1(void* /* System.Type */ T, void* /* System.Reflection.MethodInfo */ __self, void* /* System.Object */ target, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Reflection.MethodInfo);
			System.String __nameOfMethodForGenericCall = nameof(System.Reflection.MethodInfo.CreateDelegate);
			System.Object? __methodTargetForGenericCall = __selfConverted;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { targetConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.Object) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method CreateDelegate not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Object __returnValue = (System.Object)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_Equals")]
	internal static byte /* System.Boolean */ System_Reflection_MethodInfo_Equals(void* /* System.Reflection.MethodInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_MethodInfo_GetHashCode(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_MethodInfo_MemberType_Get(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_ReturnParameter_Get")]
	internal static void* /* System.Reflection.ParameterInfo */ System_Reflection_MethodInfo_ReturnParameter_Get(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Reflection.ParameterInfo __returnValue = __selfConverted.ReturnParameter;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_ReturnType_Get")]
	internal static void* /* System.Type */ System_Reflection_MethodInfo_ReturnType_Get(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ReturnType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_ReturnTypeCustomAttributes_Get")]
	internal static void* /* System.Reflection.ICustomAttributeProvider */ System_Reflection_MethodInfo_ReturnTypeCustomAttributes_Get(void* /* System.Reflection.MethodInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.MethodInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(__self);
	
	
	    try {
			System.Reflection.ICustomAttributeProvider __returnValue = __selfConverted.ReturnTypeCustomAttributes;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_MethodInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.MethodInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MethodInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_MethodInfo_Destroy(void* /* System.Reflection.MethodInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_ICustomAttributeProvider
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ICustomAttributeProvider_GetCustomAttributes")]
	internal static void* /* System.Object[] */ System_Reflection_ICustomAttributeProvider_GetCustomAttributes(void* /* System.Reflection.ICustomAttributeProvider */ __self, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ICustomAttributeProvider __selfConverted = InteropUtils.GetInstance<System.Reflection.ICustomAttributeProvider>(__self);
	
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Object[] __returnValue = __selfConverted.GetCustomAttributes(inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ICustomAttributeProvider_GetCustomAttributes_1")]
	internal static void* /* System.Object[] */ System_Reflection_ICustomAttributeProvider_GetCustomAttributes_1(void* /* System.Reflection.ICustomAttributeProvider */ __self, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ICustomAttributeProvider __selfConverted = InteropUtils.GetInstance<System.Reflection.ICustomAttributeProvider>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Object[] __returnValue = __selfConverted.GetCustomAttributes(attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ICustomAttributeProvider_IsDefined")]
	internal static byte /* System.Boolean */ System_Reflection_ICustomAttributeProvider_IsDefined(void* /* System.Reflection.ICustomAttributeProvider */ __self, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ICustomAttributeProvider __selfConverted = InteropUtils.GetInstance<System.Reflection.ICustomAttributeProvider>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefined(attributeTypeConverted, inheritConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ICustomAttributeProvider_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_ICustomAttributeProvider_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.ICustomAttributeProvider);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ICustomAttributeProvider_Destroy")]
	internal static void /* System.Void */ System_Reflection_ICustomAttributeProvider_Destroy(void* /* System.Reflection.ICustomAttributeProvider */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Delegate
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.Delegate> m_trampoline;
	internal System.Delegate Trampoline
	{
		get {
			System.Delegate? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_Delegate(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_Delegate(System.Delegate originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_Delegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.Delegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Delegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Delegate trampoline = (System.Delegate)System.Delegate.CreateDelegate(typeof(System.Delegate), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction()
	{
	


		CFunction(Context);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Delegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Delegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Delegate_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_Delegate>(self);

		


			selfConverted.Trampoline.DynamicInvoke();
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Delegate_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Delegate>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Delegate_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Delegate>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Delegate_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Delegate>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Delegate_Destroy")]
	internal static void /* System.Void */ System_Delegate_Destroy(void* /* System.Delegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.



internal unsafe class System_Collections_IDictionary
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Contains")]
	internal static byte /* System.Boolean */ System_Collections_IDictionary_Contains(void* /* System.Collections.IDictionary */ __self, void* /* System.Object */ key, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(keyConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Add")]
	internal static void /* System.Void */ System_Collections_IDictionary_Add(void* /* System.Collections.IDictionary */ __self, void* /* System.Object */ key, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.Add(keyConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Clear")]
	internal static void /* System.Void */ System_Collections_IDictionary_Clear(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			__selfConverted.Clear();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_GetEnumerator")]
	internal static void* /* System.Collections.IDictionaryEnumerator */ System_Collections_IDictionary_GetEnumerator(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			System.Collections.IDictionaryEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Remove")]
	internal static void /* System.Void */ System_Collections_IDictionary_Remove(void* /* System.Collections.IDictionary */ __self, void* /* System.Object */ key, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
	
	    try {
			__selfConverted.Remove(keyConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Keys_Get")]
	internal static void* /* System.Collections.ICollection */ System_Collections_IDictionary_Keys_Get(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			System.Collections.ICollection __returnValue = __selfConverted.Keys;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Values_Get")]
	internal static void* /* System.Collections.ICollection */ System_Collections_IDictionary_Values_Get(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			System.Collections.ICollection __returnValue = __selfConverted.Values;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Collections_IDictionary_IsReadOnly_Get(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_IsFixedSize_Get")]
	internal static byte /* System.Boolean */ System_Collections_IDictionary_IsFixedSize_Get(void* /* System.Collections.IDictionary */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionary __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFixedSize;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_TypeOf")]
	internal static void* /* System.Type */ System_Collections_IDictionary_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.IDictionary);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionary_Destroy")]
	internal static void /* System.Void */ System_Collections_IDictionary_Destroy(void* /* System.Collections.IDictionary */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_ICollection
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_CopyTo")]
	internal static void /* System.Void */ System_Collections_ICollection_CopyTo(void* /* System.Collections.ICollection */ __self, void* /* System.Array */ array, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ICollection __selfConverted = InteropUtils.GetInstance<System.Collections.ICollection>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(arrayConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_Count_Get")]
	internal static int /* System.Int32 */ System_Collections_ICollection_Count_Get(void* /* System.Collections.ICollection */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ICollection __selfConverted = InteropUtils.GetInstance<System.Collections.ICollection>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Count;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_SyncRoot_Get")]
	internal static void* /* System.Object */ System_Collections_ICollection_SyncRoot_Get(void* /* System.Collections.ICollection */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ICollection __selfConverted = InteropUtils.GetInstance<System.Collections.ICollection>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.SyncRoot;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_IsSynchronized_Get")]
	internal static byte /* System.Boolean */ System_Collections_ICollection_IsSynchronized_Get(void* /* System.Collections.ICollection */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ICollection __selfConverted = InteropUtils.GetInstance<System.Collections.ICollection>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSynchronized;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_TypeOf")]
	internal static void* /* System.Type */ System_Collections_ICollection_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.ICollection);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ICollection_Destroy")]
	internal static void /* System.Void */ System_Collections_ICollection_Destroy(void* /* System.Collections.ICollection */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_IDictionaryEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionaryEnumerator_Key_Get")]
	internal static void* /* System.Object */ System_Collections_IDictionaryEnumerator_Key_Get(void* /* System.Collections.IDictionaryEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionaryEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionaryEnumerator>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Key;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionaryEnumerator_Value_Get")]
	internal static void* /* System.Object */ System_Collections_IDictionaryEnumerator_Value_Get(void* /* System.Collections.IDictionaryEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionaryEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionaryEnumerator>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Value;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionaryEnumerator_Entry_Get")]
	internal static void* /* System.Collections.DictionaryEntry */ System_Collections_IDictionaryEnumerator_Entry_Get(void* /* System.Collections.IDictionaryEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IDictionaryEnumerator __selfConverted = InteropUtils.GetInstance<System.Collections.IDictionaryEnumerator>(__self);
	
	
	    try {
			System.Collections.DictionaryEntry __returnValue = __selfConverted.Entry;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionaryEnumerator_TypeOf")]
	internal static void* /* System.Type */ System_Collections_IDictionaryEnumerator_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.IDictionaryEnumerator);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IDictionaryEnumerator_Destroy")]
	internal static void /* System.Void */ System_Collections_IDictionaryEnumerator_Destroy(void* /* System.Collections.IDictionaryEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_DictionaryEntry
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Deconstruct")]
	internal static void /* System.Void */ System_Collections_DictionaryEntry_Deconstruct(void* /* System.Collections.DictionaryEntry */ __self, void** /* System.Object */ key, void** /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
		System.Object keyConverted;
		System.Object valueConverted;
	
	    try {
			__selfConverted.Deconstruct(out keyConverted, out valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (key is not null) {
				*key = keyConverted.AllocateGCHandleAndGetAddress();
			}
	
			if (value is not null) {
				*value = valueConverted.AllocateGCHandleAndGetAddress();
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (key is not null) {
				*key = null;
			}
	
			if (value is not null) {
				*value = null;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_ToString")]
	internal static byte* /* System.String */ System_Collections_DictionaryEntry_ToString(void* /* System.Collections.DictionaryEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Create")]
	internal static void* /* System.Collections.DictionaryEntry */ System_Collections_DictionaryEntry_Create(void* /* System.Object */ key, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Collections.DictionaryEntry __returnValue = new System.Collections.DictionaryEntry(keyConverted, valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Key_Get")]
	internal static void* /* System.Object */ System_Collections_DictionaryEntry_Key_Get(void* /* System.Collections.DictionaryEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Key;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Key_Set")]
	internal static void /* System.Void */ System_Collections_DictionaryEntry_Key_Set(void* /* System.Collections.DictionaryEntry */ __self, void* /* System.Object */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
	
	    try {
			__selfConverted.Key = InteropUtils.GetInstance<System.Object>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Value_Get")]
	internal static void* /* System.Object */ System_Collections_DictionaryEntry_Value_Get(void* /* System.Collections.DictionaryEntry */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Value;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Value_Set")]
	internal static void /* System.Void */ System_Collections_DictionaryEntry_Value_Set(void* /* System.Collections.DictionaryEntry */ __self, void* /* System.Object */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.DictionaryEntry __selfConverted = InteropUtils.GetInstance<System.Collections.DictionaryEntry>(__self);
	
	
	    try {
			__selfConverted.Value = InteropUtils.GetInstance<System.Object>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_TypeOf")]
	internal static void* /* System.Type */ System_Collections_DictionaryEntry_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.DictionaryEntry);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_DictionaryEntry_Destroy")]
	internal static void /* System.Void */ System_Collections_DictionaryEntry_Destroy(void* /* System.Collections.DictionaryEntry */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Threading_Tasks_TaskStatus
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskStatus_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Tasks_TaskStatus_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Tasks.TaskStatus);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Threading_Tasks_TaskCreationOptions
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskCreationOptions_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Tasks_TaskCreationOptions_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Tasks.TaskCreationOptions);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Threading_Tasks_TaskFactory
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_StartNew")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_TaskFactory_StartNew(void* /* System.Threading.Tasks.TaskFactory */ __self, void* /* System.Action */ action, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
		System.Action actionConverted = InteropUtils.GetInstance<System_Action>(action)?.Trampoline;
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.StartNew(actionConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_StartNew_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_TaskFactory_StartNew_1(void* /* System.Threading.Tasks.TaskFactory */ __self, void* /* System.Action */ action, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
		System.Action actionConverted = InteropUtils.GetInstance<System_Action>(action)?.Trampoline;
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.StartNew(actionConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_StartNew_2")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_TaskFactory_StartNew_2(void* /* System.Threading.Tasks.TaskFactory */ __self, void* /* System.Action */ action, System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
		System.Action actionConverted = InteropUtils.GetInstance<System_Action>(action)?.Trampoline;
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.StartNew(actionConverted, creationOptions);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_StartNew_3")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_TaskFactory_StartNew_3(void* /* System.Threading.Tasks.TaskFactory */ __self, void* /* System.Action */ action, void* /* System.Threading.CancellationToken */ cancellationToken, System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, void* /* System.Threading.Tasks.TaskScheduler */ scheduler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
		System.Action actionConverted = InteropUtils.GetInstance<System_Action>(action)?.Trampoline;
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
		System.Threading.Tasks.TaskScheduler schedulerConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(scheduler);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.StartNew(actionConverted, cancellationTokenConverted, creationOptions, schedulerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Create")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_TaskFactory_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = new System.Threading.Tasks.TaskFactory();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Create_1")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_TaskFactory_Create_1(void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = new System.Threading.Tasks.TaskFactory(cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Create_2")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_TaskFactory_Create_2(void* /* System.Threading.Tasks.TaskScheduler */ scheduler, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.TaskScheduler schedulerConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(scheduler);
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = new System.Threading.Tasks.TaskFactory(schedulerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Create_3")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_TaskFactory_Create_3(System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, System.Threading.Tasks.TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */ continuationOptions, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = new System.Threading.Tasks.TaskFactory(creationOptions, continuationOptions);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Create_4")]
	internal static void* /* System.Threading.Tasks.TaskFactory */ System_Threading_Tasks_TaskFactory_Create_4(void* /* System.Threading.CancellationToken */ cancellationToken, System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ creationOptions, System.Threading.Tasks.TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */ continuationOptions, void* /* System.Threading.Tasks.TaskScheduler */ scheduler, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
		System.Threading.Tasks.TaskScheduler schedulerConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskScheduler>(scheduler);
	
	    try {
			System.Threading.Tasks.TaskFactory __returnValue = new System.Threading.Tasks.TaskFactory(cancellationTokenConverted, creationOptions, continuationOptions, schedulerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_CancellationToken_Get")]
	internal static void* /* System.Threading.CancellationToken */ System_Threading_Tasks_TaskFactory_CancellationToken_Get(void* /* System.Threading.Tasks.TaskFactory */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
	
	    try {
			System.Threading.CancellationToken __returnValue = __selfConverted.CancellationToken;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Scheduler_Get")]
	internal static void* /* System.Threading.Tasks.TaskScheduler */ System_Threading_Tasks_TaskFactory_Scheduler_Get(void* /* System.Threading.Tasks.TaskFactory */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
	
	    try {
			System.Threading.Tasks.TaskScheduler __returnValue = __selfConverted.Scheduler;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_CreationOptions_Get")]
	internal static System.Threading.Tasks.TaskCreationOptions /* System.Threading.Tasks.TaskCreationOptions */ System_Threading_Tasks_TaskFactory_CreationOptions_Get(void* /* System.Threading.Tasks.TaskFactory */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
	
	    try {
			System.Threading.Tasks.TaskCreationOptions __returnValue = __selfConverted.CreationOptions;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.Tasks.TaskCreationOptions);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_ContinuationOptions_Get")]
	internal static System.Threading.Tasks.TaskContinuationOptions /* System.Threading.Tasks.TaskContinuationOptions */ System_Threading_Tasks_TaskFactory_ContinuationOptions_Get(void* /* System.Threading.Tasks.TaskFactory */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.TaskFactory __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.TaskFactory>(__self);
	
	
	    try {
			System.Threading.Tasks.TaskContinuationOptions __returnValue = __selfConverted.ContinuationOptions;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.Tasks.TaskContinuationOptions);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Tasks_TaskFactory_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Tasks.TaskFactory);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskFactory_Destroy")]
	internal static void /* System.Void */ System_Threading_Tasks_TaskFactory_Destroy(void* /* System.Threading.Tasks.TaskFactory */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_CancellationToken
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Register")]
	internal static void* /* System.Threading.CancellationTokenRegistration */ System_Threading_CancellationToken_Register(void* /* System.Threading.CancellationToken */ __self, void* /* System.Action */ callback, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
		System.Action callbackConverted = InteropUtils.GetInstance<System_Action>(callback)?.Trampoline;
	
	    try {
			System.Threading.CancellationTokenRegistration __returnValue = __selfConverted.Register(callbackConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Register_1")]
	internal static void* /* System.Threading.CancellationTokenRegistration */ System_Threading_CancellationToken_Register_1(void* /* System.Threading.CancellationToken */ __self, void* /* System.Action */ callback, byte /* System.Boolean */ useSynchronizationContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
		System.Action callbackConverted = InteropUtils.GetInstance<System_Action>(callback)?.Trampoline;
		System.Boolean useSynchronizationContextConverted = useSynchronizationContext.ToBool();
	
	    try {
			System.Threading.CancellationTokenRegistration __returnValue = __selfConverted.Register(callbackConverted, useSynchronizationContextConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Equals")]
	internal static byte /* System.Boolean */ System_Threading_CancellationToken_Equals(void* /* System.Threading.CancellationToken */ __self, void* /* System.Threading.CancellationToken */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
		System.Threading.CancellationToken otherConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Equals_1")]
	internal static byte /* System.Boolean */ System_Threading_CancellationToken_Equals_1(void* /* System.Threading.CancellationToken */ __self, void* /* System.Object */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
		System.Object otherConverted = InteropUtils.GetInstance<System.Object>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_GetHashCode")]
	internal static int /* System.Int32 */ System_Threading_CancellationToken_GetHashCode(void* /* System.Threading.CancellationToken */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_ThrowIfCancellationRequested")]
	internal static void /* System.Void */ System_Threading_CancellationToken_ThrowIfCancellationRequested(void* /* System.Threading.CancellationToken */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
	
	    try {
			__selfConverted.ThrowIfCancellationRequested();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Create")]
	internal static void* /* System.Threading.CancellationToken */ System_Threading_CancellationToken_Create(byte /* System.Boolean */ canceled, void** /* System.Exception */ __outException)
	{
		System.Boolean canceledConverted = canceled.ToBool();
	
	    try {
			System.Threading.CancellationToken __returnValue = new System.Threading.CancellationToken(canceledConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_None_Get")]
	internal static void* /* System.Threading.CancellationToken */ System_Threading_CancellationToken_None_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.CancellationToken __returnValue = System.Threading.CancellationToken.None;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_IsCancellationRequested_Get")]
	internal static byte /* System.Boolean */ System_Threading_CancellationToken_IsCancellationRequested_Get(void* /* System.Threading.CancellationToken */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCancellationRequested;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_CanBeCanceled_Get")]
	internal static byte /* System.Boolean */ System_Threading_CancellationToken_CanBeCanceled_Get(void* /* System.Threading.CancellationToken */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CanBeCanceled;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_WaitHandle_Get")]
	internal static void* /* System.Threading.WaitHandle */ System_Threading_CancellationToken_WaitHandle_Get(void* /* System.Threading.CancellationToken */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationToken __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(__self);
	
	
	    try {
			System.Threading.WaitHandle __returnValue = __selfConverted.WaitHandle;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_TypeOf")]
	internal static void* /* System.Type */ System_Threading_CancellationToken_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.CancellationToken);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationToken_Destroy")]
	internal static void /* System.Void */ System_Threading_CancellationToken_Destroy(void* /* System.Threading.CancellationToken */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_WaitHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_Close")]
	internal static void /* System.Void */ System_Threading_WaitHandle_Close(void* /* System.Threading.WaitHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			__selfConverted.Close();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_Dispose")]
	internal static void /* System.Void */ System_Threading_WaitHandle_Dispose(void* /* System.Threading.WaitHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitOne")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_WaitOne(void* /* System.Threading.WaitHandle */ __self, int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.WaitOne(millisecondsTimeout);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitOne_1")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_WaitOne_1(void* /* System.Threading.WaitHandle */ __self, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Boolean __returnValue = __selfConverted.WaitOne(timeoutConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitOne_2")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_WaitOne_2(void* /* System.Threading.WaitHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.WaitOne();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitOne_3")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_WaitOne_3(void* /* System.Threading.WaitHandle */ __self, int /* System.Int32 */ millisecondsTimeout, byte /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.WaitOne(millisecondsTimeout, exitContextConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitOne_4")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_WaitOne_4(void* /* System.Threading.WaitHandle */ __self, void* /* System.TimeSpan */ timeout, byte /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.WaitOne(timeoutConverted, exitContextConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitAll")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_WaitAll(void* /* System.Threading.WaitHandle[] */ waitHandles, int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle[] waitHandlesConverted = InteropUtils.GetInstance<System.Threading.WaitHandle[]>(waitHandles);
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.WaitAll(waitHandlesConverted, millisecondsTimeout);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitAll_1")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_WaitAll_1(void* /* System.Threading.WaitHandle[] */ waitHandles, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle[] waitHandlesConverted = InteropUtils.GetInstance<System.Threading.WaitHandle[]>(waitHandles);
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.WaitAll(waitHandlesConverted, timeoutConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitAll_2")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_WaitAll_2(void* /* System.Threading.WaitHandle[] */ waitHandles, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle[] waitHandlesConverted = InteropUtils.GetInstance<System.Threading.WaitHandle[]>(waitHandles);
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.WaitAll(waitHandlesConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitAll_3")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_WaitAll_3(void* /* System.Threading.WaitHandle[] */ waitHandles, int /* System.Int32 */ millisecondsTimeout, byte /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle[] waitHandlesConverted = InteropUtils.GetInstance<System.Threading.WaitHandle[]>(waitHandles);
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.WaitAll(waitHandlesConverted, millisecondsTimeout, exitContextConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitAll_4")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_WaitAll_4(void* /* System.Threading.WaitHandle[] */ waitHandles, void* /* System.TimeSpan */ timeout, byte /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle[] waitHandlesConverted = InteropUtils.GetInstance<System.Threading.WaitHandle[]>(waitHandles);
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.WaitAll(waitHandlesConverted, timeoutConverted, exitContextConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitAny")]
	internal static int /* System.Int32 */ System_Threading_WaitHandle_WaitAny(void* /* System.Threading.WaitHandle[] */ waitHandles, int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle[] waitHandlesConverted = InteropUtils.GetInstance<System.Threading.WaitHandle[]>(waitHandles);
	
	    try {
			System.Int32 __returnValue = System.Threading.WaitHandle.WaitAny(waitHandlesConverted, millisecondsTimeout);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitAny_1")]
	internal static int /* System.Int32 */ System_Threading_WaitHandle_WaitAny_1(void* /* System.Threading.WaitHandle[] */ waitHandles, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle[] waitHandlesConverted = InteropUtils.GetInstance<System.Threading.WaitHandle[]>(waitHandles);
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Int32 __returnValue = System.Threading.WaitHandle.WaitAny(waitHandlesConverted, timeoutConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitAny_2")]
	internal static int /* System.Int32 */ System_Threading_WaitHandle_WaitAny_2(void* /* System.Threading.WaitHandle[] */ waitHandles, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle[] waitHandlesConverted = InteropUtils.GetInstance<System.Threading.WaitHandle[]>(waitHandles);
	
	    try {
			System.Int32 __returnValue = System.Threading.WaitHandle.WaitAny(waitHandlesConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitAny_3")]
	internal static int /* System.Int32 */ System_Threading_WaitHandle_WaitAny_3(void* /* System.Threading.WaitHandle[] */ waitHandles, int /* System.Int32 */ millisecondsTimeout, byte /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle[] waitHandlesConverted = InteropUtils.GetInstance<System.Threading.WaitHandle[]>(waitHandles);
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Int32 __returnValue = System.Threading.WaitHandle.WaitAny(waitHandlesConverted, millisecondsTimeout, exitContextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitAny_4")]
	internal static int /* System.Int32 */ System_Threading_WaitHandle_WaitAny_4(void* /* System.Threading.WaitHandle[] */ waitHandles, void* /* System.TimeSpan */ timeout, byte /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle[] waitHandlesConverted = InteropUtils.GetInstance<System.Threading.WaitHandle[]>(waitHandles);
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Int32 __returnValue = System.Threading.WaitHandle.WaitAny(waitHandlesConverted, timeoutConverted, exitContextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_SignalAndWait")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_SignalAndWait(void* /* System.Threading.WaitHandle */ toSignal, void* /* System.Threading.WaitHandle */ toWaitOn, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle toSignalConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toSignal);
		System.Threading.WaitHandle toWaitOnConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toWaitOn);
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.SignalAndWait(toSignalConverted, toWaitOnConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_SignalAndWait_1")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_SignalAndWait_1(void* /* System.Threading.WaitHandle */ toSignal, void* /* System.Threading.WaitHandle */ toWaitOn, void* /* System.TimeSpan */ timeout, byte /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle toSignalConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toSignal);
		System.Threading.WaitHandle toWaitOnConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toWaitOn);
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.SignalAndWait(toSignalConverted, toWaitOnConverted, timeoutConverted, exitContextConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_SignalAndWait_2")]
	internal static byte /* System.Boolean */ System_Threading_WaitHandle_SignalAndWait_2(void* /* System.Threading.WaitHandle */ toSignal, void* /* System.Threading.WaitHandle */ toWaitOn, int /* System.Int32 */ millisecondsTimeout, byte /* System.Boolean */ exitContext, void** /* System.Exception */ __outException)
	{
		System.Threading.WaitHandle toSignalConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toSignal);
		System.Threading.WaitHandle toWaitOnConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(toWaitOn);
		System.Boolean exitContextConverted = exitContext.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Threading.WaitHandle.SignalAndWait(toSignalConverted, toWaitOnConverted, millisecondsTimeout, exitContextConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_Handle_Get")]
	internal static nint /* System.IntPtr */ System_Threading_WaitHandle_Handle_Get(void* /* System.Threading.WaitHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.Handle;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_Handle_Set")]
	internal static void /* System.Void */ System_Threading_WaitHandle_Handle_Set(void* /* System.Threading.WaitHandle */ __self, nint /* System.IntPtr */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			__selfConverted.Handle = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_SafeWaitHandle_Get")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ System_Threading_WaitHandle_SafeWaitHandle_Get(void* /* System.Threading.WaitHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			Microsoft.Win32.SafeHandles.SafeWaitHandle __returnValue = __selfConverted.SafeWaitHandle;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_SafeWaitHandle_Set")]
	internal static void /* System.Void */ System_Threading_WaitHandle_SafeWaitHandle_Set(void* /* System.Threading.WaitHandle */ __self, void* /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.WaitHandle __selfConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(__self);
	
	
	    try {
			__selfConverted.SafeWaitHandle = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeWaitHandle>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_WaitTimeout_Get")]
	internal static int /* System.Int32 */ System_Threading_WaitHandle_WaitTimeout_Get()
	{
	
		System.Int32 __returnValue = System.Threading.WaitHandle.WaitTimeout;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_TypeOf")]
	internal static void* /* System.Type */ System_Threading_WaitHandle_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.WaitHandle);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_WaitHandle_Destroy")]
	internal static void /* System.Void */ System_Threading_WaitHandle_Destroy(void* /* System.Threading.WaitHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class Microsoft_Win32_SafeHandles_SafeWaitHandle
{
	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeWaitHandle_Create")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ Microsoft_Win32_SafeHandles_SafeWaitHandle_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			Microsoft.Win32.SafeHandles.SafeWaitHandle __returnValue = new Microsoft.Win32.SafeHandles.SafeWaitHandle();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeWaitHandle_Create_1")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ Microsoft_Win32_SafeHandles_SafeWaitHandle_Create_1(nint /* System.IntPtr */ existingHandle, byte /* System.Boolean */ ownsHandle, void** /* System.Exception */ __outException)
	{
		System.Boolean ownsHandleConverted = ownsHandle.ToBool();
	
	    try {
			Microsoft.Win32.SafeHandles.SafeWaitHandle __returnValue = new Microsoft.Win32.SafeHandles.SafeWaitHandle(existingHandle, ownsHandleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeWaitHandle_TypeOf")]
	internal static void* /* System.Type */ Microsoft_Win32_SafeHandles_SafeWaitHandle_TypeOf()
	{
	
		System.Type __returnValue = typeof(Microsoft.Win32.SafeHandles.SafeWaitHandle);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeWaitHandle_Destroy")]
	internal static void /* System.Void */ Microsoft_Win32_SafeHandles_SafeWaitHandle_Destroy(void* /* Microsoft.Win32.SafeHandles.SafeWaitHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid
{
	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_IsInvalid_Get")]
	internal static byte /* System.Boolean */ Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_IsInvalid_Get(void* /* Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid __selfConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInvalid;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_TypeOf")]
	internal static void* /* System.Type */ Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_TypeOf()
	{
	
		System.Type __returnValue = typeof(Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_Destroy")]
	internal static void /* System.Void */ Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_Destroy(void* /* Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_InteropServices_SafeHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_DangerousGetHandle")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_SafeHandle_DangerousGetHandle(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			System.IntPtr __returnValue = __selfConverted.DangerousGetHandle();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_Close")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_Close(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			__selfConverted.Close();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_Dispose")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_Dispose(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_SetHandleAsInvalid")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_SetHandleAsInvalid(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			__selfConverted.SetHandleAsInvalid();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_DangerousAddRef")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_DangerousAddRef(void* /* System.Runtime.InteropServices.SafeHandle */ __self, byte* /* System.Boolean */ success, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
		System.Boolean successConverted;
	
		if (success is not null) {
			successConverted = (*success).ToBool();
		} else {
			successConverted = default(System.Boolean);
		}
	
	
	    try {
			__selfConverted.DangerousAddRef(ref successConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (success is not null) {
				*success = successConverted.ToCBool();
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_DangerousRelease")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_DangerousRelease(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			__selfConverted.DangerousRelease();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_IsClosed_Get")]
	internal static byte /* System.Boolean */ System_Runtime_InteropServices_SafeHandle_IsClosed_Get(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsClosed;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_IsInvalid_Get")]
	internal static byte /* System.Boolean */ System_Runtime_InteropServices_SafeHandle_IsInvalid_Get(void* /* System.Runtime.InteropServices.SafeHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.SafeHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInvalid;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_InteropServices_SafeHandle_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.InteropServices.SafeHandle);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_SafeHandle_Destroy")]
	internal static void /* System.Void */ System_Runtime_InteropServices_SafeHandle_Destroy(void* /* System.Runtime.InteropServices.SafeHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_ConstrainedExecution_CriticalFinalizerObject
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_ConstrainedExecution_CriticalFinalizerObject_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_ConstrainedExecution_CriticalFinalizerObject_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.ConstrainedExecution.CriticalFinalizerObject);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_ConstrainedExecution_CriticalFinalizerObject_Destroy")]
	internal static void /* System.Void */ System_Runtime_ConstrainedExecution_CriticalFinalizerObject_Destroy(void* /* System.Runtime.ConstrainedExecution.CriticalFinalizerObject */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}





internal unsafe class System_Threading_CancellationTokenRegistration
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Dispose")]
	internal static void /* System.Void */ System_Threading_CancellationTokenRegistration_Dispose(void* /* System.Threading.CancellationTokenRegistration */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_DisposeAsync")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_CancellationTokenRegistration_DisposeAsync(void* /* System.Threading.CancellationTokenRegistration */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.DisposeAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Unregister")]
	internal static byte /* System.Boolean */ System_Threading_CancellationTokenRegistration_Unregister(void* /* System.Threading.CancellationTokenRegistration */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Unregister();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Equals")]
	internal static byte /* System.Boolean */ System_Threading_CancellationTokenRegistration_Equals(void* /* System.Threading.CancellationTokenRegistration */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Equals_1")]
	internal static byte /* System.Boolean */ System_Threading_CancellationTokenRegistration_Equals_1(void* /* System.Threading.CancellationTokenRegistration */ __self, void* /* System.Threading.CancellationTokenRegistration */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
		System.Threading.CancellationTokenRegistration otherConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_GetHashCode")]
	internal static int /* System.Int32 */ System_Threading_CancellationTokenRegistration_GetHashCode(void* /* System.Threading.CancellationTokenRegistration */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Token_Get")]
	internal static void* /* System.Threading.CancellationToken */ System_Threading_CancellationTokenRegistration_Token_Get(void* /* System.Threading.CancellationTokenRegistration */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenRegistration __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenRegistration>(__self);
	
	
	    try {
			System.Threading.CancellationToken __returnValue = __selfConverted.Token;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_TypeOf")]
	internal static void* /* System.Type */ System_Threading_CancellationTokenRegistration_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.CancellationTokenRegistration);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenRegistration_Destroy")]
	internal static void /* System.Void */ System_Threading_CancellationTokenRegistration_Destroy(void* /* System.Threading.CancellationTokenRegistration */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_Tasks_ValueTask
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_FromCanceled")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_FromCanceled(void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = System.Threading.Tasks.ValueTask.FromCanceled(cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_FromException")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_FromException(void* /* System.Exception */ exception, void** /* System.Exception */ __outException)
	{
		System.Exception exceptionConverted = InteropUtils.GetInstance<System.Exception>(exception);
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = System.Threading.Tasks.ValueTask.FromException(exceptionConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_GetHashCode")]
	internal static int /* System.Int32 */ System_Threading_Tasks_ValueTask_GetHashCode(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Equals")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_ValueTask_Equals(void* /* System.Threading.Tasks.ValueTask */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Equals_1")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_ValueTask_Equals_1(void* /* System.Threading.Tasks.ValueTask */ __self, void* /* System.Threading.Tasks.ValueTask */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
		System.Threading.Tasks.ValueTask otherConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_AsTask")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_Tasks_ValueTask_AsTask(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.AsTask();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Preserve")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_Preserve(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.Preserve();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_GetAwaiter")]
	internal static void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ System_Threading_Tasks_ValueTask_GetAwaiter(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Runtime.CompilerServices.ValueTaskAwaiter __returnValue = __selfConverted.GetAwaiter();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_ConfigureAwait")]
	internal static void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable */ System_Threading_Tasks_ValueTask_ConfigureAwait(void* /* System.Threading.Tasks.ValueTask */ __self, byte /* System.Boolean */ continueOnCapturedContext, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
		System.Boolean continueOnCapturedContextConverted = continueOnCapturedContext.ToBool();
	
	    try {
			System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable __returnValue = __selfConverted.ConfigureAwait(continueOnCapturedContextConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Create")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_Create(void* /* System.Threading.Tasks.Task */ task, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Task taskConverted = InteropUtils.GetInstance<System.Threading.Tasks.Task>(task);
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = new System.Threading.Tasks.ValueTask(taskConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Create_1")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_Create_1(void* /* System.Threading.Tasks.Sources.IValueTaskSource */ source, short /* System.Int16 */ token, void** /* System.Exception */ __outException)
	{
		System.Threading.Tasks.Sources.IValueTaskSource sourceConverted = InteropUtils.GetInstance<System.Threading.Tasks.Sources.IValueTaskSource>(source);
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = new System.Threading.Tasks.ValueTask(sourceConverted, token);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_CompletedTask_Get")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Tasks_ValueTask_CompletedTask_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = System.Threading.Tasks.ValueTask.CompletedTask;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_IsCompleted_Get")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_ValueTask_IsCompleted_Get(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_IsCompletedSuccessfully_Get")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_ValueTask_IsCompletedSuccessfully_Get(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompletedSuccessfully;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_IsFaulted_Get")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_ValueTask_IsFaulted_Get(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFaulted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_IsCanceled_Get")]
	internal static byte /* System.Boolean */ System_Threading_Tasks_ValueTask_IsCanceled_Get(void* /* System.Threading.Tasks.ValueTask */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.ValueTask __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.ValueTask>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCanceled;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Tasks_ValueTask_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Tasks.ValueTask);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_ValueTask_Destroy")]
	internal static void /* System.Void */ System_Threading_Tasks_ValueTask_Destroy(void* /* System.Threading.Tasks.ValueTask */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "TResult" was skipped. Reason: It has no full name.
internal unsafe class System_Runtime_CompilerServices_ValueTaskAwaiter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_GetResult")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ValueTaskAwaiter_GetResult(void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ValueTaskAwaiter>(__self);
	
	
	    try {
			__selfConverted.GetResult();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_OnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ValueTaskAwaiter_OnCompleted(void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ValueTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System_Action>(continuation)?.Trampoline;
	
	    try {
			__selfConverted.OnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_UnsafeOnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ValueTaskAwaiter_UnsafeOnCompleted(void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ValueTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System_Action>(continuation)?.Trampoline;
	
	    try {
			__selfConverted.UnsafeOnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_IsCompleted_Get")]
	internal static byte /* System.Boolean */ System_Runtime_CompilerServices_ValueTaskAwaiter_IsCompleted_Get(void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ValueTaskAwaiter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_CompilerServices_ValueTaskAwaiter_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.CompilerServices.ValueTaskAwaiter);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ValueTaskAwaiter_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ValueTaskAwaiter_Destroy(void* /* System.Runtime.CompilerServices.ValueTaskAwaiter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Action
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.Action> m_trampoline;
	internal System.Action Trampoline
	{
		get {
			System.Action? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_Action(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_Action(System.Action originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_Action()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.Action? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Action);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Action trampoline = (System.Action)System.Delegate.CreateDelegate(typeof(System.Action), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction()
	{
	


		CFunction(Context);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Action_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Action(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Action_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_Action>(self);

		


			selfConverted.Trampoline();
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Action_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Action>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Action_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Action>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Action_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Action>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Action_Destroy")]
	internal static void /* System.Void */ System_Action_Destroy(void* /* System.Action */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_MulticastDelegate
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.MulticastDelegate> m_trampoline;
	internal System.MulticastDelegate Trampoline
	{
		get {
			System.MulticastDelegate? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_MulticastDelegate(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_MulticastDelegate(System.MulticastDelegate originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_MulticastDelegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.MulticastDelegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_MulticastDelegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.MulticastDelegate trampoline = (System.MulticastDelegate)System.Delegate.CreateDelegate(typeof(System.MulticastDelegate), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction()
	{
	


		CFunction(Context);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_MulticastDelegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_MulticastDelegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_MulticastDelegate_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_MulticastDelegate>(self);

		


			selfConverted.Trampoline.DynamicInvoke();
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_MulticastDelegate_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_MulticastDelegate>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_MulticastDelegate_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_MulticastDelegate>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_MulticastDelegate_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_MulticastDelegate>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_MulticastDelegate_Destroy")]
	internal static void /* System.Void */ System_MulticastDelegate_Destroy(void* /* System.MulticastDelegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_GetAwaiter")]
	internal static void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_GetAwaiter(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable>(__self);
	
	
	    try {
			System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter __returnValue = __selfConverted.GetAwaiter();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_Destroy(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_GetResult")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_GetResult(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter>(__self);
	
	
	    try {
			__selfConverted.GetResult();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_OnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_OnCompleted(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System_Action>(continuation)?.Trampoline;
	
	    try {
			__selfConverted.OnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_UnsafeOnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_UnsafeOnCompleted(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System_Action>(continuation)?.Trampoline;
	
	    try {
			__selfConverted.UnsafeOnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_IsCompleted_Get")]
	internal static byte /* System.Boolean */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_IsCompleted_Get(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredValueTaskAwaitable_ConfiguredValueTaskAwaiter_Destroy(void* /* System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_Tasks_Sources_IValueTaskSource
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Sources_IValueTaskSource_GetStatus")]
	internal static System.Threading.Tasks.Sources.ValueTaskSourceStatus /* System.Threading.Tasks.Sources.ValueTaskSourceStatus */ System_Threading_Tasks_Sources_IValueTaskSource_GetStatus(void* /* System.Threading.Tasks.Sources.IValueTaskSource */ __self, short /* System.Int16 */ token, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Sources.IValueTaskSource __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Sources.IValueTaskSource>(__self);
	
	
	    try {
			System.Threading.Tasks.Sources.ValueTaskSourceStatus __returnValue = __selfConverted.GetStatus(token);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.Tasks.Sources.ValueTaskSourceStatus);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Sources_IValueTaskSource_GetResult")]
	internal static void /* System.Void */ System_Threading_Tasks_Sources_IValueTaskSource_GetResult(void* /* System.Threading.Tasks.Sources.IValueTaskSource */ __self, short /* System.Int16 */ token, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Tasks.Sources.IValueTaskSource __selfConverted = InteropUtils.GetInstance<System.Threading.Tasks.Sources.IValueTaskSource>(__self);
	
	
	    try {
			__selfConverted.GetResult(token);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Sources_IValueTaskSource_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Tasks_Sources_IValueTaskSource_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Tasks.Sources.IValueTaskSource);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Sources_IValueTaskSource_Destroy")]
	internal static void /* System.Void */ System_Threading_Tasks_Sources_IValueTaskSource_Destroy(void* /* System.Threading.Tasks.Sources.IValueTaskSource */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_Tasks_Sources_ValueTaskSourceStatus
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Sources_ValueTaskSourceStatus_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Tasks_Sources_ValueTaskSourceStatus_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Tasks.Sources.ValueTaskSourceStatus);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Tasks_Sources_ValueTaskSourceOnCompletedFlags_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Threading_Tasks_TaskContinuationOptions
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Tasks_TaskContinuationOptions_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Tasks_TaskContinuationOptions_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Tasks.TaskContinuationOptions);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_IAsyncResult
{
	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_IsCompleted_Get")]
	internal static byte /* System.Boolean */ System_IAsyncResult_IsCompleted_Get(void* /* System.IAsyncResult */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IAsyncResult __selfConverted = InteropUtils.GetInstance<System.IAsyncResult>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_AsyncWaitHandle_Get")]
	internal static void* /* System.Threading.WaitHandle */ System_IAsyncResult_AsyncWaitHandle_Get(void* /* System.IAsyncResult */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IAsyncResult __selfConverted = InteropUtils.GetInstance<System.IAsyncResult>(__self);
	
	
	    try {
			System.Threading.WaitHandle __returnValue = __selfConverted.AsyncWaitHandle;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_AsyncState_Get")]
	internal static void* /* System.Object */ System_IAsyncResult_AsyncState_Get(void* /* System.IAsyncResult */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IAsyncResult __selfConverted = InteropUtils.GetInstance<System.IAsyncResult>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.AsyncState;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_CompletedSynchronously_Get")]
	internal static byte /* System.Boolean */ System_IAsyncResult_CompletedSynchronously_Get(void* /* System.IAsyncResult */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IAsyncResult __selfConverted = InteropUtils.GetInstance<System.IAsyncResult>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.CompletedSynchronously;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_TypeOf")]
	internal static void* /* System.Type */ System_IAsyncResult_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IAsyncResult);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IAsyncResult_Destroy")]
	internal static void /* System.Void */ System_IAsyncResult_Destroy(void* /* System.IAsyncResult */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
// Type "TArg3" was skipped. Reason: It has no full name.


















internal unsafe class System_Runtime_CompilerServices_TaskAwaiter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_OnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_TaskAwaiter_OnCompleted(void* /* System.Runtime.CompilerServices.TaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.TaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.TaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System_Action>(continuation)?.Trampoline;
	
	    try {
			__selfConverted.OnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_UnsafeOnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_TaskAwaiter_UnsafeOnCompleted(void* /* System.Runtime.CompilerServices.TaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.TaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.TaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System_Action>(continuation)?.Trampoline;
	
	    try {
			__selfConverted.UnsafeOnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_GetResult")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_TaskAwaiter_GetResult(void* /* System.Runtime.CompilerServices.TaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.TaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.TaskAwaiter>(__self);
	
	
	    try {
			__selfConverted.GetResult();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_IsCompleted_Get")]
	internal static byte /* System.Boolean */ System_Runtime_CompilerServices_TaskAwaiter_IsCompleted_Get(void* /* System.Runtime.CompilerServices.TaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.TaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.TaskAwaiter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_CompilerServices_TaskAwaiter_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.CompilerServices.TaskAwaiter);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_TaskAwaiter_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_TaskAwaiter_Destroy(void* /* System.Runtime.CompilerServices.TaskAwaiter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_ConfiguredTaskAwaitable
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_GetAwaiter")]
	internal static void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_GetAwaiter(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredTaskAwaitable __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredTaskAwaitable>(__self);
	
	
	    try {
			System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter __returnValue = __selfConverted.GetAwaiter();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.CompilerServices.ConfiguredTaskAwaitable);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_Destroy(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_OnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_OnCompleted(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System_Action>(continuation)?.Trampoline;
	
	    try {
			__selfConverted.OnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_UnsafeOnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_UnsafeOnCompleted(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System_Action>(continuation)?.Trampoline;
	
	    try {
			__selfConverted.UnsafeOnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_GetResult")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_GetResult(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter>(__self);
	
	
	    try {
			__selfConverted.GetResult();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_IsCompleted_Get")]
	internal static byte /* System.Boolean */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_IsCompleted_Get(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_ConfiguredTaskAwaitable_ConfiguredTaskAwaiter_Destroy(void* /* System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_YieldAwaitable
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_GetAwaiter")]
	internal static void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ System_Runtime_CompilerServices_YieldAwaitable_GetAwaiter(void* /* System.Runtime.CompilerServices.YieldAwaitable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.YieldAwaitable __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.YieldAwaitable>(__self);
	
	
	    try {
			System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter __returnValue = __selfConverted.GetAwaiter();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_CompilerServices_YieldAwaitable_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.CompilerServices.YieldAwaitable);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_YieldAwaitable_Destroy(void* /* System.Runtime.CompilerServices.YieldAwaitable */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_OnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_OnCompleted(void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System_Action>(continuation)?.Trampoline;
	
	    try {
			__selfConverted.OnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_UnsafeOnCompleted")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_UnsafeOnCompleted(void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ __self, void* /* System.Action */ continuation, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter>(__self);
	
		System.Action continuationConverted = InteropUtils.GetInstance<System_Action>(continuation)?.Trampoline;
	
	    try {
			__selfConverted.UnsafeOnCompleted(continuationConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_GetResult")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_GetResult(void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter>(__self);
	
	
	    try {
			__selfConverted.GetResult();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_IsCompleted_Get")]
	internal static byte /* System.Boolean */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_IsCompleted_Get(void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter __selfConverted = InteropUtils.GetInstance<System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCompleted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_Destroy")]
	internal static void /* System.Void */ System_Runtime_CompilerServices_YieldAwaitable_YieldAwaiter_Destroy(void* /* System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "TResult" was skipped. Reason: It has no full name.


internal unsafe class System_AsyncCallback
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.IAsyncResult */ /* ar */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.AsyncCallback> m_trampoline;
	internal System.AsyncCallback Trampoline
	{
		get {
			System.AsyncCallback? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_AsyncCallback(void* context, delegate* unmanaged<void* /* context */, void* /* System.IAsyncResult */ /* ar */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_AsyncCallback(System.AsyncCallback originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_AsyncCallback()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.AsyncCallback? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_AsyncCallback);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.AsyncCallback trampoline = (System.AsyncCallback)System.Delegate.CreateDelegate(typeof(System.AsyncCallback), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction(System.IAsyncResult /* System.IAsyncResult */ ar)
	{
		void* arConverted = ar.AllocateGCHandleAndGetAddress();
	


		CFunction(Context, arConverted);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AsyncCallback_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.IAsyncResult */ /* ar */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_AsyncCallback(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AsyncCallback_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void* /* System.IAsyncResult */ ar, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_AsyncCallback>(self);

			System.IAsyncResult arConverted = InteropUtils.GetInstance<System.IAsyncResult>(ar);
		


			selfConverted.Trampoline(arConverted);
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AsyncCallback_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_AsyncCallback>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AsyncCallback_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.IAsyncResult */ /* ar */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_AsyncCallback>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AsyncCallback_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_AsyncCallback>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AsyncCallback_Destroy")]
	internal static void /* System.Void */ System_AsyncCallback_Destroy(void* /* System.AsyncCallback */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_SeekOrigin
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_SeekOrigin_TypeOf")]
	internal static void* /* System.Type */ System_IO_SeekOrigin_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.SeekOrigin);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class Microsoft_Win32_SafeHandles_SafeFileHandle
{
	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_Create")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ Microsoft_Win32_SafeHandles_SafeFileHandle_Create(nint /* System.IntPtr */ preexistingHandle, byte /* System.Boolean */ ownsHandle, void** /* System.Exception */ __outException)
	{
		System.Boolean ownsHandleConverted = ownsHandle.ToBool();
	
	    try {
			Microsoft.Win32.SafeHandles.SafeFileHandle __returnValue = new Microsoft.Win32.SafeHandles.SafeFileHandle(preexistingHandle, ownsHandleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_Create_1")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ Microsoft_Win32_SafeHandles_SafeFileHandle_Create_1(void** /* System.Exception */ __outException)
	{
	
	    try {
			Microsoft.Win32.SafeHandles.SafeFileHandle __returnValue = new Microsoft.Win32.SafeHandles.SafeFileHandle();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_IsAsync_Get")]
	internal static byte /* System.Boolean */ Microsoft_Win32_SafeHandles_SafeFileHandle_IsAsync_Get(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		Microsoft.Win32.SafeHandles.SafeFileHandle __selfConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAsync;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_IsInvalid_Get")]
	internal static byte /* System.Boolean */ Microsoft_Win32_SafeHandles_SafeFileHandle_IsInvalid_Get(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		Microsoft.Win32.SafeHandles.SafeFileHandle __selfConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInvalid;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_TypeOf")]
	internal static void* /* System.Type */ Microsoft_Win32_SafeHandles_SafeFileHandle_TypeOf()
	{
	
		System.Type __returnValue = typeof(Microsoft.Win32.SafeHandles.SafeFileHandle);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "Microsoft_Win32_SafeHandles_SafeFileHandle_Destroy")]
	internal static void /* System.Void */ Microsoft_Win32_SafeHandles_SafeFileHandle_Destroy(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_FileAccess
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileAccess_TypeOf")]
	internal static void* /* System.Type */ System_IO_FileAccess_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.FileAccess);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_IO_FileMode
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileMode_TypeOf")]
	internal static void* /* System.Type */ System_IO_FileMode_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.FileMode);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_IO_FileShare
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileShare_TypeOf")]
	internal static void* /* System.Type */ System_IO_FileShare_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.FileShare);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_IO_FileOptions
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileOptions_TypeOf")]
	internal static void* /* System.Type */ System_IO_FileOptions_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.FileOptions);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_IO_FileStreamOptions
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Create")]
	internal static void* /* System.IO.FileStreamOptions */ System_IO_FileStreamOptions_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IO.FileStreamOptions __returnValue = new System.IO.FileStreamOptions();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Mode_Get")]
	internal static System.IO.FileMode /* System.IO.FileMode */ System_IO_FileStreamOptions_Mode_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.IO.FileMode __returnValue = __selfConverted.Mode;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileMode);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Mode_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_Mode_Set(void* /* System.IO.FileStreamOptions */ __self, System.IO.FileMode /* System.IO.FileMode */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.Mode = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Access_Get")]
	internal static System.IO.FileAccess /* System.IO.FileAccess */ System_IO_FileStreamOptions_Access_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.IO.FileAccess __returnValue = __selfConverted.Access;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileAccess);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Access_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_Access_Set(void* /* System.IO.FileStreamOptions */ __self, System.IO.FileAccess /* System.IO.FileAccess */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.Access = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Share_Get")]
	internal static System.IO.FileShare /* System.IO.FileShare */ System_IO_FileStreamOptions_Share_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.IO.FileShare __returnValue = __selfConverted.Share;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileShare);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Share_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_Share_Set(void* /* System.IO.FileStreamOptions */ __self, System.IO.FileShare /* System.IO.FileShare */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.Share = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Options_Get")]
	internal static System.IO.FileOptions /* System.IO.FileOptions */ System_IO_FileStreamOptions_Options_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.IO.FileOptions __returnValue = __selfConverted.Options;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileOptions);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Options_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_Options_Set(void* /* System.IO.FileStreamOptions */ __self, System.IO.FileOptions /* System.IO.FileOptions */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.Options = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_PreallocationSize_Get")]
	internal static long /* System.Int64 */ System_IO_FileStreamOptions_PreallocationSize_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.PreallocationSize;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_PreallocationSize_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_PreallocationSize_Set(void* /* System.IO.FileStreamOptions */ __self, long /* System.Int64 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.PreallocationSize = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_BufferSize_Get")]
	internal static int /* System.Int32 */ System_IO_FileStreamOptions_BufferSize_Get(void* /* System.IO.FileStreamOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.BufferSize;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_BufferSize_Set")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_BufferSize_Set(void* /* System.IO.FileStreamOptions */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileStreamOptions __selfConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(__self);
	
	
	    try {
			__selfConverted.BufferSize = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_TypeOf")]
	internal static void* /* System.Type */ System_IO_FileStreamOptions_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.FileStreamOptions);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileStreamOptions_Destroy")]
	internal static void /* System.Void */ System_IO_FileStreamOptions_Destroy(void* /* System.IO.FileStreamOptions */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_ManifestResourceInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_Create")]
	internal static void* /* System.Reflection.ManifestResourceInfo */ System_Reflection_ManifestResourceInfo_Create(void* /* System.Reflection.Assembly */ containingAssembly, byte* /* System.String */ containingFileName, System.Reflection.ResourceLocation /* System.Reflection.ResourceLocation */ resourceLocation, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly containingAssemblyConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(containingAssembly);
		System.String containingFileNameConverted = InteropUtils.ToDotNetString(containingFileName);
	
	    try {
			System.Reflection.ManifestResourceInfo __returnValue = new System.Reflection.ManifestResourceInfo(containingAssemblyConverted, containingFileNameConverted, resourceLocation);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_ReferencedAssembly_Get")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_ManifestResourceInfo_ReferencedAssembly_Get(void* /* System.Reflection.ManifestResourceInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ManifestResourceInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ManifestResourceInfo>(__self);
	
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.ReferencedAssembly;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_FileName_Get")]
	internal static byte* /* System.String */ System_Reflection_ManifestResourceInfo_FileName_Get(void* /* System.Reflection.ManifestResourceInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ManifestResourceInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ManifestResourceInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FileName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_ResourceLocation_Get")]
	internal static System.Reflection.ResourceLocation /* System.Reflection.ResourceLocation */ System_Reflection_ManifestResourceInfo_ResourceLocation_Get(void* /* System.Reflection.ManifestResourceInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ManifestResourceInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ManifestResourceInfo>(__self);
	
	
	    try {
			System.Reflection.ResourceLocation __returnValue = __selfConverted.ResourceLocation;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.ResourceLocation);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_ManifestResourceInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.ManifestResourceInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ManifestResourceInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_ManifestResourceInfo_Destroy(void* /* System.Reflection.ManifestResourceInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_ResourceLocation
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ResourceLocation_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_ResourceLocation_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.ResourceLocation);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Reflection_ModuleResolveEventHandler
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* e */, void* /* System.Reflection.Module */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.Reflection.ModuleResolveEventHandler> m_trampoline;
	internal System.Reflection.ModuleResolveEventHandler Trampoline
	{
		get {
			System.Reflection.ModuleResolveEventHandler? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_Reflection_ModuleResolveEventHandler(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* e */, void* /* System.Reflection.Module */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_Reflection_ModuleResolveEventHandler(System.Reflection.ModuleResolveEventHandler originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_Reflection_ModuleResolveEventHandler()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.Reflection.ModuleResolveEventHandler? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Reflection_ModuleResolveEventHandler);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Reflection.ModuleResolveEventHandler trampoline = (System.Reflection.ModuleResolveEventHandler)System.Delegate.CreateDelegate(typeof(System.Reflection.ModuleResolveEventHandler), this, invocationMethod);

		return trampoline;
	}

	private System.Reflection.Module __InvokeByCallingCFunction(System.Object /* System.Object */ sender, System.ResolveEventArgs /* System.ResolveEventArgs */ e)
	{
		void* senderConverted = sender.AllocateGCHandleAndGetAddress();
		void* eConverted = e.AllocateGCHandleAndGetAddress();
	


		var __returnValue = CFunction(Context, senderConverted, eConverted);
		var __returnValueConverted = InteropUtils.GetInstance<System.Reflection.Module>(__returnValue);

		InteropUtils.FreeIfAllocated(__returnValue);

		return __returnValueConverted;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ModuleResolveEventHandler_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* e */, void* /* System.Reflection.Module */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Reflection_ModuleResolveEventHandler(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ModuleResolveEventHandler_Invoke")]
	public static void* /* System.Reflection.Module */ Invoke(void* self, void* /* System.Object */ sender, void* /* System.ResolveEventArgs */ e, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_Reflection_ModuleResolveEventHandler>(self);

			System.Object senderConverted = InteropUtils.GetInstance<System.Object>(sender);
			System.ResolveEventArgs eConverted = InteropUtils.GetInstance<System.ResolveEventArgs>(e);
		


			var __returnValue = selfConverted.Trampoline(senderConverted, eConverted);
			var __returnValueConverted = __returnValue.AllocateGCHandleAndGetAddress();

			return __returnValueConverted;
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

			return null;
		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ModuleResolveEventHandler_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Reflection_ModuleResolveEventHandler>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ModuleResolveEventHandler_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* e */, void* /* System.Reflection.Module */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Reflection_ModuleResolveEventHandler>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ModuleResolveEventHandler_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Reflection_ModuleResolveEventHandler>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ModuleResolveEventHandler_Destroy")]
	internal static void /* System.Void */ System_Reflection_ModuleResolveEventHandler_Destroy(void* /* System.Reflection.ModuleResolveEventHandler */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_Module
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetPEKind")]
	internal static void /* System.Void */ System_Reflection_Module_GetPEKind(void* /* System.Reflection.Module */ __self, System.Reflection.PortableExecutableKinds* /* System.Reflection.PortableExecutableKinds */ peKind, System.Reflection.ImageFileMachine* /* System.Reflection.ImageFileMachine */ machine, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Reflection.PortableExecutableKinds peKindConverted;
		System.Reflection.ImageFileMachine machineConverted;
	
	    try {
			__selfConverted.GetPEKind(out peKindConverted, out machineConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (peKind is not null) {
				*peKind = peKindConverted;
			}
	
			if (machine is not null) {
				*machine = machineConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (peKind is not null) {
				*peKind = default(System.Reflection.PortableExecutableKinds);
			}
	
			if (machine is not null) {
				*machine = default(System.Reflection.ImageFileMachine);
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_IsResource")]
	internal static byte /* System.Boolean */ System_Reflection_Module_IsResource(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsResource();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_IsDefined")]
	internal static byte /* System.Boolean */ System_Reflection_Module_IsDefined(void* /* System.Reflection.Module */ __self, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefined(attributeTypeConverted, inheritConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetCustomAttributes")]
	internal static void* /* System.Object[] */ System_Reflection_Module_GetCustomAttributes(void* /* System.Reflection.Module */ __self, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Object[] __returnValue = __selfConverted.GetCustomAttributes(inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetCustomAttributes_1")]
	internal static void* /* System.Object[] */ System_Reflection_Module_GetCustomAttributes_1(void* /* System.Reflection.Module */ __self, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Object[] __returnValue = __selfConverted.GetCustomAttributes(attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_Module_GetMethod(void* /* System.Reflection.Module */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetMethod_1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_Module_GetMethod_1(void* /* System.Reflection.Module */ __self, byte* /* System.String */ name, void* /* System.Type[] */ types, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, typesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetMethod_2")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_Module_GetMethod_2(void* /* System.Reflection.Module */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, System.Reflection.CallingConventions /* System.Reflection.CallingConventions */ callConvention, void* /* System.Type[] */ types, void* /* System.Reflection.ParameterModifier[] */ modifiers, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Type[] typesConverted = InteropUtils.GetInstance<System.Type[]>(types);
		System.Reflection.ParameterModifier[] modifiersConverted = InteropUtils.GetInstance<System.Reflection.ParameterModifier[]>(modifiers);
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetMethod(nameConverted, bindingAttr, binderConverted, callConvention, typesConverted, modifiersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetMethods")]
	internal static void* /* System.Reflection.MethodInfo[] */ System_Reflection_Module_GetMethods(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.MethodInfo[] __returnValue = __selfConverted.GetMethods();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetMethods_1")]
	internal static void* /* System.Reflection.MethodInfo[] */ System_Reflection_Module_GetMethods_1(void* /* System.Reflection.Module */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingFlags, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.MethodInfo[] __returnValue = __selfConverted.GetMethods(bindingFlags);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetField")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_Module_GetField(void* /* System.Reflection.Module */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.GetField(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetField_1")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_Module_GetField_1(void* /* System.Reflection.Module */ __self, byte* /* System.String */ name, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.GetField(nameConverted, bindingAttr);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetFields")]
	internal static void* /* System.Reflection.FieldInfo[] */ System_Reflection_Module_GetFields(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.FieldInfo[] __returnValue = __selfConverted.GetFields();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetFields_1")]
	internal static void* /* System.Reflection.FieldInfo[] */ System_Reflection_Module_GetFields_1(void* /* System.Reflection.Module */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingFlags, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.FieldInfo[] __returnValue = __selfConverted.GetFields(bindingFlags);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetTypes")]
	internal static void* /* System.Type[] */ System_Reflection_Module_GetTypes(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Type[] __returnValue = __selfConverted.GetTypes();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetType_1")]
	internal static void* /* System.Type */ System_Reflection_Module_GetType_1(void* /* System.Reflection.Module */ __self, byte* /* System.String */ className, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String classNameConverted = InteropUtils.ToDotNetString(className);
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(classNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetType_2")]
	internal static void* /* System.Type */ System_Reflection_Module_GetType_2(void* /* System.Reflection.Module */ __self, byte* /* System.String */ className, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String classNameConverted = InteropUtils.ToDotNetString(className);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(classNameConverted, ignoreCaseConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetType_3")]
	internal static void* /* System.Type */ System_Reflection_Module_GetType_3(void* /* System.Reflection.Module */ __self, byte* /* System.String */ className, byte /* System.Boolean */ throwOnError, byte /* System.Boolean */ ignoreCase, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.String classNameConverted = InteropUtils.ToDotNetString(className);
		System.Boolean throwOnErrorConverted = throwOnError.ToBool();
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
	
	    try {
			System.Type __returnValue = __selfConverted.GetType(classNameConverted, throwOnErrorConverted, ignoreCaseConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_FindTypes")]
	internal static void* /* System.Type[] */ System_Reflection_Module_FindTypes(void* /* System.Reflection.Module */ __self, void* /* System.Reflection.TypeFilter */ filter, void* /* System.Object */ filterCriteria, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Reflection.TypeFilter filterConverted = InteropUtils.GetInstance<System_Reflection_TypeFilter>(filter)?.Trampoline;
		System.Object filterCriteriaConverted = InteropUtils.GetInstance<System.Object>(filterCriteria);
	
	    try {
			System.Type[] __returnValue = __selfConverted.FindTypes(filterConverted, filterCriteriaConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveField")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_Module_ResolveField(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.ResolveField(metadataToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveField_1")]
	internal static void* /* System.Reflection.FieldInfo */ System_Reflection_Module_ResolveField_1(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void* /* System.Type[] */ genericTypeArguments, void* /* System.Type[] */ genericMethodArguments, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Type[] genericTypeArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(genericTypeArguments);
		System.Type[] genericMethodArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(genericMethodArguments);
	
	    try {
			System.Reflection.FieldInfo __returnValue = __selfConverted.ResolveField(metadataToken, genericTypeArgumentsConverted, genericMethodArgumentsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveMember")]
	internal static void* /* System.Reflection.MemberInfo */ System_Reflection_Module_ResolveMember(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.MemberInfo __returnValue = __selfConverted.ResolveMember(metadataToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveMember_1")]
	internal static void* /* System.Reflection.MemberInfo */ System_Reflection_Module_ResolveMember_1(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void* /* System.Type[] */ genericTypeArguments, void* /* System.Type[] */ genericMethodArguments, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Type[] genericTypeArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(genericTypeArguments);
		System.Type[] genericMethodArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(genericMethodArguments);
	
	    try {
			System.Reflection.MemberInfo __returnValue = __selfConverted.ResolveMember(metadataToken, genericTypeArgumentsConverted, genericMethodArgumentsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveMethod")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_Module_ResolveMethod(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.MethodBase __returnValue = __selfConverted.ResolveMethod(metadataToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveMethod_1")]
	internal static void* /* System.Reflection.MethodBase */ System_Reflection_Module_ResolveMethod_1(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void* /* System.Type[] */ genericTypeArguments, void* /* System.Type[] */ genericMethodArguments, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Type[] genericTypeArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(genericTypeArguments);
		System.Type[] genericMethodArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(genericMethodArguments);
	
	    try {
			System.Reflection.MethodBase __returnValue = __selfConverted.ResolveMethod(metadataToken, genericTypeArgumentsConverted, genericMethodArgumentsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveSignature")]
	internal static void* /* System.Byte[] */ System_Reflection_Module_ResolveSignature(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Byte[] __returnValue = __selfConverted.ResolveSignature(metadataToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveString")]
	internal static byte* /* System.String */ System_Reflection_Module_ResolveString(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ResolveString(metadataToken);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveType")]
	internal static void* /* System.Type */ System_Reflection_Module_ResolveType(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.ResolveType(metadataToken);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ResolveType_1")]
	internal static void* /* System.Type */ System_Reflection_Module_ResolveType_1(void* /* System.Reflection.Module */ __self, int /* System.Int32 */ metadataToken, void* /* System.Type[] */ genericTypeArguments, void* /* System.Type[] */ genericMethodArguments, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Type[] genericTypeArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(genericTypeArguments);
		System.Type[] genericMethodArgumentsConverted = InteropUtils.GetInstance<System.Type[]>(genericMethodArguments);
	
	    try {
			System.Type __returnValue = __selfConverted.ResolveType(metadataToken, genericTypeArgumentsConverted, genericMethodArgumentsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetObjectData")]
	internal static void /* System.Void */ System_Reflection_Module_GetObjectData(void* /* System.Reflection.Module */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_Equals")]
	internal static byte /* System.Boolean */ System_Reflection_Module_Equals(void* /* System.Reflection.Module */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_Module_GetHashCode(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ToString")]
	internal static byte* /* System.String */ System_Reflection_Module_ToString(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_Assembly_Get")]
	internal static void* /* System.Reflection.Assembly */ System_Reflection_Module_Assembly_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.Assembly;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_FullyQualifiedName_Get")]
	internal static byte* /* System.String */ System_Reflection_Module_FullyQualifiedName_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullyQualifiedName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_Name_Get")]
	internal static byte* /* System.String */ System_Reflection_Module_Name_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_MDStreamVersion_Get")]
	internal static int /* System.Int32 */ System_Reflection_Module_MDStreamVersion_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MDStreamVersion;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ModuleVersionId_Get")]
	internal static void* /* System.Guid */ System_Reflection_Module_ModuleVersionId_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Guid __returnValue = __selfConverted.ModuleVersionId;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ScopeName_Get")]
	internal static byte* /* System.String */ System_Reflection_Module_ScopeName_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ScopeName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_ModuleHandle_Get")]
	internal static void* /* System.ModuleHandle */ System_Reflection_Module_ModuleHandle_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.ModuleHandle __returnValue = __selfConverted.ModuleHandle;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_MetadataToken_Get")]
	internal static int /* System.Int32 */ System_Reflection_Module_MetadataToken_Get(void* /* System.Reflection.Module */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.Module __selfConverted = InteropUtils.GetInstance<System.Reflection.Module>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MetadataToken;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_FilterTypeName_Get")]
	internal static void* /* System.Reflection.TypeFilter */ System_Reflection_Module_FilterTypeName_Get()
	{
	
		System.Reflection.TypeFilter __returnValue = System.Reflection.Module.FilterTypeName;
		void* __returnValueNative = new System_Reflection_TypeFilter(__returnValue).AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_FilterTypeNameIgnoreCase_Get")]
	internal static void* /* System.Reflection.TypeFilter */ System_Reflection_Module_FilterTypeNameIgnoreCase_Get()
	{
	
		System.Reflection.TypeFilter __returnValue = System.Reflection.Module.FilterTypeNameIgnoreCase;
		void* __returnValueNative = new System_Reflection_TypeFilter(__returnValue).AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_Module_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.Module);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_Module_Destroy")]
	internal static void /* System.Void */ System_Reflection_Module_Destroy(void* /* System.Reflection.Module */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Guid
{
	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Parse")]
	internal static void* /* System.Guid */ System_Guid_Parse(byte* /* System.String */ input, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
	
	    try {
			System.Guid __returnValue = System.Guid.Parse(inputConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_TryParse")]
	internal static byte /* System.Boolean */ System_Guid_TryParse(byte* /* System.String */ input, void** /* System.Guid */ result, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.Guid resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Guid.TryParse(inputConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_ParseExact")]
	internal static void* /* System.Guid */ System_Guid_ParseExact(byte* /* System.String */ input, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.Guid __returnValue = System.Guid.ParseExact(inputConverted, formatConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_TryParseExact")]
	internal static byte /* System.Boolean */ System_Guid_TryParseExact(byte* /* System.String */ input, byte* /* System.String */ format, void** /* System.Guid */ result, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Guid resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Guid.TryParseExact(inputConverted, formatConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_ToByteArray")]
	internal static void* /* System.Byte[] */ System_Guid_ToByteArray(void* /* System.Guid */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
	
	    try {
			System.Byte[] __returnValue = __selfConverted.ToByteArray();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_ToString")]
	internal static byte* /* System.String */ System_Guid_ToString(void* /* System.Guid */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_GetHashCode")]
	internal static int /* System.Int32 */ System_Guid_GetHashCode(void* /* System.Guid */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Equals")]
	internal static byte /* System.Boolean */ System_Guid_Equals(void* /* System.Guid */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Equals_1")]
	internal static byte /* System.Boolean */ System_Guid_Equals_1(void* /* System.Guid */ __self, void* /* System.Guid */ g, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.Guid gConverted = InteropUtils.GetInstance<System.Guid>(g);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(gConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_CompareTo")]
	internal static int /* System.Int32 */ System_Guid_CompareTo(void* /* System.Guid */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_CompareTo_1")]
	internal static int /* System.Int32 */ System_Guid_CompareTo_1(void* /* System.Guid */ __self, void* /* System.Guid */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.Guid valueConverted = InteropUtils.GetInstance<System.Guid>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_ToString_1")]
	internal static byte* /* System.String */ System_Guid_ToString_1(void* /* System.Guid */ __self, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_ToString_2")]
	internal static byte* /* System.String */ System_Guid_ToString_2(void* /* System.Guid */ __self, byte* /* System.String */ format, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Guid __selfConverted = InteropUtils.GetInstance<System.Guid>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = __selfConverted.ToString(formatConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Parse_1")]
	internal static void* /* System.Guid */ System_Guid_Parse_1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Guid __returnValue = System.Guid.Parse(sConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_TryParse_1")]
	internal static byte /* System.Boolean */ System_Guid_TryParse_1(byte* /* System.String */ s, void* /* System.IFormatProvider */ provider, void** /* System.Guid */ result, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Guid resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Guid.TryParse(sConverted, providerConverted, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_NewGuid")]
	internal static void* /* System.Guid */ System_Guid_NewGuid(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Guid __returnValue = System.Guid.NewGuid();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Create")]
	internal static void* /* System.Guid */ System_Guid_Create(void* /* System.Byte[] */ b, void** /* System.Exception */ __outException)
	{
		System.Byte[] bConverted = InteropUtils.GetInstance<System.Byte[]>(b);
	
	    try {
			System.Guid __returnValue = new System.Guid(bConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Create_1")]
	internal static void* /* System.Guid */ System_Guid_Create_1(uint /* System.UInt32 */ a, ushort /* System.UInt16 */ b, ushort /* System.UInt16 */ c, byte /* System.Byte */ d, byte /* System.Byte */ e, byte /* System.Byte */ f, byte /* System.Byte */ g, byte /* System.Byte */ h, byte /* System.Byte */ i, byte /* System.Byte */ j, byte /* System.Byte */ k, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Guid __returnValue = new System.Guid(a, b, c, d, e, f, g, h, i, j, k);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Create_2")]
	internal static void* /* System.Guid */ System_Guid_Create_2(int /* System.Int32 */ a, short /* System.Int16 */ b, short /* System.Int16 */ c, void* /* System.Byte[] */ d, void** /* System.Exception */ __outException)
	{
		System.Byte[] dConverted = InteropUtils.GetInstance<System.Byte[]>(d);
	
	    try {
			System.Guid __returnValue = new System.Guid(a, b, c, dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Create_3")]
	internal static void* /* System.Guid */ System_Guid_Create_3(int /* System.Int32 */ a, short /* System.Int16 */ b, short /* System.Int16 */ c, byte /* System.Byte */ d, byte /* System.Byte */ e, byte /* System.Byte */ f, byte /* System.Byte */ g, byte /* System.Byte */ h, byte /* System.Byte */ i, byte /* System.Byte */ j, byte /* System.Byte */ k, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Guid __returnValue = new System.Guid(a, b, c, d, e, f, g, h, i, j, k);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Create_4")]
	internal static void* /* System.Guid */ System_Guid_Create_4(byte* /* System.String */ g, void** /* System.Exception */ __outException)
	{
		System.String gConverted = InteropUtils.ToDotNetString(g);
	
	    try {
			System.Guid __returnValue = new System.Guid(gConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Empty_Get")]
	internal static void* /* System.Guid */ System_Guid_Empty_Get()
	{
	
		System.Guid __returnValue = System.Guid.Empty;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_TypeOf")]
	internal static void* /* System.Type */ System_Guid_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Guid);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Guid_Destroy")]
	internal static void /* System.Void */ System_Guid_Destroy(void* /* System.Guid */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Reflection_PortableExecutableKinds
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_PortableExecutableKinds_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_PortableExecutableKinds_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.PortableExecutableKinds);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}



internal unsafe class System_Reflection_ImageFileMachine
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ImageFileMachine_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_ImageFileMachine_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.ImageFileMachine);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}



internal unsafe class System_Reflection_TypeFilter
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.Type */ /* m */, void* /* System.Object */ /* filterCriteria */, byte /* System.Boolean */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.Reflection.TypeFilter> m_trampoline;
	internal System.Reflection.TypeFilter Trampoline
	{
		get {
			System.Reflection.TypeFilter? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_Reflection_TypeFilter(void* context, delegate* unmanaged<void* /* context */, void* /* System.Type */ /* m */, void* /* System.Object */ /* filterCriteria */, byte /* System.Boolean */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_Reflection_TypeFilter(System.Reflection.TypeFilter originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_Reflection_TypeFilter()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.Reflection.TypeFilter? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Reflection_TypeFilter);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Reflection.TypeFilter trampoline = (System.Reflection.TypeFilter)System.Delegate.CreateDelegate(typeof(System.Reflection.TypeFilter), this, invocationMethod);

		return trampoline;
	}

	private System.Boolean __InvokeByCallingCFunction(System.Type /* System.Type */ m, System.Object /* System.Object */ filterCriteria)
	{
		void* mConverted = m.AllocateGCHandleAndGetAddress();
		void* filterCriteriaConverted = filterCriteria.AllocateGCHandleAndGetAddress();
	


		var __returnValue = CFunction(Context, mConverted, filterCriteriaConverted);
		var __returnValueConverted = __returnValue.ToBool();

		return __returnValueConverted;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_TypeFilter_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Type */ /* m */, void* /* System.Object */ /* filterCriteria */, byte /* System.Boolean */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Reflection_TypeFilter(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_TypeFilter_Invoke")]
	public static byte /* System.Boolean */ Invoke(void* self, void* /* System.Type */ m, void* /* System.Object */ filterCriteria, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_Reflection_TypeFilter>(self);

			System.Type mConverted = InteropUtils.GetInstance<System.Type>(m);
			System.Object filterCriteriaConverted = InteropUtils.GetInstance<System.Object>(filterCriteria);
		


			var __returnValue = selfConverted.Trampoline(mConverted, filterCriteriaConverted);
			var __returnValueConverted = __returnValue.ToCBool();

			return __returnValueConverted;
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

			return 0;
		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_TypeFilter_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Reflection_TypeFilter>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_TypeFilter_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.Type */ /* m */, void* /* System.Object */ /* filterCriteria */, byte /* System.Boolean */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Reflection_TypeFilter>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_TypeFilter_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Reflection_TypeFilter>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_TypeFilter_Destroy")]
	internal static void /* System.Void */ System_Reflection_TypeFilter_Destroy(void* /* System.Reflection.TypeFilter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_ResolveEventArgs
{
	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_Create")]
	internal static void* /* System.ResolveEventArgs */ System_ResolveEventArgs_Create(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.ResolveEventArgs __returnValue = new System.ResolveEventArgs(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_Create_1")]
	internal static void* /* System.ResolveEventArgs */ System_ResolveEventArgs_Create_1(byte* /* System.String */ name, void* /* System.Reflection.Assembly */ requestingAssembly, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Reflection.Assembly requestingAssemblyConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(requestingAssembly);
	
	    try {
			System.ResolveEventArgs __returnValue = new System.ResolveEventArgs(nameConverted, requestingAssemblyConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_Name_Get")]
	internal static byte* /* System.String */ System_ResolveEventArgs_Name_Get(void* /* System.ResolveEventArgs */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ResolveEventArgs __selfConverted = InteropUtils.GetInstance<System.ResolveEventArgs>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_RequestingAssembly_Get")]
	internal static void* /* System.Reflection.Assembly */ System_ResolveEventArgs_RequestingAssembly_Get(void* /* System.ResolveEventArgs */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.ResolveEventArgs __selfConverted = InteropUtils.GetInstance<System.ResolveEventArgs>(__self);
	
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.RequestingAssembly;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_TypeOf")]
	internal static void* /* System.Type */ System_ResolveEventArgs_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.ResolveEventArgs);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventArgs_Destroy")]
	internal static void /* System.Void */ System_ResolveEventArgs_Destroy(void* /* System.ResolveEventArgs */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_EventArgs
{
	[UnmanagedCallersOnly(EntryPoint = "System_EventArgs_Create")]
	internal static void* /* System.EventArgs */ System_EventArgs_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.EventArgs __returnValue = new System.EventArgs();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_EventArgs_Empty_Get")]
	internal static void* /* System.EventArgs */ System_EventArgs_Empty_Get()
	{
	
		System.EventArgs __returnValue = System.EventArgs.Empty;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_EventArgs_TypeOf")]
	internal static void* /* System.Type */ System_EventArgs_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.EventArgs);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_EventArgs_Destroy")]
	internal static void /* System.Void */ System_EventArgs_Destroy(void* /* System.EventArgs */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}








internal unsafe class System_Security_SecurityRuleSet
{
	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityRuleSet_TypeOf")]
	internal static void* /* System.Type */ System_Security_SecurityRuleSet_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Security.SecurityRuleSet);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Text_Rune
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_CompareTo")]
	internal static int /* System.Int32 */ System_Text_Rune_CompareTo(void* /* System.Text.Rune */ __self, void* /* System.Text.Rune */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
		System.Text.Rune otherConverted = InteropUtils.GetInstance<System.Text.Rune>(other);
	
	    try {
			System.Int32 __returnValue = __selfConverted.CompareTo(otherConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Equals")]
	internal static byte /* System.Boolean */ System_Text_Rune_Equals(void* /* System.Text.Rune */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Equals_1")]
	internal static byte /* System.Boolean */ System_Text_Rune_Equals_1(void* /* System.Text.Rune */ __self, void* /* System.Text.Rune */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
		System.Text.Rune otherConverted = InteropUtils.GetInstance<System.Text.Rune>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_GetHashCode")]
	internal static int /* System.Int32 */ System_Text_Rune_GetHashCode(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_GetRuneAt")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_GetRuneAt(byte* /* System.String */ input, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.GetRuneAt(inputConverted, index);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsValid")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsValid(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsValid(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsValid_1")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsValid_1(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsValid(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ToString")]
	internal static byte* /* System.String */ System_Text_Rune_ToString(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_TryCreate")]
	internal static byte /* System.Boolean */ System_Text_Rune_TryCreate(char /* System.Char */ ch, void** /* System.Text.Rune */ result, void** /* System.Exception */ __outException)
	{
		System.Text.Rune resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.TryCreate(ch, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_TryCreate_1")]
	internal static byte /* System.Boolean */ System_Text_Rune_TryCreate_1(char /* System.Char */ highSurrogate, char /* System.Char */ lowSurrogate, void** /* System.Text.Rune */ result, void** /* System.Exception */ __outException)
	{
		System.Text.Rune resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.TryCreate(highSurrogate, lowSurrogate, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_TryCreate_2")]
	internal static byte /* System.Boolean */ System_Text_Rune_TryCreate_2(int /* System.Int32 */ value, void** /* System.Text.Rune */ result, void** /* System.Exception */ __outException)
	{
		System.Text.Rune resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.TryCreate(value, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_TryCreate_3")]
	internal static byte /* System.Boolean */ System_Text_Rune_TryCreate_3(uint /* System.UInt32 */ value, void** /* System.Text.Rune */ result, void** /* System.Exception */ __outException)
	{
		System.Text.Rune resultConverted;
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.TryCreate(value, out resultConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_TryGetRuneAt")]
	internal static byte /* System.Boolean */ System_Text_Rune_TryGetRuneAt(byte* /* System.String */ input, int /* System.Int32 */ index, void** /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.String inputConverted = InteropUtils.ToDotNetString(input);
		System.Text.Rune valueConverted;
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.TryGetRuneAt(inputConverted, index, out valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (value is not null) {
				*value = valueConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (value is not null) {
				*value = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_GetNumericValue")]
	internal static double /* System.Double */ System_Text_Rune_GetNumericValue(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Double __returnValue = System.Text.Rune.GetNumericValue(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_GetUnicodeCategory")]
	internal static System.Globalization.UnicodeCategory /* System.Globalization.UnicodeCategory */ System_Text_Rune_GetUnicodeCategory(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Globalization.UnicodeCategory __returnValue = System.Text.Rune.GetUnicodeCategory(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Globalization.UnicodeCategory);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsControl")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsControl(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsControl(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsDigit")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsDigit(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsDigit(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsLetter")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsLetter(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsLetter(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsLetterOrDigit")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsLetterOrDigit(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsLetterOrDigit(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsLower")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsLower(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsLower(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsNumber")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsNumber(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsNumber(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsPunctuation")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsPunctuation(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsPunctuation(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsSeparator")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsSeparator(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsSeparator(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsSymbol")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsSymbol(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsSymbol(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsUpper")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsUpper(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsUpper(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsWhiteSpace")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsWhiteSpace(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Boolean __returnValue = System.Text.Rune.IsWhiteSpace(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ToLower")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_ToLower(void* /* System.Text.Rune */ value, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.ToLower(valueConverted, cultureConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ToLowerInvariant")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_ToLowerInvariant(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.ToLowerInvariant(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ToUpper")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_ToUpper(void* /* System.Text.Rune */ value, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.ToUpper(valueConverted, cultureConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ToUpperInvariant")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_ToUpperInvariant(void* /* System.Text.Rune */ value, void** /* System.Exception */ __outException)
	{
		System.Text.Rune valueConverted = InteropUtils.GetInstance<System.Text.Rune>(value);
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.ToUpperInvariant(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Create")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_Create(char /* System.Char */ ch, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Rune __returnValue = new System.Text.Rune(ch);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Create_1")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_Create_1(char /* System.Char */ highSurrogate, char /* System.Char */ lowSurrogate, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Rune __returnValue = new System.Text.Rune(highSurrogate, lowSurrogate);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Create_2")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_Create_2(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Rune __returnValue = new System.Text.Rune(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Create_3")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_Create_3(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Rune __returnValue = new System.Text.Rune(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsAscii_Get")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsAscii_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAscii;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_IsBmp_Get")]
	internal static byte /* System.Boolean */ System_Text_Rune_IsBmp_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsBmp;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Plane_Get")]
	internal static int /* System.Int32 */ System_Text_Rune_Plane_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Plane;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_ReplacementChar_Get")]
	internal static void* /* System.Text.Rune */ System_Text_Rune_ReplacementChar_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Rune __returnValue = System.Text.Rune.ReplacementChar;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Utf16SequenceLength_Get")]
	internal static int /* System.Int32 */ System_Text_Rune_Utf16SequenceLength_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Utf16SequenceLength;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Utf8SequenceLength_Get")]
	internal static int /* System.Int32 */ System_Text_Rune_Utf8SequenceLength_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Utf8SequenceLength;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Value_Get")]
	internal static int /* System.Int32 */ System_Text_Rune_Value_Get(void* /* System.Text.Rune */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Rune __selfConverted = InteropUtils.GetInstance<System.Text.Rune>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_TypeOf")]
	internal static void* /* System.Type */ System_Text_Rune_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.Rune);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Rune_Destroy")]
	internal static void /* System.Void */ System_Text_Rune_Destroy(void* /* System.Text.Rune */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Buffers_OperationStatus
{
	[UnmanagedCallersOnly(EntryPoint = "System_Buffers_OperationStatus_TypeOf")]
	internal static void* /* System.Type */ System_Buffers_OperationStatus_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Buffers.OperationStatus);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}



internal unsafe class System_Globalization_CompareOptions
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_CompareOptions_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_CompareOptions_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.CompareOptions);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Globalization_SortKey
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_Compare")]
	internal static int /* System.Int32 */ System_Globalization_SortKey_Compare(void* /* System.Globalization.SortKey */ sortkey1, void* /* System.Globalization.SortKey */ sortkey2, void** /* System.Exception */ __outException)
	{
		System.Globalization.SortKey sortkey1Converted = InteropUtils.GetInstance<System.Globalization.SortKey>(sortkey1);
		System.Globalization.SortKey sortkey2Converted = InteropUtils.GetInstance<System.Globalization.SortKey>(sortkey2);
	
	    try {
			System.Int32 __returnValue = System.Globalization.SortKey.Compare(sortkey1Converted, sortkey2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_Equals")]
	internal static byte /* System.Boolean */ System_Globalization_SortKey_Equals(void* /* System.Globalization.SortKey */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortKey __selfConverted = InteropUtils.GetInstance<System.Globalization.SortKey>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_GetHashCode")]
	internal static int /* System.Int32 */ System_Globalization_SortKey_GetHashCode(void* /* System.Globalization.SortKey */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortKey __selfConverted = InteropUtils.GetInstance<System.Globalization.SortKey>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_ToString")]
	internal static byte* /* System.String */ System_Globalization_SortKey_ToString(void* /* System.Globalization.SortKey */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortKey __selfConverted = InteropUtils.GetInstance<System.Globalization.SortKey>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_OriginalString_Get")]
	internal static byte* /* System.String */ System_Globalization_SortKey_OriginalString_Get(void* /* System.Globalization.SortKey */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortKey __selfConverted = InteropUtils.GetInstance<System.Globalization.SortKey>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.OriginalString;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_KeyData_Get")]
	internal static void* /* System.Byte[] */ System_Globalization_SortKey_KeyData_Get(void* /* System.Globalization.SortKey */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortKey __selfConverted = InteropUtils.GetInstance<System.Globalization.SortKey>(__self);
	
	
	    try {
			System.Byte[] __returnValue = __selfConverted.KeyData;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_SortKey_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.SortKey);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortKey_Destroy")]
	internal static void /* System.Void */ System_Globalization_SortKey_Destroy(void* /* System.Globalization.SortKey */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Globalization_SortVersion
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_Equals")]
	internal static byte /* System.Boolean */ System_Globalization_SortVersion_Equals(void* /* System.Globalization.SortVersion */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortVersion __selfConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_Equals_1")]
	internal static byte /* System.Boolean */ System_Globalization_SortVersion_Equals_1(void* /* System.Globalization.SortVersion */ __self, void* /* System.Globalization.SortVersion */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortVersion __selfConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(__self);
	
		System.Globalization.SortVersion otherConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(otherConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_GetHashCode")]
	internal static int /* System.Int32 */ System_Globalization_SortVersion_GetHashCode(void* /* System.Globalization.SortVersion */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortVersion __selfConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_Create")]
	internal static void* /* System.Globalization.SortVersion */ System_Globalization_SortVersion_Create(int /* System.Int32 */ fullVersion, void* /* System.Guid */ sortId, void** /* System.Exception */ __outException)
	{
		System.Guid sortIdConverted = InteropUtils.GetInstance<System.Guid>(sortId);
	
	    try {
			System.Globalization.SortVersion __returnValue = new System.Globalization.SortVersion(fullVersion, sortIdConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_FullVersion_Get")]
	internal static int /* System.Int32 */ System_Globalization_SortVersion_FullVersion_Get(void* /* System.Globalization.SortVersion */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortVersion __selfConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.FullVersion;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_SortId_Get")]
	internal static void* /* System.Guid */ System_Globalization_SortVersion_SortId_Get(void* /* System.Globalization.SortVersion */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.SortVersion __selfConverted = InteropUtils.GetInstance<System.Globalization.SortVersion>(__self);
	
	
	    try {
			System.Guid __returnValue = __selfConverted.SortId;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_SortVersion_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.SortVersion);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_SortVersion_Destroy")]
	internal static void /* System.Void */ System_Globalization_SortVersion_Destroy(void* /* System.Globalization.SortVersion */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Globalization_TextInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_Clone")]
	internal static void* /* System.Object */ System_Globalization_TextInfo_Clone(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ReadOnly")]
	internal static void* /* System.Globalization.TextInfo */ System_Globalization_TextInfo_ReadOnly(void* /* System.Globalization.TextInfo */ textInfo, void** /* System.Exception */ __outException)
	{
		System.Globalization.TextInfo textInfoConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(textInfo);
	
	    try {
			System.Globalization.TextInfo __returnValue = System.Globalization.TextInfo.ReadOnly(textInfoConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToLower")]
	internal static char /* System.Char */ System_Globalization_TextInfo_ToLower(void* /* System.Globalization.TextInfo */ __self, char /* System.Char */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Char __returnValue = __selfConverted.ToLower(c);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToLower_1")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_ToLower_1(void* /* System.Globalization.TextInfo */ __self, byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = __selfConverted.ToLower(strConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToUpper")]
	internal static char /* System.Char */ System_Globalization_TextInfo_ToUpper(void* /* System.Globalization.TextInfo */ __self, char /* System.Char */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Char __returnValue = __selfConverted.ToUpper(c);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToUpper_1")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_ToUpper_1(void* /* System.Globalization.TextInfo */ __self, byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = __selfConverted.ToUpper(strConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_Equals")]
	internal static byte /* System.Boolean */ System_Globalization_TextInfo_Equals(void* /* System.Globalization.TextInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_GetHashCode(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToString")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_ToString(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ToTitleCase")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_ToTitleCase(void* /* System.Globalization.TextInfo */ __self, byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = __selfConverted.ToTitleCase(strConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ANSICodePage_Get")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_ANSICodePage_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ANSICodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_OEMCodePage_Get")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_OEMCodePage_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.OEMCodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_MacCodePage_Get")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_MacCodePage_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MacCodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_EBCDICCodePage_Get")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_EBCDICCodePage_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.EBCDICCodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_LCID_Get")]
	internal static int /* System.Int32 */ System_Globalization_TextInfo_LCID_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.LCID;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_CultureName_Get")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_CultureName_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CultureName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Globalization_TextInfo_IsReadOnly_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ListSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_TextInfo_ListSeparator_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ListSeparator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_ListSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_TextInfo_ListSeparator_Set(void* /* System.Globalization.TextInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			__selfConverted.ListSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_IsRightToLeft_Get")]
	internal static byte /* System.Boolean */ System_Globalization_TextInfo_IsRightToLeft_Get(void* /* System.Globalization.TextInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.TextInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.TextInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsRightToLeft;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_TextInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.TextInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_TextInfo_Destroy")]
	internal static void /* System.Void */ System_Globalization_TextInfo_Destroy(void* /* System.Globalization.TextInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Globalization_NumberFormatInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_GetInstance")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_NumberFormatInfo_GetInstance(void* /* System.IFormatProvider */ formatProvider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider formatProviderConverted = InteropUtils.GetInstance<System.IFormatProvider>(formatProvider);
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = System.Globalization.NumberFormatInfo.GetInstance(formatProviderConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_Clone")]
	internal static void* /* System.Object */ System_Globalization_NumberFormatInfo_Clone(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_GetFormat")]
	internal static void* /* System.Object */ System_Globalization_NumberFormatInfo_GetFormat(void* /* System.Globalization.NumberFormatInfo */ __self, void* /* System.Type */ formatType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
		System.Type formatTypeConverted = InteropUtils.GetInstance<System.Type>(formatType);
	
	    try {
			System.Object __returnValue = __selfConverted.GetFormat(formatTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_ReadOnly")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_NumberFormatInfo_ReadOnly(void* /* System.Globalization.NumberFormatInfo */ nfi, void** /* System.Exception */ __outException)
	{
		System.Globalization.NumberFormatInfo nfiConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(nfi);
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = System.Globalization.NumberFormatInfo.ReadOnly(nfiConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_Create")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_NumberFormatInfo_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = new System.Globalization.NumberFormatInfo();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_InvariantInfo_Get")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_NumberFormatInfo_InvariantInfo_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = System.Globalization.NumberFormatInfo.InvariantInfo;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.CurrencyDecimalDigits;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyDecimalDigits_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyDecimalDigits = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CurrencyDecimalSeparator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyDecimalSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyDecimalSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Globalization_NumberFormatInfo_IsReadOnly_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyGroupSizes_Get")]
	internal static void* /* System.Int32[] */ System_Globalization_NumberFormatInfo_CurrencyGroupSizes_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32[] __returnValue = __selfConverted.CurrencyGroupSizes;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyGroupSizes_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyGroupSizes_Set(void* /* System.Globalization.NumberFormatInfo */ __self, void* /* System.Int32[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyGroupSizes = InteropUtils.GetInstance<System.Int32[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberGroupSizes_Get")]
	internal static void* /* System.Int32[] */ System_Globalization_NumberFormatInfo_NumberGroupSizes_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32[] __returnValue = __selfConverted.NumberGroupSizes;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberGroupSizes_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NumberGroupSizes_Set(void* /* System.Globalization.NumberFormatInfo */ __self, void* /* System.Int32[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NumberGroupSizes = InteropUtils.GetInstance<System.Int32[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentGroupSizes_Get")]
	internal static void* /* System.Int32[] */ System_Globalization_NumberFormatInfo_PercentGroupSizes_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32[] __returnValue = __selfConverted.PercentGroupSizes;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentGroupSizes_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentGroupSizes_Set(void* /* System.Globalization.NumberFormatInfo */ __self, void* /* System.Int32[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentGroupSizes = InteropUtils.GetInstance<System.Int32[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CurrencyGroupSeparator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyGroupSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyGroupSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencySymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_CurrencySymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.CurrencySymbol;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencySymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencySymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencySymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrentInfo_Get")]
	internal static void* /* System.Globalization.NumberFormatInfo */ System_Globalization_NumberFormatInfo_CurrentInfo_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.NumberFormatInfo __returnValue = System.Globalization.NumberFormatInfo.CurrentInfo;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NaNSymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_NaNSymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NaNSymbol;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NaNSymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NaNSymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NaNSymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.CurrencyNegativePattern;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyNegativePattern_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyNegativePattern = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberNegativePattern_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_NumberNegativePattern_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.NumberNegativePattern;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberNegativePattern_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NumberNegativePattern_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NumberNegativePattern = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentPositivePattern_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_PercentPositivePattern_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.PercentPositivePattern;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentPositivePattern_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentPositivePattern_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentPositivePattern = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentNegativePattern_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_PercentNegativePattern_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.PercentNegativePattern;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentNegativePattern_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentNegativePattern_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentNegativePattern = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NegativeInfinitySymbol;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NegativeInfinitySymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NegativeInfinitySymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NegativeSign_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_NegativeSign_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NegativeSign;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NegativeSign_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NegativeSign_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NegativeSign = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberDecimalDigits_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_NumberDecimalDigits_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.NumberDecimalDigits;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberDecimalDigits_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NumberDecimalDigits_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NumberDecimalDigits = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NumberDecimalSeparator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NumberDecimalSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NumberDecimalSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberGroupSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_NumberGroupSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NumberGroupSeparator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NumberGroupSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NumberGroupSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NumberGroupSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.CurrencyPositivePattern;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_CurrencyPositivePattern_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CurrencyPositivePattern = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PositiveInfinitySymbol;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PositiveInfinitySymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PositiveInfinitySymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PositiveSign_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PositiveSign_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PositiveSign;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PositiveSign_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PositiveSign_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PositiveSign = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentDecimalDigits_Get")]
	internal static int /* System.Int32 */ System_Globalization_NumberFormatInfo_PercentDecimalDigits_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.PercentDecimalDigits;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentDecimalDigits_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentDecimalDigits_Set(void* /* System.Globalization.NumberFormatInfo */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentDecimalDigits = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PercentDecimalSeparator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentDecimalSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentDecimalSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentGroupSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PercentGroupSeparator_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PercentGroupSeparator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentGroupSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentGroupSeparator_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentGroupSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentSymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PercentSymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PercentSymbol;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PercentSymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PercentSymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PercentSymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PerMilleSymbol_Get")]
	internal static byte* /* System.String */ System_Globalization_NumberFormatInfo_PerMilleSymbol_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PerMilleSymbol;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_PerMilleSymbol_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_PerMilleSymbol_Set(void* /* System.Globalization.NumberFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PerMilleSymbol = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NativeDigits_Get")]
	internal static void* /* System.String[] */ System_Globalization_NumberFormatInfo_NativeDigits_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.NativeDigits;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_NativeDigits_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_NativeDigits_Set(void* /* System.Globalization.NumberFormatInfo */ __self, void* /* System.String[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.NativeDigits = InteropUtils.GetInstance<System.String[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_DigitSubstitution_Get")]
	internal static System.Globalization.DigitShapes /* System.Globalization.DigitShapes */ System_Globalization_NumberFormatInfo_DigitSubstitution_Get(void* /* System.Globalization.NumberFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			System.Globalization.DigitShapes __returnValue = __selfConverted.DigitSubstitution;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Globalization.DigitShapes);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_DigitSubstitution_Set")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_DigitSubstitution_Set(void* /* System.Globalization.NumberFormatInfo */ __self, System.Globalization.DigitShapes /* System.Globalization.DigitShapes */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.NumberFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.NumberFormatInfo>(__self);
	
	
	    try {
			__selfConverted.DigitSubstitution = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_NumberFormatInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.NumberFormatInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_NumberFormatInfo_Destroy")]
	internal static void /* System.Void */ System_Globalization_NumberFormatInfo_Destroy(void* /* System.Globalization.NumberFormatInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Globalization_DigitShapes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DigitShapes_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_DigitShapes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.DigitShapes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Globalization_DateTimeFormatInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetInstance")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_DateTimeFormatInfo_GetInstance(void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = System.Globalization.DateTimeFormatInfo.GetInstance(providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetFormat")]
	internal static void* /* System.Object */ System_Globalization_DateTimeFormatInfo_GetFormat(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.Type */ formatType, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
		System.Type formatTypeConverted = InteropUtils.GetInstance<System.Type>(formatType);
	
	    try {
			System.Object __returnValue = __selfConverted.GetFormat(formatTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_Clone")]
	internal static void* /* System.Object */ System_Globalization_DateTimeFormatInfo_Clone(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetEra")]
	internal static int /* System.Int32 */ System_Globalization_DateTimeFormatInfo_GetEra(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ eraName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
		System.String eraNameConverted = InteropUtils.ToDotNetString(eraName);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetEra(eraNameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetEraName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetEraName(void* /* System.Globalization.DateTimeFormatInfo */ __self, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetEraName(era);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetAbbreviatedEraName(void* /* System.Globalization.DateTimeFormatInfo */ __self, int /* System.Int32 */ era, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetAbbreviatedEraName(era);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetAbbreviatedDayName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetAbbreviatedDayName(void* /* System.Globalization.DateTimeFormatInfo */ __self, System.DayOfWeek /* System.DayOfWeek */ dayofweek, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetAbbreviatedDayName(dayofweek);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetShortestDayName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetShortestDayName(void* /* System.Globalization.DateTimeFormatInfo */ __self, System.DayOfWeek /* System.DayOfWeek */ dayOfWeek, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetShortestDayName(dayOfWeek);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns")]
	internal static void* /* System.String[] */ System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.GetAllDateTimePatterns();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_1")]
	internal static void* /* System.String[] */ System_Globalization_DateTimeFormatInfo_GetAllDateTimePatterns_1(void* /* System.Globalization.DateTimeFormatInfo */ __self, char /* System.Char */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.GetAllDateTimePatterns(format);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetDayName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetDayName(void* /* System.Globalization.DateTimeFormatInfo */ __self, System.DayOfWeek /* System.DayOfWeek */ dayofweek, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetDayName(dayofweek);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetAbbreviatedMonthName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetAbbreviatedMonthName(void* /* System.Globalization.DateTimeFormatInfo */ __self, int /* System.Int32 */ month, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetAbbreviatedMonthName(month);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_GetMonthName")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_GetMonthName(void* /* System.Globalization.DateTimeFormatInfo */ __self, int /* System.Int32 */ month, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetMonthName(month);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ReadOnly")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_DateTimeFormatInfo_ReadOnly(void* /* System.Globalization.DateTimeFormatInfo */ dtfi, void** /* System.Exception */ __outException)
	{
		System.Globalization.DateTimeFormatInfo dtfiConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(dtfi);
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = System.Globalization.DateTimeFormatInfo.ReadOnly(dtfiConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_SetAllDateTimePatterns")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_SetAllDateTimePatterns(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.String[] */ patterns, char /* System.Char */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
		System.String[] patternsConverted = InteropUtils.GetInstance<System.String[]>(patterns);
	
	    try {
			__selfConverted.SetAllDateTimePatterns(patternsConverted, format);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_Create")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_DateTimeFormatInfo_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = new System.Globalization.DateTimeFormatInfo();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_InvariantInfo_Get")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_DateTimeFormatInfo_InvariantInfo_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = System.Globalization.DateTimeFormatInfo.InvariantInfo;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_CurrentInfo_Get")]
	internal static void* /* System.Globalization.DateTimeFormatInfo */ System_Globalization_DateTimeFormatInfo_CurrentInfo_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Globalization.DateTimeFormatInfo __returnValue = System.Globalization.DateTimeFormatInfo.CurrentInfo;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_AMDesignator_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_AMDesignator_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.AMDesignator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_AMDesignator_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_AMDesignator_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.AMDesignator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_Calendar_Get")]
	internal static void* /* System.Globalization.Calendar */ System_Globalization_DateTimeFormatInfo_Calendar_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.Globalization.Calendar __returnValue = __selfConverted.Calendar;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_Calendar_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_Calendar_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.Globalization.Calendar */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.Calendar = InteropUtils.GetInstance<System.Globalization.Calendar>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_DateSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_DateSeparator_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.DateSeparator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_DateSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_DateSeparator_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.DateSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Get")]
	internal static System.DayOfWeek /* System.DayOfWeek */ System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.DayOfWeek __returnValue = __selfConverted.FirstDayOfWeek;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.DayOfWeek);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_FirstDayOfWeek_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, System.DayOfWeek /* System.DayOfWeek */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.FirstDayOfWeek = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Get")]
	internal static System.Globalization.CalendarWeekRule /* System.Globalization.CalendarWeekRule */ System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.Globalization.CalendarWeekRule __returnValue = __selfConverted.CalendarWeekRule;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Globalization.CalendarWeekRule);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_CalendarWeekRule_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, System.Globalization.CalendarWeekRule /* System.Globalization.CalendarWeekRule */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.CalendarWeekRule = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullDateTimePattern;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_FullDateTimePattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.FullDateTimePattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_LongDatePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_LongDatePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.LongDatePattern;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_LongDatePattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_LongDatePattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.LongDatePattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_LongTimePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_LongTimePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.LongTimePattern;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_LongTimePattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_LongTimePattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.LongTimePattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_MonthDayPattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_MonthDayPattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.MonthDayPattern;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_MonthDayPattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_MonthDayPattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.MonthDayPattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_PMDesignator_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_PMDesignator_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.PMDesignator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_PMDesignator_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_PMDesignator_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.PMDesignator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_RFC1123Pattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_RFC1123Pattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.RFC1123Pattern;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ShortDatePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_ShortDatePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ShortDatePattern;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ShortDatePattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_ShortDatePattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.ShortDatePattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ShortTimePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_ShortTimePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ShortTimePattern;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ShortTimePattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_ShortTimePattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.ShortTimePattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_SortableDateTimePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_SortableDateTimePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.SortableDateTimePattern;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_TimeSeparator_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_TimeSeparator_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TimeSeparator;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_TimeSeparator_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_TimeSeparator_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.TimeSeparator = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_UniversalSortableDateTimePattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.UniversalSortableDateTimePattern;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_YearMonthPattern_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_YearMonthPattern_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.YearMonthPattern;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_YearMonthPattern_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_YearMonthPattern_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.YearMonthPattern = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_Get")]
	internal static void* /* System.String[] */ System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.AbbreviatedDayNames;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_AbbreviatedDayNames_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.String[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.AbbreviatedDayNames = InteropUtils.GetInstance<System.String[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ShortestDayNames_Get")]
	internal static void* /* System.String[] */ System_Globalization_DateTimeFormatInfo_ShortestDayNames_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.ShortestDayNames;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_ShortestDayNames_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_ShortestDayNames_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.String[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.ShortestDayNames = InteropUtils.GetInstance<System.String[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_DayNames_Get")]
	internal static void* /* System.String[] */ System_Globalization_DateTimeFormatInfo_DayNames_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.DayNames;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_DayNames_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_DayNames_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.String[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.DayNames = InteropUtils.GetInstance<System.String[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_Get")]
	internal static void* /* System.String[] */ System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.AbbreviatedMonthNames;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_AbbreviatedMonthNames_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.String[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.AbbreviatedMonthNames = InteropUtils.GetInstance<System.String[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_MonthNames_Get")]
	internal static void* /* System.String[] */ System_Globalization_DateTimeFormatInfo_MonthNames_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.MonthNames;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_MonthNames_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_MonthNames_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.String[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.MonthNames = InteropUtils.GetInstance<System.String[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Globalization_DateTimeFormatInfo_IsReadOnly_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_NativeCalendarName_Get")]
	internal static byte* /* System.String */ System_Globalization_DateTimeFormatInfo_NativeCalendarName_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NativeCalendarName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_Get")]
	internal static void* /* System.String[] */ System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.AbbreviatedMonthGenitiveNames;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_AbbreviatedMonthGenitiveNames_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.String[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.AbbreviatedMonthGenitiveNames = InteropUtils.GetInstance<System.String[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_Get")]
	internal static void* /* System.String[] */ System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_Get(void* /* System.Globalization.DateTimeFormatInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			System.String[] __returnValue = __selfConverted.MonthGenitiveNames;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_Set")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_MonthGenitiveNames_Set(void* /* System.Globalization.DateTimeFormatInfo */ __self, void* /* System.String[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Globalization.DateTimeFormatInfo __selfConverted = InteropUtils.GetInstance<System.Globalization.DateTimeFormatInfo>(__self);
	
	
	    try {
			__selfConverted.MonthGenitiveNames = InteropUtils.GetInstance<System.String[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_TypeOf")]
	internal static void* /* System.Type */ System_Globalization_DateTimeFormatInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Globalization.DateTimeFormatInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Globalization_DateTimeFormatInfo_Destroy")]
	internal static void /* System.Void */ System_Globalization_DateTimeFormatInfo_Destroy(void* /* System.Globalization.DateTimeFormatInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




// Type "TState" was skipped. Reason: It has no full name.

internal unsafe class System_CharEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_Clone")]
	internal static void* /* System.Object */ System_CharEnumerator_Clone(void* /* System.CharEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.CharEnumerator __selfConverted = InteropUtils.GetInstance<System.CharEnumerator>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_MoveNext")]
	internal static byte /* System.Boolean */ System_CharEnumerator_MoveNext(void* /* System.CharEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.CharEnumerator __selfConverted = InteropUtils.GetInstance<System.CharEnumerator>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MoveNext();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_Dispose")]
	internal static void /* System.Void */ System_CharEnumerator_Dispose(void* /* System.CharEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.CharEnumerator __selfConverted = InteropUtils.GetInstance<System.CharEnumerator>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_Reset")]
	internal static void /* System.Void */ System_CharEnumerator_Reset(void* /* System.CharEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.CharEnumerator __selfConverted = InteropUtils.GetInstance<System.CharEnumerator>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_Current_Get")]
	internal static char /* System.Char */ System_CharEnumerator_Current_Get(void* /* System.CharEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.CharEnumerator __selfConverted = InteropUtils.GetInstance<System.CharEnumerator>(__self);
	
	
	    try {
			System.Char __returnValue = __selfConverted.Current;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_TypeOf")]
	internal static void* /* System.Type */ System_CharEnumerator_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.CharEnumerator);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_CharEnumerator_Destroy")]
	internal static void /* System.Void */ System_CharEnumerator_Destroy(void* /* System.CharEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_StringRuneEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringRuneEnumerator_GetEnumerator")]
	internal static void* /* System.Text.StringRuneEnumerator */ System_Text_StringRuneEnumerator_GetEnumerator(void* /* System.Text.StringRuneEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringRuneEnumerator __selfConverted = InteropUtils.GetInstance<System.Text.StringRuneEnumerator>(__self);
	
	
	    try {
			System.Text.StringRuneEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringRuneEnumerator_MoveNext")]
	internal static byte /* System.Boolean */ System_Text_StringRuneEnumerator_MoveNext(void* /* System.Text.StringRuneEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringRuneEnumerator __selfConverted = InteropUtils.GetInstance<System.Text.StringRuneEnumerator>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MoveNext();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringRuneEnumerator_Current_Get")]
	internal static void* /* System.Text.Rune */ System_Text_StringRuneEnumerator_Current_Get(void* /* System.Text.StringRuneEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringRuneEnumerator __selfConverted = InteropUtils.GetInstance<System.Text.StringRuneEnumerator>(__self);
	
	
	    try {
			System.Text.Rune __returnValue = __selfConverted.Current;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringRuneEnumerator_TypeOf")]
	internal static void* /* System.Type */ System_Text_StringRuneEnumerator_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.StringRuneEnumerator);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringRuneEnumerator_Destroy")]
	internal static void /* System.Void */ System_Text_StringRuneEnumerator_Destroy(void* /* System.Text.StringRuneEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_NormalizationForm
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_NormalizationForm_TypeOf")]
	internal static void* /* System.Type */ System_Text_NormalizationForm_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.NormalizationForm);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Text_CompositeFormat
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_CompositeFormat_Parse")]
	internal static void* /* System.Text.CompositeFormat */ System_Text_CompositeFormat_Parse(byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.Text.CompositeFormat __returnValue = System.Text.CompositeFormat.Parse(formatConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_CompositeFormat_TryParse")]
	internal static byte /* System.Boolean */ System_Text_CompositeFormat_TryParse(byte* /* System.String */ format, void** /* System.Text.CompositeFormat */ compositeFormat, void** /* System.Exception */ __outException)
	{
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Text.CompositeFormat compositeFormatConverted;
	
	    try {
			System.Boolean __returnValue = System.Text.CompositeFormat.TryParse(formatConverted, out compositeFormatConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (compositeFormat is not null) {
				*compositeFormat = compositeFormatConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (compositeFormat is not null) {
				*compositeFormat = null;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_CompositeFormat_Format_Get")]
	internal static byte* /* System.String */ System_Text_CompositeFormat_Format_Get(void* /* System.Text.CompositeFormat */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.CompositeFormat __selfConverted = InteropUtils.GetInstance<System.Text.CompositeFormat>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Format;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_CompositeFormat_TypeOf")]
	internal static void* /* System.Type */ System_Text_CompositeFormat_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.CompositeFormat);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_CompositeFormat_Destroy")]
	internal static void /* System.Void */ System_Text_CompositeFormat_Destroy(void* /* System.Text.CompositeFormat */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
internal unsafe class System_StringSplitOptions
{
	[UnmanagedCallersOnly(EntryPoint = "System_StringSplitOptions_TypeOf")]
	internal static void* /* System.Type */ System_StringSplitOptions_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.StringSplitOptions);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Text_Encoding
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Convert")]
	internal static void* /* System.Byte[] */ System_Text_Encoding_Convert(void* /* System.Text.Encoding */ srcEncoding, void* /* System.Text.Encoding */ dstEncoding, void* /* System.Byte[] */ bytes, void** /* System.Exception */ __outException)
	{
		System.Text.Encoding srcEncodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(srcEncoding);
		System.Text.Encoding dstEncodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(dstEncoding);
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.Byte[] __returnValue = System.Text.Encoding.Convert(srcEncodingConverted, dstEncodingConverted, bytesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Convert_1")]
	internal static void* /* System.Byte[] */ System_Text_Encoding_Convert_1(void* /* System.Text.Encoding */ srcEncoding, void* /* System.Text.Encoding */ dstEncoding, void* /* System.Byte[] */ bytes, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		System.Text.Encoding srcEncodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(srcEncoding);
		System.Text.Encoding dstEncodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(dstEncoding);
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.Byte[] __returnValue = System.Text.Encoding.Convert(srcEncodingConverted, dstEncodingConverted, bytesConverted, index, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_RegisterProvider")]
	internal static void /* System.Void */ System_Text_Encoding_RegisterProvider(void* /* System.Text.EncodingProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Text.EncodingProvider providerConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(provider);
	
	    try {
			System.Text.Encoding.RegisterProvider(providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncoding")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_GetEncoding(int /* System.Int32 */ codepage, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.GetEncoding(codepage);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncoding_1")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_GetEncoding_1(int /* System.Int32 */ codepage, void* /* System.Text.EncoderFallback */ encoderFallback, void* /* System.Text.DecoderFallback */ decoderFallback, void** /* System.Exception */ __outException)
	{
		System.Text.EncoderFallback encoderFallbackConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(encoderFallback);
		System.Text.DecoderFallback decoderFallbackConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(decoderFallback);
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.GetEncoding(codepage, encoderFallbackConverted, decoderFallbackConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncoding_2")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_GetEncoding_2(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.GetEncoding(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncoding_3")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_GetEncoding_3(byte* /* System.String */ name, void* /* System.Text.EncoderFallback */ encoderFallback, void* /* System.Text.DecoderFallback */ decoderFallback, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Text.EncoderFallback encoderFallbackConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(encoderFallback);
		System.Text.DecoderFallback decoderFallbackConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(decoderFallback);
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.GetEncoding(nameConverted, encoderFallbackConverted, decoderFallbackConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncodings")]
	internal static void* /* System.Text.EncodingInfo[] */ System_Text_Encoding_GetEncodings(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.EncodingInfo[] __returnValue = System.Text.Encoding.GetEncodings();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetPreamble")]
	internal static void* /* System.Byte[] */ System_Text_Encoding_GetPreamble(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Byte[] __returnValue = __selfConverted.GetPreamble();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Clone")]
	internal static void* /* System.Object */ System_Text_Encoding_Clone(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetByteCount")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetByteCount(void* /* System.Text.Encoding */ __self, void* /* System.Char[] */ chars, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetByteCount(charsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetByteCount_1")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetByteCount_1(void* /* System.Text.Encoding */ __self, byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetByteCount(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetByteCount_2")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetByteCount_2(void* /* System.Text.Encoding */ __self, void* /* System.Char[] */ chars, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetByteCount(charsConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetByteCount_3")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetByteCount_3(void* /* System.Text.Encoding */ __self, byte* /* System.String */ s, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetByteCount(sConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetBytes")]
	internal static void* /* System.Byte[] */ System_Text_Encoding_GetBytes(void* /* System.Text.Encoding */ __self, void* /* System.Char[] */ chars, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
	
	    try {
			System.Byte[] __returnValue = __selfConverted.GetBytes(charsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetBytes_1")]
	internal static void* /* System.Byte[] */ System_Text_Encoding_GetBytes_1(void* /* System.Text.Encoding */ __self, void* /* System.Char[] */ chars, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
	
	    try {
			System.Byte[] __returnValue = __selfConverted.GetBytes(charsConverted, index, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetBytes_2")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetBytes_2(void* /* System.Text.Encoding */ __self, void* /* System.Char[] */ chars, int /* System.Int32 */ charIndex, int /* System.Int32 */ charCount, void* /* System.Byte[] */ bytes, int /* System.Int32 */ byteIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetBytes(charsConverted, charIndex, charCount, bytesConverted, byteIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetBytes_3")]
	internal static void* /* System.Byte[] */ System_Text_Encoding_GetBytes_3(void* /* System.Text.Encoding */ __self, byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Byte[] __returnValue = __selfConverted.GetBytes(sConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetBytes_4")]
	internal static void* /* System.Byte[] */ System_Text_Encoding_GetBytes_4(void* /* System.Text.Encoding */ __self, byte* /* System.String */ s, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Byte[] __returnValue = __selfConverted.GetBytes(sConverted, index, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetBytes_5")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetBytes_5(void* /* System.Text.Encoding */ __self, byte* /* System.String */ s, int /* System.Int32 */ charIndex, int /* System.Int32 */ charCount, void* /* System.Byte[] */ bytes, int /* System.Int32 */ byteIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.String sConverted = InteropUtils.ToDotNetString(s);
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetBytes(sConverted, charIndex, charCount, bytesConverted, byteIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetCharCount")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetCharCount(void* /* System.Text.Encoding */ __self, void* /* System.Byte[] */ bytes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetCharCount(bytesConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetCharCount_1")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetCharCount_1(void* /* System.Text.Encoding */ __self, void* /* System.Byte[] */ bytes, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetCharCount(bytesConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetChars")]
	internal static void* /* System.Char[] */ System_Text_Encoding_GetChars(void* /* System.Text.Encoding */ __self, void* /* System.Byte[] */ bytes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.Char[] __returnValue = __selfConverted.GetChars(bytesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetChars_1")]
	internal static void* /* System.Char[] */ System_Text_Encoding_GetChars_1(void* /* System.Text.Encoding */ __self, void* /* System.Byte[] */ bytes, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.Char[] __returnValue = __selfConverted.GetChars(bytesConverted, index, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetChars_2")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetChars_2(void* /* System.Text.Encoding */ __self, void* /* System.Byte[] */ bytes, int /* System.Int32 */ byteIndex, int /* System.Int32 */ byteCount, void* /* System.Char[] */ chars, int /* System.Int32 */ charIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetChars(bytesConverted, byteIndex, byteCount, charsConverted, charIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsAlwaysNormalized")]
	internal static byte /* System.Boolean */ System_Text_Encoding_IsAlwaysNormalized(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAlwaysNormalized();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsAlwaysNormalized_1")]
	internal static byte /* System.Boolean */ System_Text_Encoding_IsAlwaysNormalized_1(void* /* System.Text.Encoding */ __self, System.Text.NormalizationForm /* System.Text.NormalizationForm */ form, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAlwaysNormalized(form);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetDecoder")]
	internal static void* /* System.Text.Decoder */ System_Text_Encoding_GetDecoder(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Text.Decoder __returnValue = __selfConverted.GetDecoder();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetEncoder")]
	internal static void* /* System.Text.Encoder */ System_Text_Encoding_GetEncoder(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Text.Encoder __returnValue = __selfConverted.GetEncoder();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetMaxByteCount")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetMaxByteCount(void* /* System.Text.Encoding */ __self, int /* System.Int32 */ charCount, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMaxByteCount(charCount);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetMaxCharCount")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetMaxCharCount(void* /* System.Text.Encoding */ __self, int /* System.Int32 */ byteCount, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetMaxCharCount(byteCount);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetString")]
	internal static byte* /* System.String */ System_Text_Encoding_GetString(void* /* System.Text.Encoding */ __self, void* /* System.Byte[] */ bytes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.String __returnValue = __selfConverted.GetString(bytesConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetString_1")]
	internal static byte* /* System.String */ System_Text_Encoding_GetString_1(void* /* System.Text.Encoding */ __self, void* /* System.Byte[] */ bytes, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.String __returnValue = __selfConverted.GetString(bytesConverted, index, count);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Equals")]
	internal static byte /* System.Boolean */ System_Text_Encoding_Equals(void* /* System.Text.Encoding */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_GetHashCode")]
	internal static int /* System.Int32 */ System_Text_Encoding_GetHashCode(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_CreateTranscodingStream")]
	internal static void* /* System.IO.Stream */ System_Text_Encoding_CreateTranscodingStream(void* /* System.IO.Stream */ innerStream, void* /* System.Text.Encoding */ innerStreamEncoding, void* /* System.Text.Encoding */ outerStreamEncoding, byte /* System.Boolean */ leaveOpen, void** /* System.Exception */ __outException)
	{
		System.IO.Stream innerStreamConverted = InteropUtils.GetInstance<System.IO.Stream>(innerStream);
		System.Text.Encoding innerStreamEncodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(innerStreamEncoding);
		System.Text.Encoding outerStreamEncodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(outerStreamEncoding);
		System.Boolean leaveOpenConverted = leaveOpen.ToBool();
	
	    try {
			System.IO.Stream __returnValue = System.Text.Encoding.CreateTranscodingStream(innerStreamConverted, innerStreamEncodingConverted, outerStreamEncodingConverted, leaveOpenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Default_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_Default_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.Default;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_BodyName_Get")]
	internal static byte* /* System.String */ System_Text_Encoding_BodyName_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.BodyName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_EncodingName_Get")]
	internal static byte* /* System.String */ System_Text_Encoding_EncodingName_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.EncodingName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_HeaderName_Get")]
	internal static byte* /* System.String */ System_Text_Encoding_HeaderName_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.HeaderName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_WebName_Get")]
	internal static byte* /* System.String */ System_Text_Encoding_WebName_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.WebName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_WindowsCodePage_Get")]
	internal static int /* System.Int32 */ System_Text_Encoding_WindowsCodePage_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.WindowsCodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsBrowserDisplay_Get")]
	internal static byte /* System.Boolean */ System_Text_Encoding_IsBrowserDisplay_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsBrowserDisplay;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsBrowserSave_Get")]
	internal static byte /* System.Boolean */ System_Text_Encoding_IsBrowserSave_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsBrowserSave;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsMailNewsDisplay_Get")]
	internal static byte /* System.Boolean */ System_Text_Encoding_IsMailNewsDisplay_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsMailNewsDisplay;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsMailNewsSave_Get")]
	internal static byte /* System.Boolean */ System_Text_Encoding_IsMailNewsSave_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsMailNewsSave;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsSingleByte_Get")]
	internal static byte /* System.Boolean */ System_Text_Encoding_IsSingleByte_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSingleByte;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_EncoderFallback_Get")]
	internal static void* /* System.Text.EncoderFallback */ System_Text_Encoding_EncoderFallback_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Text.EncoderFallback __returnValue = __selfConverted.EncoderFallback;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_EncoderFallback_Set")]
	internal static void /* System.Void */ System_Text_Encoding_EncoderFallback_Set(void* /* System.Text.Encoding */ __self, void* /* System.Text.EncoderFallback */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			__selfConverted.EncoderFallback = InteropUtils.GetInstance<System.Text.EncoderFallback>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_DecoderFallback_Get")]
	internal static void* /* System.Text.DecoderFallback */ System_Text_Encoding_DecoderFallback_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Text.DecoderFallback __returnValue = __selfConverted.DecoderFallback;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_DecoderFallback_Set")]
	internal static void /* System.Void */ System_Text_Encoding_DecoderFallback_Set(void* /* System.Text.Encoding */ __self, void* /* System.Text.DecoderFallback */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			__selfConverted.DecoderFallback = InteropUtils.GetInstance<System.Text.DecoderFallback>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Text_Encoding_IsReadOnly_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_ASCII_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_ASCII_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.ASCII;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Latin1_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_Latin1_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.Latin1;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_CodePage_Get")]
	internal static int /* System.Int32 */ System_Text_Encoding_CodePage_Get(void* /* System.Text.Encoding */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoding __selfConverted = InteropUtils.GetInstance<System.Text.Encoding>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.CodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Unicode_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_Unicode_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.Unicode;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_BigEndianUnicode_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_BigEndianUnicode_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.BigEndianUnicode;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_UTF7_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_UTF7_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.UTF7;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_UTF8_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_UTF8_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.UTF8;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_UTF32_Get")]
	internal static void* /* System.Text.Encoding */ System_Text_Encoding_UTF32_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.Encoding __returnValue = System.Text.Encoding.UTF32;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_TypeOf")]
	internal static void* /* System.Type */ System_Text_Encoding_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.Encoding);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoding_Destroy")]
	internal static void /* System.Void */ System_Text_Encoding_Destroy(void* /* System.Text.Encoding */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_EncodingProvider
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_GetEncoding")]
	internal static void* /* System.Text.Encoding */ System_Text_EncodingProvider_GetEncoding(void* /* System.Text.EncodingProvider */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingProvider __selfConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.GetEncoding(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_GetEncoding_1")]
	internal static void* /* System.Text.Encoding */ System_Text_EncodingProvider_GetEncoding_1(void* /* System.Text.EncodingProvider */ __self, int /* System.Int32 */ codepage, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingProvider __selfConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(__self);
	
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.GetEncoding(codepage);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_GetEncoding_2")]
	internal static void* /* System.Text.Encoding */ System_Text_EncodingProvider_GetEncoding_2(void* /* System.Text.EncodingProvider */ __self, byte* /* System.String */ name, void* /* System.Text.EncoderFallback */ encoderFallback, void* /* System.Text.DecoderFallback */ decoderFallback, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingProvider __selfConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Text.EncoderFallback encoderFallbackConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(encoderFallback);
		System.Text.DecoderFallback decoderFallbackConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(decoderFallback);
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.GetEncoding(nameConverted, encoderFallbackConverted, decoderFallbackConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_GetEncoding_3")]
	internal static void* /* System.Text.Encoding */ System_Text_EncodingProvider_GetEncoding_3(void* /* System.Text.EncodingProvider */ __self, int /* System.Int32 */ codepage, void* /* System.Text.EncoderFallback */ encoderFallback, void* /* System.Text.DecoderFallback */ decoderFallback, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingProvider __selfConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(__self);
	
		System.Text.EncoderFallback encoderFallbackConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(encoderFallback);
		System.Text.DecoderFallback decoderFallbackConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(decoderFallback);
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.GetEncoding(codepage, encoderFallbackConverted, decoderFallbackConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_TypeOf")]
	internal static void* /* System.Type */ System_Text_EncodingProvider_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.EncodingProvider);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingProvider_Destroy")]
	internal static void /* System.Void */ System_Text_EncodingProvider_Destroy(void* /* System.Text.EncodingProvider */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_EncoderFallback
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_CreateFallbackBuffer")]
	internal static void* /* System.Text.EncoderFallbackBuffer */ System_Text_EncoderFallback_CreateFallbackBuffer(void* /* System.Text.EncoderFallback */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallback __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(__self);
	
	
	    try {
			System.Text.EncoderFallbackBuffer __returnValue = __selfConverted.CreateFallbackBuffer();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_ReplacementFallback_Get")]
	internal static void* /* System.Text.EncoderFallback */ System_Text_EncoderFallback_ReplacementFallback_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.EncoderFallback __returnValue = System.Text.EncoderFallback.ReplacementFallback;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_ExceptionFallback_Get")]
	internal static void* /* System.Text.EncoderFallback */ System_Text_EncoderFallback_ExceptionFallback_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.EncoderFallback __returnValue = System.Text.EncoderFallback.ExceptionFallback;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_MaxCharCount_Get")]
	internal static int /* System.Int32 */ System_Text_EncoderFallback_MaxCharCount_Get(void* /* System.Text.EncoderFallback */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallback __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallback>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MaxCharCount;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_TypeOf")]
	internal static void* /* System.Type */ System_Text_EncoderFallback_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.EncoderFallback);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallback_Destroy")]
	internal static void /* System.Void */ System_Text_EncoderFallback_Destroy(void* /* System.Text.EncoderFallback */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_EncoderFallbackBuffer
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_Fallback")]
	internal static byte /* System.Boolean */ System_Text_EncoderFallbackBuffer_Fallback(void* /* System.Text.EncoderFallbackBuffer */ __self, char /* System.Char */ charUnknown, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Fallback(charUnknown, index);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_Fallback_1")]
	internal static byte /* System.Boolean */ System_Text_EncoderFallbackBuffer_Fallback_1(void* /* System.Text.EncoderFallbackBuffer */ __self, char /* System.Char */ charUnknownHigh, char /* System.Char */ charUnknownLow, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Fallback(charUnknownHigh, charUnknownLow, index);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_GetNextChar")]
	internal static char /* System.Char */ System_Text_EncoderFallbackBuffer_GetNextChar(void* /* System.Text.EncoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			System.Char __returnValue = __selfConverted.GetNextChar();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_MovePrevious")]
	internal static byte /* System.Boolean */ System_Text_EncoderFallbackBuffer_MovePrevious(void* /* System.Text.EncoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MovePrevious();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_Reset")]
	internal static void /* System.Void */ System_Text_EncoderFallbackBuffer_Reset(void* /* System.Text.EncoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_Remaining_Get")]
	internal static int /* System.Int32 */ System_Text_EncoderFallbackBuffer_Remaining_Get(void* /* System.Text.EncoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.EncoderFallbackBuffer>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Remaining;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_TypeOf")]
	internal static void* /* System.Type */ System_Text_EncoderFallbackBuffer_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.EncoderFallbackBuffer);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncoderFallbackBuffer_Destroy")]
	internal static void /* System.Void */ System_Text_EncoderFallbackBuffer_Destroy(void* /* System.Text.EncoderFallbackBuffer */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_DecoderFallback
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_CreateFallbackBuffer")]
	internal static void* /* System.Text.DecoderFallbackBuffer */ System_Text_DecoderFallback_CreateFallbackBuffer(void* /* System.Text.DecoderFallback */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallback __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(__self);
	
	
	    try {
			System.Text.DecoderFallbackBuffer __returnValue = __selfConverted.CreateFallbackBuffer();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_ReplacementFallback_Get")]
	internal static void* /* System.Text.DecoderFallback */ System_Text_DecoderFallback_ReplacementFallback_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.DecoderFallback __returnValue = System.Text.DecoderFallback.ReplacementFallback;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_ExceptionFallback_Get")]
	internal static void* /* System.Text.DecoderFallback */ System_Text_DecoderFallback_ExceptionFallback_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.DecoderFallback __returnValue = System.Text.DecoderFallback.ExceptionFallback;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_MaxCharCount_Get")]
	internal static int /* System.Int32 */ System_Text_DecoderFallback_MaxCharCount_Get(void* /* System.Text.DecoderFallback */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallback __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallback>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MaxCharCount;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_TypeOf")]
	internal static void* /* System.Type */ System_Text_DecoderFallback_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.DecoderFallback);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallback_Destroy")]
	internal static void /* System.Void */ System_Text_DecoderFallback_Destroy(void* /* System.Text.DecoderFallback */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_DecoderFallbackBuffer
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_Fallback")]
	internal static byte /* System.Boolean */ System_Text_DecoderFallbackBuffer_Fallback(void* /* System.Text.DecoderFallbackBuffer */ __self, void* /* System.Byte[] */ bytesUnknown, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallbackBuffer>(__self);
	
		System.Byte[] bytesUnknownConverted = InteropUtils.GetInstance<System.Byte[]>(bytesUnknown);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Fallback(bytesUnknownConverted, index);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_GetNextChar")]
	internal static char /* System.Char */ System_Text_DecoderFallbackBuffer_GetNextChar(void* /* System.Text.DecoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallbackBuffer>(__self);
	
	
	    try {
			System.Char __returnValue = __selfConverted.GetNextChar();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_MovePrevious")]
	internal static byte /* System.Boolean */ System_Text_DecoderFallbackBuffer_MovePrevious(void* /* System.Text.DecoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallbackBuffer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MovePrevious();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_Reset")]
	internal static void /* System.Void */ System_Text_DecoderFallbackBuffer_Reset(void* /* System.Text.DecoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallbackBuffer>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_Remaining_Get")]
	internal static int /* System.Int32 */ System_Text_DecoderFallbackBuffer_Remaining_Get(void* /* System.Text.DecoderFallbackBuffer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.DecoderFallbackBuffer __selfConverted = InteropUtils.GetInstance<System.Text.DecoderFallbackBuffer>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Remaining;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_TypeOf")]
	internal static void* /* System.Type */ System_Text_DecoderFallbackBuffer_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.DecoderFallbackBuffer);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_DecoderFallbackBuffer_Destroy")]
	internal static void /* System.Void */ System_Text_DecoderFallbackBuffer_Destroy(void* /* System.Text.DecoderFallbackBuffer */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Text_EncodingInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingInfo_GetEncoding")]
	internal static void* /* System.Text.Encoding */ System_Text_EncodingInfo_GetEncoding(void* /* System.Text.EncodingInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingInfo __selfConverted = InteropUtils.GetInstance<System.Text.EncodingInfo>(__self);
	
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.GetEncoding();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingInfo_Equals")]
	internal static byte /* System.Boolean */ System_Text_EncodingInfo_Equals(void* /* System.Text.EncodingInfo */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingInfo __selfConverted = InteropUtils.GetInstance<System.Text.EncodingInfo>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Text_EncodingInfo_GetHashCode(void* /* System.Text.EncodingInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingInfo __selfConverted = InteropUtils.GetInstance<System.Text.EncodingInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingInfo_Create")]
	internal static void* /* System.Text.EncodingInfo */ System_Text_EncodingInfo_Create(void* /* System.Text.EncodingProvider */ provider, int /* System.Int32 */ codePage, byte* /* System.String */ name, byte* /* System.String */ displayName, void** /* System.Exception */ __outException)
	{
		System.Text.EncodingProvider providerConverted = InteropUtils.GetInstance<System.Text.EncodingProvider>(provider);
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.String displayNameConverted = InteropUtils.ToDotNetString(displayName);
	
	    try {
			System.Text.EncodingInfo __returnValue = new System.Text.EncodingInfo(providerConverted, codePage, nameConverted, displayNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingInfo_CodePage_Get")]
	internal static int /* System.Int32 */ System_Text_EncodingInfo_CodePage_Get(void* /* System.Text.EncodingInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingInfo __selfConverted = InteropUtils.GetInstance<System.Text.EncodingInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.CodePage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingInfo_Name_Get")]
	internal static byte* /* System.String */ System_Text_EncodingInfo_Name_Get(void* /* System.Text.EncodingInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingInfo __selfConverted = InteropUtils.GetInstance<System.Text.EncodingInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingInfo_DisplayName_Get")]
	internal static byte* /* System.String */ System_Text_EncodingInfo_DisplayName_Get(void* /* System.Text.EncodingInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.EncodingInfo __selfConverted = InteropUtils.GetInstance<System.Text.EncodingInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.DisplayName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingInfo_TypeOf")]
	internal static void* /* System.Type */ System_Text_EncodingInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.EncodingInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_EncodingInfo_Destroy")]
	internal static void /* System.Void */ System_Text_EncodingInfo_Destroy(void* /* System.Text.EncodingInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



internal unsafe class System_Text_Decoder
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_Reset")]
	internal static void /* System.Void */ System_Text_Decoder_Reset(void* /* System.Text.Decoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_GetCharCount")]
	internal static int /* System.Int32 */ System_Text_Decoder_GetCharCount(void* /* System.Text.Decoder */ __self, void* /* System.Byte[] */ bytes, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetCharCount(bytesConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_GetCharCount_1")]
	internal static int /* System.Int32 */ System_Text_Decoder_GetCharCount_1(void* /* System.Text.Decoder */ __self, void* /* System.Byte[] */ bytes, int /* System.Int32 */ index, int /* System.Int32 */ count, byte /* System.Boolean */ flush, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
		System.Boolean flushConverted = flush.ToBool();
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetCharCount(bytesConverted, index, count, flushConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_GetChars")]
	internal static int /* System.Int32 */ System_Text_Decoder_GetChars(void* /* System.Text.Decoder */ __self, void* /* System.Byte[] */ bytes, int /* System.Int32 */ byteIndex, int /* System.Int32 */ byteCount, void* /* System.Char[] */ chars, int /* System.Int32 */ charIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetChars(bytesConverted, byteIndex, byteCount, charsConverted, charIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_GetChars_1")]
	internal static int /* System.Int32 */ System_Text_Decoder_GetChars_1(void* /* System.Text.Decoder */ __self, void* /* System.Byte[] */ bytes, int /* System.Int32 */ byteIndex, int /* System.Int32 */ byteCount, void* /* System.Char[] */ chars, int /* System.Int32 */ charIndex, byte /* System.Boolean */ flush, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
		System.Boolean flushConverted = flush.ToBool();
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetChars(bytesConverted, byteIndex, byteCount, charsConverted, charIndex, flushConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_Convert")]
	internal static void /* System.Void */ System_Text_Decoder_Convert(void* /* System.Text.Decoder */ __self, void* /* System.Byte[] */ bytes, int /* System.Int32 */ byteIndex, int /* System.Int32 */ byteCount, void* /* System.Char[] */ chars, int /* System.Int32 */ charIndex, int /* System.Int32 */ charCount, byte /* System.Boolean */ flush, int* /* System.Int32 */ bytesUsed, int* /* System.Int32 */ charsUsed, byte* /* System.Boolean */ completed, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
		System.Boolean flushConverted = flush.ToBool();
		System.Int32 bytesUsedConverted;
		System.Int32 charsUsedConverted;
		System.Boolean completedConverted;
	
	    try {
			__selfConverted.Convert(bytesConverted, byteIndex, byteCount, charsConverted, charIndex, charCount, flushConverted, out bytesUsedConverted, out charsUsedConverted, out completedConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (bytesUsed is not null) {
				*bytesUsed = bytesUsedConverted;
			}
	
			if (charsUsed is not null) {
				*charsUsed = charsUsedConverted;
			}
	
			if (completed is not null) {
				*completed = completedConverted.ToCBool();
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (bytesUsed is not null) {
				*bytesUsed = -1;
			}
	
			if (charsUsed is not null) {
				*charsUsed = -1;
			}
	
			if (completed is not null) {
				*completed = 0;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_Fallback_Get")]
	internal static void* /* System.Text.DecoderFallback */ System_Text_Decoder_Fallback_Get(void* /* System.Text.Decoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
	
	    try {
			System.Text.DecoderFallback __returnValue = __selfConverted.Fallback;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_Fallback_Set")]
	internal static void /* System.Void */ System_Text_Decoder_Fallback_Set(void* /* System.Text.Decoder */ __self, void* /* System.Text.DecoderFallback */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
	
	    try {
			__selfConverted.Fallback = InteropUtils.GetInstance<System.Text.DecoderFallback>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_FallbackBuffer_Get")]
	internal static void* /* System.Text.DecoderFallbackBuffer */ System_Text_Decoder_FallbackBuffer_Get(void* /* System.Text.Decoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Decoder __selfConverted = InteropUtils.GetInstance<System.Text.Decoder>(__self);
	
	
	    try {
			System.Text.DecoderFallbackBuffer __returnValue = __selfConverted.FallbackBuffer;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_TypeOf")]
	internal static void* /* System.Type */ System_Text_Decoder_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.Decoder);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Decoder_Destroy")]
	internal static void /* System.Void */ System_Text_Decoder_Destroy(void* /* System.Text.Decoder */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_Encoder
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_Reset")]
	internal static void /* System.Void */ System_Text_Encoder_Reset(void* /* System.Text.Encoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
	
	    try {
			__selfConverted.Reset();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_GetByteCount")]
	internal static int /* System.Int32 */ System_Text_Encoder_GetByteCount(void* /* System.Text.Encoder */ __self, void* /* System.Char[] */ chars, int /* System.Int32 */ index, int /* System.Int32 */ count, byte /* System.Boolean */ flush, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
		System.Boolean flushConverted = flush.ToBool();
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetByteCount(charsConverted, index, count, flushConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_GetBytes")]
	internal static int /* System.Int32 */ System_Text_Encoder_GetBytes(void* /* System.Text.Encoder */ __self, void* /* System.Char[] */ chars, int /* System.Int32 */ charIndex, int /* System.Int32 */ charCount, void* /* System.Byte[] */ bytes, int /* System.Int32 */ byteIndex, byte /* System.Boolean */ flush, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
		System.Boolean flushConverted = flush.ToBool();
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetBytes(charsConverted, charIndex, charCount, bytesConverted, byteIndex, flushConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_Convert")]
	internal static void /* System.Void */ System_Text_Encoder_Convert(void* /* System.Text.Encoder */ __self, void* /* System.Char[] */ chars, int /* System.Int32 */ charIndex, int /* System.Int32 */ charCount, void* /* System.Byte[] */ bytes, int /* System.Int32 */ byteIndex, int /* System.Int32 */ byteCount, byte /* System.Boolean */ flush, int* /* System.Int32 */ charsUsed, int* /* System.Int32 */ bytesUsed, byte* /* System.Boolean */ completed, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
		System.Char[] charsConverted = InteropUtils.GetInstance<System.Char[]>(chars);
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
		System.Boolean flushConverted = flush.ToBool();
		System.Int32 charsUsedConverted;
		System.Int32 bytesUsedConverted;
		System.Boolean completedConverted;
	
	    try {
			__selfConverted.Convert(charsConverted, charIndex, charCount, bytesConverted, byteIndex, byteCount, flushConverted, out charsUsedConverted, out bytesUsedConverted, out completedConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (charsUsed is not null) {
				*charsUsed = charsUsedConverted;
			}
	
			if (bytesUsed is not null) {
				*bytesUsed = bytesUsedConverted;
			}
	
			if (completed is not null) {
				*completed = completedConverted.ToCBool();
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (charsUsed is not null) {
				*charsUsed = -1;
			}
	
			if (bytesUsed is not null) {
				*bytesUsed = -1;
			}
	
			if (completed is not null) {
				*completed = 0;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_Fallback_Get")]
	internal static void* /* System.Text.EncoderFallback */ System_Text_Encoder_Fallback_Get(void* /* System.Text.Encoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
	
	    try {
			System.Text.EncoderFallback __returnValue = __selfConverted.Fallback;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_Fallback_Set")]
	internal static void /* System.Void */ System_Text_Encoder_Fallback_Set(void* /* System.Text.Encoder */ __self, void* /* System.Text.EncoderFallback */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
	
	    try {
			__selfConverted.Fallback = InteropUtils.GetInstance<System.Text.EncoderFallback>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_FallbackBuffer_Get")]
	internal static void* /* System.Text.EncoderFallbackBuffer */ System_Text_Encoder_FallbackBuffer_Get(void* /* System.Text.Encoder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.Encoder __selfConverted = InteropUtils.GetInstance<System.Text.Encoder>(__self);
	
	
	    try {
			System.Text.EncoderFallbackBuffer __returnValue = __selfConverted.FallbackBuffer;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_TypeOf")]
	internal static void* /* System.Type */ System_Text_Encoder_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.Encoder);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_Encoder_Destroy")]
	internal static void /* System.Void */ System_Text_Encoder_Destroy(void* /* System.Text.Encoder */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.
// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.

// Type "TEnum" was skipped. Reason: It has no full name.
internal unsafe class System_Reflection_GenericParameterAttributes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_GenericParameterAttributes_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_GenericParameterAttributes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.GenericParameterAttributes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Reflection_TypeAttributes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_TypeAttributes_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_TypeAttributes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.TypeAttributes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Runtime_InteropServices_StructLayoutAttribute
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Create")]
	internal static void* /* System.Runtime.InteropServices.StructLayoutAttribute */ System_Runtime_InteropServices_StructLayoutAttribute_Create(System.Runtime.InteropServices.LayoutKind /* System.Runtime.InteropServices.LayoutKind */ layoutKind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.StructLayoutAttribute __returnValue = new System.Runtime.InteropServices.StructLayoutAttribute(layoutKind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Create_1")]
	internal static void* /* System.Runtime.InteropServices.StructLayoutAttribute */ System_Runtime_InteropServices_StructLayoutAttribute_Create_1(short /* System.Int16 */ layoutKind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.StructLayoutAttribute __returnValue = new System.Runtime.InteropServices.StructLayoutAttribute(layoutKind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Value_Get")]
	internal static System.Runtime.InteropServices.LayoutKind /* System.Runtime.InteropServices.LayoutKind */ System_Runtime_InteropServices_StructLayoutAttribute_Value_Get(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
	    try {
			System.Runtime.InteropServices.LayoutKind __returnValue = __selfConverted.Value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Runtime.InteropServices.LayoutKind);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Pack_Get")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_StructLayoutAttribute_Pack_Get(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		System.Int32 __returnValue = __selfConverted.Pack;
		return __returnValue;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Pack_Set")]
	internal static void /* System.Void */ System_Runtime_InteropServices_StructLayoutAttribute_Pack_Set(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self, int /* System.Int32 */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		__selfConverted.Pack = __value;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Size_Get")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_StructLayoutAttribute_Size_Get(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		System.Int32 __returnValue = __selfConverted.Size;
		return __returnValue;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Size_Set")]
	internal static void /* System.Void */ System_Runtime_InteropServices_StructLayoutAttribute_Size_Set(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self, int /* System.Int32 */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		__selfConverted.Size = __value;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Get")]
	internal static System.Runtime.InteropServices.CharSet /* System.Runtime.InteropServices.CharSet */ System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Get(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		System.Runtime.InteropServices.CharSet __returnValue = __selfConverted.CharSet;
		return __returnValue;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Set")]
	internal static void /* System.Void */ System_Runtime_InteropServices_StructLayoutAttribute_CharSet_Set(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self, System.Runtime.InteropServices.CharSet /* System.Runtime.InteropServices.CharSet */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.InteropServices.StructLayoutAttribute __selfConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.StructLayoutAttribute>(__self);
	
	
		__selfConverted.CharSet = __value;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_InteropServices_StructLayoutAttribute_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.InteropServices.StructLayoutAttribute);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_StructLayoutAttribute_Destroy")]
	internal static void /* System.Void */ System_Runtime_InteropServices_StructLayoutAttribute_Destroy(void* /* System.Runtime.InteropServices.StructLayoutAttribute */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Attribute
{
	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes(void* /* System.Reflection.MemberInfo */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, attributeTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_1")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_1(void* /* System.Reflection.MemberInfo */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_2")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_2(void* /* System.Reflection.MemberInfo */ element, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_3")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_3(void* /* System.Reflection.MemberInfo */ element, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined")]
	internal static byte /* System.Boolean */ System_Attribute_IsDefined(void* /* System.Reflection.MemberInfo */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined_1")]
	internal static byte /* System.Boolean */ System_Attribute_IsDefined_1(void* /* System.Reflection.MemberInfo */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted, inheritConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute_1")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute_1(void* /* System.Reflection.MemberInfo */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute_2")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute_2(void* /* System.Reflection.MemberInfo */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.MemberInfo elementConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_4")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_4(void* /* System.Reflection.ParameterInfo */ element, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_5")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_5(void* /* System.Reflection.ParameterInfo */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, attributeTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_6")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_6(void* /* System.Reflection.ParameterInfo */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_7")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_7(void* /* System.Reflection.ParameterInfo */ element, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined_2")]
	internal static byte /* System.Boolean */ System_Attribute_IsDefined_2(void* /* System.Reflection.ParameterInfo */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined_3")]
	internal static byte /* System.Boolean */ System_Attribute_IsDefined_3(void* /* System.Reflection.ParameterInfo */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted, inheritConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute_3")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute_3(void* /* System.Reflection.ParameterInfo */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute_4")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute_4(void* /* System.Reflection.ParameterInfo */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.ParameterInfo elementConverted = InteropUtils.GetInstance<System.Reflection.ParameterInfo>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_8")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_8(void* /* System.Reflection.Module */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, attributeTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_9")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_9(void* /* System.Reflection.Module */ element, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_10")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_10(void* /* System.Reflection.Module */ element, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_11")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_11(void* /* System.Reflection.Module */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined_4")]
	internal static byte /* System.Boolean */ System_Attribute_IsDefined_4(void* /* System.Reflection.Module */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined_5")]
	internal static byte /* System.Boolean */ System_Attribute_IsDefined_5(void* /* System.Reflection.Module */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted, inheritConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute_5")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute_5(void* /* System.Reflection.Module */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute_6")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute_6(void* /* System.Reflection.Module */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module elementConverted = InteropUtils.GetInstance<System.Reflection.Module>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_12")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_12(void* /* System.Reflection.Assembly */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, attributeTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_13")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_13(void* /* System.Reflection.Assembly */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_14")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_14(void* /* System.Reflection.Assembly */ element, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttributes_15")]
	internal static void* /* System.Attribute[] */ System_Attribute_GetCustomAttributes_15(void* /* System.Reflection.Assembly */ element, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute[] __returnValue = System.Attribute.GetCustomAttributes(elementConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined_6")]
	internal static byte /* System.Boolean */ System_Attribute_IsDefined_6(void* /* System.Reflection.Assembly */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefined_7")]
	internal static byte /* System.Boolean */ System_Attribute_IsDefined_7(void* /* System.Reflection.Assembly */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Attribute.IsDefined(elementConverted, attributeTypeConverted, inheritConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute_7")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute_7(void* /* System.Reflection.Assembly */ element, void* /* System.Type */ attributeType, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetCustomAttribute_8")]
	internal static void* /* System.Attribute */ System_Attribute_GetCustomAttribute_8(void* /* System.Reflection.Assembly */ element, void* /* System.Type */ attributeType, byte /* System.Boolean */ inherit, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly elementConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(element);
		System.Type attributeTypeConverted = InteropUtils.GetInstance<System.Type>(attributeType);
		System.Boolean inheritConverted = inherit.ToBool();
	
	    try {
			System.Attribute __returnValue = System.Attribute.GetCustomAttribute(elementConverted, attributeTypeConverted, inheritConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_Equals")]
	internal static byte /* System.Boolean */ System_Attribute_Equals(void* /* System.Attribute */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Attribute __selfConverted = InteropUtils.GetInstance<System.Attribute>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_GetHashCode")]
	internal static int /* System.Int32 */ System_Attribute_GetHashCode(void* /* System.Attribute */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Attribute __selfConverted = InteropUtils.GetInstance<System.Attribute>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_Match")]
	internal static byte /* System.Boolean */ System_Attribute_Match(void* /* System.Attribute */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Attribute __selfConverted = InteropUtils.GetInstance<System.Attribute>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Match(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_IsDefaultAttribute")]
	internal static byte /* System.Boolean */ System_Attribute_IsDefaultAttribute(void* /* System.Attribute */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Attribute __selfConverted = InteropUtils.GetInstance<System.Attribute>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefaultAttribute();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_TypeId_Get")]
	internal static void* /* System.Object */ System_Attribute_TypeId_Get(void* /* System.Attribute */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Attribute __selfConverted = InteropUtils.GetInstance<System.Attribute>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.TypeId;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_TypeOf")]
	internal static void* /* System.Type */ System_Attribute_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Attribute);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Attribute_Destroy")]
	internal static void /* System.Void */ System_Attribute_Destroy(void* /* System.Attribute */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Runtime_InteropServices_LayoutKind
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_LayoutKind_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_InteropServices_LayoutKind_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.InteropServices.LayoutKind);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Runtime_InteropServices_CharSet
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_CharSet_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_InteropServices_CharSet_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.InteropServices.CharSet);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Reflection_ConstructorInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_Invoke")]
	internal static void* /* System.Object */ System_Reflection_ConstructorInfo_Invoke(void* /* System.Reflection.ConstructorInfo */ __self, void* /* System.Object[] */ parameters, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ConstructorInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ConstructorInfo>(__self);
	
		System.Object[] parametersConverted = InteropUtils.GetInstance<System.Object[]>(parameters);
	
	    try {
			System.Object __returnValue = __selfConverted.Invoke(parametersConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_Invoke_1")]
	internal static void* /* System.Object */ System_Reflection_ConstructorInfo_Invoke_1(void* /* System.Reflection.ConstructorInfo */ __self, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ invokeAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object[] */ parameters, void* /* System.Globalization.CultureInfo */ culture, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ConstructorInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ConstructorInfo>(__self);
	
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object[] parametersConverted = InteropUtils.GetInstance<System.Object[]>(parameters);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
	
	    try {
			System.Object __returnValue = __selfConverted.Invoke(invokeAttr, binderConverted, parametersConverted, cultureConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_Equals")]
	internal static byte /* System.Boolean */ System_Reflection_ConstructorInfo_Equals(void* /* System.Reflection.ConstructorInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ConstructorInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ConstructorInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_ConstructorInfo_GetHashCode(void* /* System.Reflection.ConstructorInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ConstructorInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ConstructorInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_ConstructorInfo_MemberType_Get(void* /* System.Reflection.ConstructorInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.ConstructorInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.ConstructorInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_ConstructorName_Get")]
	internal static byte* /* System.String */ System_Reflection_ConstructorInfo_ConstructorName_Get()
	{
	
		System.String __returnValue = System.Reflection.ConstructorInfo.ConstructorName;
		byte* __returnValueNative = __returnValue.CopyToCString();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_TypeConstructorName_Get")]
	internal static byte* /* System.String */ System_Reflection_ConstructorInfo_TypeConstructorName_Get()
	{
	
		System.String __returnValue = System.Reflection.ConstructorInfo.TypeConstructorName;
		byte* __returnValueNative = __returnValue.CopyToCString();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_ConstructorInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.ConstructorInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_ConstructorInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_ConstructorInfo_Destroy(void* /* System.Reflection.ConstructorInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Reflection_EventInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetOtherMethods")]
	internal static void* /* System.Reflection.MethodInfo[] */ System_Reflection_EventInfo_GetOtherMethods(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo[] __returnValue = __selfConverted.GetOtherMethods();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetOtherMethods_1")]
	internal static void* /* System.Reflection.MethodInfo[] */ System_Reflection_EventInfo_GetOtherMethods_1(void* /* System.Reflection.EventInfo */ __self, byte /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo[] __returnValue = __selfConverted.GetOtherMethods(nonPublicConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetAddMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetAddMethod(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetAddMethod();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetRemoveMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetRemoveMethod(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetRemoveMethod();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetRaiseMethod")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetRaiseMethod(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetRaiseMethod();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetAddMethod_1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetAddMethod_1(void* /* System.Reflection.EventInfo */ __self, byte /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetAddMethod(nonPublicConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetRemoveMethod_1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetRemoveMethod_1(void* /* System.Reflection.EventInfo */ __self, byte /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetRemoveMethod(nonPublicConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetRaiseMethod_1")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_GetRaiseMethod_1(void* /* System.Reflection.EventInfo */ __self, byte /* System.Boolean */ nonPublic, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Boolean nonPublicConverted = nonPublic.ToBool();
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.GetRaiseMethod(nonPublicConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_AddEventHandler")]
	internal static void /* System.Void */ System_Reflection_EventInfo_AddEventHandler(void* /* System.Reflection.EventInfo */ __self, void* /* System.Object */ target, void* /* System.Delegate */ handler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
		System.Delegate handlerConverted = InteropUtils.GetInstance<System_Delegate>(handler)?.Trampoline;
	
	    try {
			__selfConverted.AddEventHandler(targetConverted, handlerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_RemoveEventHandler")]
	internal static void /* System.Void */ System_Reflection_EventInfo_RemoveEventHandler(void* /* System.Reflection.EventInfo */ __self, void* /* System.Object */ target, void* /* System.Delegate */ handler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
		System.Delegate handlerConverted = InteropUtils.GetInstance<System_Delegate>(handler)?.Trampoline;
	
	    try {
			__selfConverted.RemoveEventHandler(targetConverted, handlerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_Equals")]
	internal static byte /* System.Boolean */ System_Reflection_EventInfo_Equals(void* /* System.Reflection.EventInfo */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_GetHashCode")]
	internal static int /* System.Int32 */ System_Reflection_EventInfo_GetHashCode(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_MemberType_Get")]
	internal static System.Reflection.MemberTypes /* System.Reflection.MemberTypes */ System_Reflection_EventInfo_MemberType_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MemberTypes __returnValue = __selfConverted.MemberType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.MemberTypes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_Attributes_Get")]
	internal static System.Reflection.EventAttributes /* System.Reflection.EventAttributes */ System_Reflection_EventInfo_Attributes_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.EventAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Reflection.EventAttributes);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_IsSpecialName_Get")]
	internal static byte /* System.Boolean */ System_Reflection_EventInfo_IsSpecialName_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSpecialName;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_AddMethod_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_AddMethod_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.AddMethod;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_RemoveMethod_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_RemoveMethod_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.RemoveMethod;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_RaiseMethod_Get")]
	internal static void* /* System.Reflection.MethodInfo */ System_Reflection_EventInfo_RaiseMethod_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Reflection.MethodInfo __returnValue = __selfConverted.RaiseMethod;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_IsMulticast_Get")]
	internal static byte /* System.Boolean */ System_Reflection_EventInfo_IsMulticast_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsMulticast;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_EventHandlerType_Get")]
	internal static void* /* System.Type */ System_Reflection_EventInfo_EventHandlerType_Get(void* /* System.Reflection.EventInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.EventInfo __selfConverted = InteropUtils.GetInstance<System.Reflection.EventInfo>(__self);
	
	
	    try {
			System.Type __returnValue = __selfConverted.EventHandlerType;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_EventInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.EventInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventInfo_Destroy")]
	internal static void /* System.Void */ System_Reflection_EventInfo_Destroy(void* /* System.Reflection.EventInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_EventAttributes
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_EventAttributes_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_EventAttributes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.EventAttributes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}






internal unsafe class System_Reflection_InterfaceMapping
{
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_TargetType_Get")]
	internal static void* /* System.Type */ System_Reflection_InterfaceMapping_TargetType_Get(void* /* System.Reflection.InterfaceMapping */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		System.Type __returnValue = __selfConverted.TargetType;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_TargetType_Set")]
	internal static void /* System.Void */ System_Reflection_InterfaceMapping_TargetType_Set(void* /* System.Reflection.InterfaceMapping */ __self, void* /* System.Type */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		__selfConverted.TargetType = InteropUtils.GetInstance<System.Type>(__value);
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_InterfaceType_Get")]
	internal static void* /* System.Type */ System_Reflection_InterfaceMapping_InterfaceType_Get(void* /* System.Reflection.InterfaceMapping */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		System.Type __returnValue = __selfConverted.InterfaceType;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_InterfaceType_Set")]
	internal static void /* System.Void */ System_Reflection_InterfaceMapping_InterfaceType_Set(void* /* System.Reflection.InterfaceMapping */ __self, void* /* System.Type */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		__selfConverted.InterfaceType = InteropUtils.GetInstance<System.Type>(__value);
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_TargetMethods_Get")]
	internal static void* /* System.Reflection.MethodInfo[] */ System_Reflection_InterfaceMapping_TargetMethods_Get(void* /* System.Reflection.InterfaceMapping */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		System.Reflection.MethodInfo[] __returnValue = __selfConverted.TargetMethods;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_TargetMethods_Set")]
	internal static void /* System.Void */ System_Reflection_InterfaceMapping_TargetMethods_Set(void* /* System.Reflection.InterfaceMapping */ __self, void* /* System.Reflection.MethodInfo[] */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		__selfConverted.TargetMethods = InteropUtils.GetInstance<System.Reflection.MethodInfo[]>(__value);
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_InterfaceMethods_Get")]
	internal static void* /* System.Reflection.MethodInfo[] */ System_Reflection_InterfaceMapping_InterfaceMethods_Get(void* /* System.Reflection.InterfaceMapping */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		System.Reflection.MethodInfo[] __returnValue = __selfConverted.InterfaceMethods;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_InterfaceMethods_Set")]
	internal static void /* System.Void */ System_Reflection_InterfaceMapping_InterfaceMethods_Set(void* /* System.Reflection.InterfaceMapping */ __self, void* /* System.Reflection.MethodInfo[] */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Reflection.InterfaceMapping __selfConverted = InteropUtils.GetInstance<System.Reflection.InterfaceMapping>(__self);
	
	
		__selfConverted.InterfaceMethods = InteropUtils.GetInstance<System.Reflection.MethodInfo[]>(__value);
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_TypeOf")]
	internal static void* /* System.Type */ System_Reflection_InterfaceMapping_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Reflection.InterfaceMapping);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_InterfaceMapping_Destroy")]
	internal static void /* System.Void */ System_Reflection_InterfaceMapping_Destroy(void* /* System.Reflection.InterfaceMapping */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Reflection_MemberFilter
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.Reflection.MemberInfo */ /* m */, void* /* System.Object */ /* filterCriteria */, byte /* System.Boolean */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.Reflection.MemberFilter> m_trampoline;
	internal System.Reflection.MemberFilter Trampoline
	{
		get {
			System.Reflection.MemberFilter? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_Reflection_MemberFilter(void* context, delegate* unmanaged<void* /* context */, void* /* System.Reflection.MemberInfo */ /* m */, void* /* System.Object */ /* filterCriteria */, byte /* System.Boolean */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_Reflection_MemberFilter(System.Reflection.MemberFilter originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_Reflection_MemberFilter()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.Reflection.MemberFilter? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Reflection_MemberFilter);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Reflection.MemberFilter trampoline = (System.Reflection.MemberFilter)System.Delegate.CreateDelegate(typeof(System.Reflection.MemberFilter), this, invocationMethod);

		return trampoline;
	}

	private System.Boolean __InvokeByCallingCFunction(System.Reflection.MemberInfo /* System.Reflection.MemberInfo */ m, System.Object /* System.Object */ filterCriteria)
	{
		void* mConverted = m.AllocateGCHandleAndGetAddress();
		void* filterCriteriaConverted = filterCriteria.AllocateGCHandleAndGetAddress();
	


		var __returnValue = CFunction(Context, mConverted, filterCriteriaConverted);
		var __returnValueConverted = __returnValue.ToBool();

		return __returnValueConverted;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberFilter_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Reflection.MemberInfo */ /* m */, void* /* System.Object */ /* filterCriteria */, byte /* System.Boolean */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Reflection_MemberFilter(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberFilter_Invoke")]
	public static byte /* System.Boolean */ Invoke(void* self, void* /* System.Reflection.MemberInfo */ m, void* /* System.Object */ filterCriteria, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_Reflection_MemberFilter>(self);

			System.Reflection.MemberInfo mConverted = InteropUtils.GetInstance<System.Reflection.MemberInfo>(m);
			System.Object filterCriteriaConverted = InteropUtils.GetInstance<System.Object>(filterCriteria);
		


			var __returnValue = selfConverted.Trampoline(mConverted, filterCriteriaConverted);
			var __returnValueConverted = __returnValue.ToCBool();

			return __returnValueConverted;
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

			return 0;
		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberFilter_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Reflection_MemberFilter>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberFilter_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.Reflection.MemberInfo */ /* m */, void* /* System.Object */ /* filterCriteria */, byte /* System.Boolean */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Reflection_MemberFilter>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberFilter_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Reflection_MemberFilter>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Reflection_MemberFilter_Destroy")]
	internal static void /* System.Void */ System_Reflection_MemberFilter_Destroy(void* /* System.Reflection.MemberFilter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
// Type "TOther" was skipped. Reason: It has no full name.
internal unsafe class System_GC
{
	[UnmanagedCallersOnly(EntryPoint = "System_GC_GetGCMemoryInfo")]
	internal static void* /* System.GCMemoryInfo */ System_GC_GetGCMemoryInfo(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GCMemoryInfo __returnValue = System.GC.GetGCMemoryInfo();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_GetGCMemoryInfo_1")]
	internal static void* /* System.GCMemoryInfo */ System_GC_GetGCMemoryInfo_1(System.GCKind /* System.GCKind */ kind, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GCMemoryInfo __returnValue = System.GC.GetGCMemoryInfo(kind);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_AddMemoryPressure")]
	internal static void /* System.Void */ System_GC_AddMemoryPressure(long /* System.Int64 */ bytesAllocated, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GC.AddMemoryPressure(bytesAllocated);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_RemoveMemoryPressure")]
	internal static void /* System.Void */ System_GC_RemoveMemoryPressure(long /* System.Int64 */ bytesAllocated, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GC.RemoveMemoryPressure(bytesAllocated);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_GetGeneration")]
	internal static int /* System.Int32 */ System_GC_GetGeneration(void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Int32 __returnValue = System.GC.GetGeneration(objConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_Collect")]
	internal static void /* System.Void */ System_GC_Collect(int /* System.Int32 */ generation, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GC.Collect(generation);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_Collect_1")]
	internal static void /* System.Void */ System_GC_Collect_1(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GC.Collect();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_Collect_2")]
	internal static void /* System.Void */ System_GC_Collect_2(int /* System.Int32 */ generation, System.GCCollectionMode /* System.GCCollectionMode */ mode, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GC.Collect(generation, mode);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_Collect_3")]
	internal static void /* System.Void */ System_GC_Collect_3(int /* System.Int32 */ generation, System.GCCollectionMode /* System.GCCollectionMode */ mode, byte /* System.Boolean */ blocking, void** /* System.Exception */ __outException)
	{
		System.Boolean blockingConverted = blocking.ToBool();
	
	    try {
			System.GC.Collect(generation, mode, blockingConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_Collect_4")]
	internal static void /* System.Void */ System_GC_Collect_4(int /* System.Int32 */ generation, System.GCCollectionMode /* System.GCCollectionMode */ mode, byte /* System.Boolean */ blocking, byte /* System.Boolean */ compacting, void** /* System.Exception */ __outException)
	{
		System.Boolean blockingConverted = blocking.ToBool();
		System.Boolean compactingConverted = compacting.ToBool();
	
	    try {
			System.GC.Collect(generation, mode, blockingConverted, compactingConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_CollectionCount")]
	internal static int /* System.Int32 */ System_GC_CollectionCount(int /* System.Int32 */ generation, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.GC.CollectionCount(generation);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_KeepAlive")]
	internal static void /* System.Void */ System_GC_KeepAlive(void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.GC.KeepAlive(objConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_GetGeneration_1")]
	internal static int /* System.Int32 */ System_GC_GetGeneration_1(void* /* System.WeakReference */ wo, void** /* System.Exception */ __outException)
	{
		System.WeakReference woConverted = InteropUtils.GetInstance<System.WeakReference>(wo);
	
	    try {
			System.Int32 __returnValue = System.GC.GetGeneration(woConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_WaitForPendingFinalizers")]
	internal static void /* System.Void */ System_GC_WaitForPendingFinalizers(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GC.WaitForPendingFinalizers();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_SuppressFinalize")]
	internal static void /* System.Void */ System_GC_SuppressFinalize(void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.GC.SuppressFinalize(objConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_ReRegisterForFinalize")]
	internal static void /* System.Void */ System_GC_ReRegisterForFinalize(void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.GC.ReRegisterForFinalize(objConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_GetTotalMemory")]
	internal static long /* System.Int64 */ System_GC_GetTotalMemory(byte /* System.Boolean */ forceFullCollection, void** /* System.Exception */ __outException)
	{
		System.Boolean forceFullCollectionConverted = forceFullCollection.ToBool();
	
	    try {
			System.Int64 __returnValue = System.GC.GetTotalMemory(forceFullCollectionConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_GetAllocatedBytesForCurrentThread")]
	internal static long /* System.Int64 */ System_GC_GetAllocatedBytesForCurrentThread(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.GC.GetAllocatedBytesForCurrentThread();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_GetTotalAllocatedBytes")]
	internal static long /* System.Int64 */ System_GC_GetTotalAllocatedBytes(byte /* System.Boolean */ precise, void** /* System.Exception */ __outException)
	{
		System.Boolean preciseConverted = precise.ToBool();
	
	    try {
			System.Int64 __returnValue = System.GC.GetTotalAllocatedBytes(preciseConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_RegisterForFullGCNotification")]
	internal static void /* System.Void */ System_GC_RegisterForFullGCNotification(int /* System.Int32 */ maxGenerationThreshold, int /* System.Int32 */ largeObjectHeapThreshold, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GC.RegisterForFullGCNotification(maxGenerationThreshold, largeObjectHeapThreshold);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_CancelFullGCNotification")]
	internal static void /* System.Void */ System_GC_CancelFullGCNotification(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GC.CancelFullGCNotification();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_WaitForFullGCApproach")]
	internal static System.GCNotificationStatus /* System.GCNotificationStatus */ System_GC_WaitForFullGCApproach(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GCNotificationStatus __returnValue = System.GC.WaitForFullGCApproach();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.GCNotificationStatus);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_WaitForFullGCApproach_1")]
	internal static System.GCNotificationStatus /* System.GCNotificationStatus */ System_GC_WaitForFullGCApproach_1(int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GCNotificationStatus __returnValue = System.GC.WaitForFullGCApproach(millisecondsTimeout);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.GCNotificationStatus);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_WaitForFullGCComplete")]
	internal static System.GCNotificationStatus /* System.GCNotificationStatus */ System_GC_WaitForFullGCComplete(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GCNotificationStatus __returnValue = System.GC.WaitForFullGCComplete();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.GCNotificationStatus);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_WaitForFullGCComplete_1")]
	internal static System.GCNotificationStatus /* System.GCNotificationStatus */ System_GC_WaitForFullGCComplete_1(int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GCNotificationStatus __returnValue = System.GC.WaitForFullGCComplete(millisecondsTimeout);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.GCNotificationStatus);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_TryStartNoGCRegion")]
	internal static byte /* System.Boolean */ System_GC_TryStartNoGCRegion(long /* System.Int64 */ totalSize, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.GC.TryStartNoGCRegion(totalSize);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_TryStartNoGCRegion_1")]
	internal static byte /* System.Boolean */ System_GC_TryStartNoGCRegion_1(long /* System.Int64 */ totalSize, long /* System.Int64 */ lohSize, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.GC.TryStartNoGCRegion(totalSize, lohSize);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_TryStartNoGCRegion_2")]
	internal static byte /* System.Boolean */ System_GC_TryStartNoGCRegion_2(long /* System.Int64 */ totalSize, byte /* System.Boolean */ disallowFullBlockingGC, void** /* System.Exception */ __outException)
	{
		System.Boolean disallowFullBlockingGCConverted = disallowFullBlockingGC.ToBool();
	
	    try {
			System.Boolean __returnValue = System.GC.TryStartNoGCRegion(totalSize, disallowFullBlockingGCConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_TryStartNoGCRegion_3")]
	internal static byte /* System.Boolean */ System_GC_TryStartNoGCRegion_3(long /* System.Int64 */ totalSize, long /* System.Int64 */ lohSize, byte /* System.Boolean */ disallowFullBlockingGC, void** /* System.Exception */ __outException)
	{
		System.Boolean disallowFullBlockingGCConverted = disallowFullBlockingGC.ToBool();
	
	    try {
			System.Boolean __returnValue = System.GC.TryStartNoGCRegion(totalSize, lohSize, disallowFullBlockingGCConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_EndNoGCRegion")]
	internal static void /* System.Void */ System_GC_EndNoGCRegion(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.GC.EndNoGCRegion();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_AllocateUninitializedArray_A1")]
	internal static void* /* System.Array */ System_GC_AllocateUninitializedArray_A1(void* /* System.Type */ T, int /* System.Int32 */ length, byte /* System.Boolean */ pinned, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Boolean pinnedConverted = pinned.ToBool();
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.GC);
			System.String __nameOfMethodForGenericCall = nameof(System.GC.AllocateUninitializedArray);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { length, pinnedConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.Int32), typeof(System.Boolean) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method AllocateUninitializedArray not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Array __returnValue = (System.Array)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_AllocateArray_A1")]
	internal static void* /* System.Array */ System_GC_AllocateArray_A1(void* /* System.Type */ T, int /* System.Int32 */ length, byte /* System.Boolean */ pinned, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Boolean pinnedConverted = pinned.ToBool();
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.GC);
			System.String __nameOfMethodForGenericCall = nameof(System.GC.AllocateArray);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { length, pinnedConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.Int32), typeof(System.Boolean) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method AllocateArray not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Array __returnValue = (System.Array)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_GetTotalPauseDuration")]
	internal static void* /* System.TimeSpan */ System_GC_GetTotalPauseDuration(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.TimeSpan __returnValue = System.GC.GetTotalPauseDuration();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_WaitForFullGCApproach_2")]
	internal static System.GCNotificationStatus /* System.GCNotificationStatus */ System_GC_WaitForFullGCApproach_2(void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.GCNotificationStatus __returnValue = System.GC.WaitForFullGCApproach(timeoutConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.GCNotificationStatus);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_WaitForFullGCComplete_2")]
	internal static System.GCNotificationStatus /* System.GCNotificationStatus */ System_GC_WaitForFullGCComplete_2(void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.GCNotificationStatus __returnValue = System.GC.WaitForFullGCComplete(timeoutConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.GCNotificationStatus);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_MaxGeneration_Get")]
	internal static int /* System.Int32 */ System_GC_MaxGeneration_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.GC.MaxGeneration;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_TypeOf")]
	internal static void* /* System.Type */ System_GC_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.GC);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GC_Destroy")]
	internal static void /* System.Void */ System_GC_Destroy(void* /* System.GC */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_GCMemoryInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_HighMemoryLoadThresholdBytes_Get")]
	internal static long /* System.Int64 */ System_GCMemoryInfo_HighMemoryLoadThresholdBytes_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.HighMemoryLoadThresholdBytes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_MemoryLoadBytes_Get")]
	internal static long /* System.Int64 */ System_GCMemoryInfo_MemoryLoadBytes_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.MemoryLoadBytes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_TotalAvailableMemoryBytes_Get")]
	internal static long /* System.Int64 */ System_GCMemoryInfo_TotalAvailableMemoryBytes_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.TotalAvailableMemoryBytes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_HeapSizeBytes_Get")]
	internal static long /* System.Int64 */ System_GCMemoryInfo_HeapSizeBytes_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.HeapSizeBytes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_FragmentedBytes_Get")]
	internal static long /* System.Int64 */ System_GCMemoryInfo_FragmentedBytes_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.FragmentedBytes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_Index_Get")]
	internal static long /* System.Int64 */ System_GCMemoryInfo_Index_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Index;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_Generation_Get")]
	internal static int /* System.Int32 */ System_GCMemoryInfo_Generation_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Generation;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_Compacted_Get")]
	internal static byte /* System.Boolean */ System_GCMemoryInfo_Compacted_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Compacted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_Concurrent_Get")]
	internal static byte /* System.Boolean */ System_GCMemoryInfo_Concurrent_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Concurrent;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_TotalCommittedBytes_Get")]
	internal static long /* System.Int64 */ System_GCMemoryInfo_TotalCommittedBytes_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.TotalCommittedBytes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_PromotedBytes_Get")]
	internal static long /* System.Int64 */ System_GCMemoryInfo_PromotedBytes_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.PromotedBytes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_PinnedObjectsCount_Get")]
	internal static long /* System.Int64 */ System_GCMemoryInfo_PinnedObjectsCount_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.PinnedObjectsCount;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_FinalizationPendingCount_Get")]
	internal static long /* System.Int64 */ System_GCMemoryInfo_FinalizationPendingCount_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.FinalizationPendingCount;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_PauseTimePercentage_Get")]
	internal static double /* System.Double */ System_GCMemoryInfo_PauseTimePercentage_Get(void* /* System.GCMemoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.GCMemoryInfo __selfConverted = InteropUtils.GetInstance<System.GCMemoryInfo>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.PauseTimePercentage;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_TypeOf")]
	internal static void* /* System.Type */ System_GCMemoryInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.GCMemoryInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_GCMemoryInfo_Destroy")]
	internal static void /* System.Void */ System_GCMemoryInfo_Destroy(void* /* System.GCMemoryInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_GCKind
{
	[UnmanagedCallersOnly(EntryPoint = "System_GCKind_TypeOf")]
	internal static void* /* System.Type */ System_GCKind_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.GCKind);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_GCCollectionMode
{
	[UnmanagedCallersOnly(EntryPoint = "System_GCCollectionMode_TypeOf")]
	internal static void* /* System.Type */ System_GCCollectionMode_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.GCCollectionMode);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_WeakReference
{
	[UnmanagedCallersOnly(EntryPoint = "System_WeakReference_GetObjectData")]
	internal static void /* System.Void */ System_WeakReference_GetObjectData(void* /* System.WeakReference */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.WeakReference __selfConverted = InteropUtils.GetInstance<System.WeakReference>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_WeakReference_Create")]
	internal static void* /* System.WeakReference */ System_WeakReference_Create(void* /* System.Object */ target, void** /* System.Exception */ __outException)
	{
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
	
	    try {
			System.WeakReference __returnValue = new System.WeakReference(targetConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_WeakReference_Create_1")]
	internal static void* /* System.WeakReference */ System_WeakReference_Create_1(void* /* System.Object */ target, byte /* System.Boolean */ trackResurrection, void** /* System.Exception */ __outException)
	{
		System.Object targetConverted = InteropUtils.GetInstance<System.Object>(target);
		System.Boolean trackResurrectionConverted = trackResurrection.ToBool();
	
	    try {
			System.WeakReference __returnValue = new System.WeakReference(targetConverted, trackResurrectionConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_WeakReference_TrackResurrection_Get")]
	internal static byte /* System.Boolean */ System_WeakReference_TrackResurrection_Get(void* /* System.WeakReference */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.WeakReference __selfConverted = InteropUtils.GetInstance<System.WeakReference>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.TrackResurrection;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_WeakReference_IsAlive_Get")]
	internal static byte /* System.Boolean */ System_WeakReference_IsAlive_Get(void* /* System.WeakReference */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.WeakReference __selfConverted = InteropUtils.GetInstance<System.WeakReference>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAlive;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_WeakReference_Target_Get")]
	internal static void* /* System.Object */ System_WeakReference_Target_Get(void* /* System.WeakReference */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.WeakReference __selfConverted = InteropUtils.GetInstance<System.WeakReference>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Target;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_WeakReference_Target_Set")]
	internal static void /* System.Void */ System_WeakReference_Target_Set(void* /* System.WeakReference */ __self, void* /* System.Object */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.WeakReference __selfConverted = InteropUtils.GetInstance<System.WeakReference>(__self);
	
	
	    try {
			__selfConverted.Target = InteropUtils.GetInstance<System.Object>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_WeakReference_TypeOf")]
	internal static void* /* System.Type */ System_WeakReference_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.WeakReference);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_WeakReference_Destroy")]
	internal static void /* System.Void */ System_WeakReference_Destroy(void* /* System.WeakReference */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_GCNotificationStatus
{
	[UnmanagedCallersOnly(EntryPoint = "System_GCNotificationStatus_TypeOf")]
	internal static void* /* System.Type */ System_GCNotificationStatus_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.GCNotificationStatus);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}



// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.

internal unsafe class System_Math
{
	[UnmanagedCallersOnly(EntryPoint = "System_Math_Acos")]
	internal static double /* System.Double */ System_Math_Acos(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Acos(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Acosh")]
	internal static double /* System.Double */ System_Math_Acosh(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Acosh(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Asin")]
	internal static double /* System.Double */ System_Math_Asin(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Asin(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Asinh")]
	internal static double /* System.Double */ System_Math_Asinh(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Asinh(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Atan")]
	internal static double /* System.Double */ System_Math_Atan(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Atan(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Atanh")]
	internal static double /* System.Double */ System_Math_Atanh(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Atanh(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Atan2")]
	internal static double /* System.Double */ System_Math_Atan2(double /* System.Double */ y, double /* System.Double */ x, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Atan2(y, x);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Cbrt")]
	internal static double /* System.Double */ System_Math_Cbrt(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Cbrt(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Ceiling")]
	internal static double /* System.Double */ System_Math_Ceiling(double /* System.Double */ a, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Ceiling(a);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Cos")]
	internal static double /* System.Double */ System_Math_Cos(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Cos(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Cosh")]
	internal static double /* System.Double */ System_Math_Cosh(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Cosh(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Exp")]
	internal static double /* System.Double */ System_Math_Exp(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Exp(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Floor")]
	internal static double /* System.Double */ System_Math_Floor(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Floor(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_FusedMultiplyAdd")]
	internal static double /* System.Double */ System_Math_FusedMultiplyAdd(double /* System.Double */ x, double /* System.Double */ y, double /* System.Double */ z, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.FusedMultiplyAdd(x, y, z);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Log")]
	internal static double /* System.Double */ System_Math_Log(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Log(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Log2")]
	internal static double /* System.Double */ System_Math_Log2(double /* System.Double */ x, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Log2(x);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Log10")]
	internal static double /* System.Double */ System_Math_Log10(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Log10(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Pow")]
	internal static double /* System.Double */ System_Math_Pow(double /* System.Double */ x, double /* System.Double */ y, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Pow(x, y);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sin")]
	internal static double /* System.Double */ System_Math_Sin(double /* System.Double */ a, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Sin(a);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sinh")]
	internal static double /* System.Double */ System_Math_Sinh(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Sinh(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sqrt")]
	internal static double /* System.Double */ System_Math_Sqrt(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Sqrt(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Tan")]
	internal static double /* System.Double */ System_Math_Tan(double /* System.Double */ a, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Tan(a);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Tanh")]
	internal static double /* System.Double */ System_Math_Tanh(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Tanh(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Abs")]
	internal static short /* System.Int16 */ System_Math_Abs(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Math.Abs(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Abs_1")]
	internal static int /* System.Int32 */ System_Math_Abs_1(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Abs(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Abs_2")]
	internal static long /* System.Int64 */ System_Math_Abs_2(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Math.Abs(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Abs_3")]
	internal static nint /* System.IntPtr */ System_Math_Abs_3(nint /* System.IntPtr */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Math.Abs(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Abs_4")]
	internal static sbyte /* System.SByte */ System_Math_Abs_4(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Math.Abs(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Abs_5")]
	internal static void* /* System.Decimal */ System_Math_Abs_5(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Decimal __returnValue = System.Math.Abs(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Abs_6")]
	internal static double /* System.Double */ System_Math_Abs_6(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Abs(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Abs_7")]
	internal static float /* System.Single */ System_Math_Abs_7(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Math.Abs(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_BigMul")]
	internal static long /* System.Int64 */ System_Math_BigMul(int /* System.Int32 */ a, int /* System.Int32 */ b, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Math.BigMul(a, b);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_BigMul_1")]
	internal static ulong /* System.UInt64 */ System_Math_BigMul_1(ulong /* System.UInt64 */ a, ulong /* System.UInt64 */ b, ulong* /* System.UInt64 */ low, void** /* System.Exception */ __outException)
	{
		System.UInt64 lowConverted;
	
	    try {
			System.UInt64 __returnValue = System.Math.BigMul(a, b, out lowConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (low is not null) {
				*low = lowConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (low is not null) {
				*low = 0;
			}
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_BigMul_2")]
	internal static long /* System.Int64 */ System_Math_BigMul_2(long /* System.Int64 */ a, long /* System.Int64 */ b, long* /* System.Int64 */ low, void** /* System.Exception */ __outException)
	{
		System.Int64 lowConverted;
	
	    try {
			System.Int64 __returnValue = System.Math.BigMul(a, b, out lowConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (low is not null) {
				*low = lowConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (low is not null) {
				*low = -1;
			}
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_BitDecrement")]
	internal static double /* System.Double */ System_Math_BitDecrement(double /* System.Double */ x, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.BitDecrement(x);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_BitIncrement")]
	internal static double /* System.Double */ System_Math_BitIncrement(double /* System.Double */ x, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.BitIncrement(x);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_CopySign")]
	internal static double /* System.Double */ System_Math_CopySign(double /* System.Double */ x, double /* System.Double */ y, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.CopySign(x, y);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_DivRem")]
	internal static int /* System.Int32 */ System_Math_DivRem(int /* System.Int32 */ a, int /* System.Int32 */ b, int* /* System.Int32 */ result, void** /* System.Exception */ __outException)
	{
		System.Int32 resultConverted;
	
	    try {
			System.Int32 __returnValue = System.Math.DivRem(a, b, out resultConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = -1;
			}
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_DivRem_1")]
	internal static long /* System.Int64 */ System_Math_DivRem_1(long /* System.Int64 */ a, long /* System.Int64 */ b, long* /* System.Int64 */ result, void** /* System.Exception */ __outException)
	{
		System.Int64 resultConverted;
	
	    try {
			System.Int64 __returnValue = System.Math.DivRem(a, b, out resultConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (result is not null) {
				*result = resultConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (result is not null) {
				*result = -1;
			}
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Ceiling_1")]
	internal static void* /* System.Decimal */ System_Math_Ceiling_1(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Math.Ceiling(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp")]
	internal static byte /* System.Byte */ System_Math_Clamp(byte /* System.Byte */ value, byte /* System.Byte */ min, byte /* System.Byte */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_1")]
	internal static void* /* System.Decimal */ System_Math_Clamp_1(void* /* System.Decimal */ value, void* /* System.Decimal */ min, void* /* System.Decimal */ max, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
		System.Decimal minConverted = InteropUtils.GetInstance<System.Decimal>(min);
		System.Decimal maxConverted = InteropUtils.GetInstance<System.Decimal>(max);
	
	    try {
			System.Decimal __returnValue = System.Math.Clamp(valueConverted, minConverted, maxConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_2")]
	internal static double /* System.Double */ System_Math_Clamp_2(double /* System.Double */ value, double /* System.Double */ min, double /* System.Double */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_3")]
	internal static short /* System.Int16 */ System_Math_Clamp_3(short /* System.Int16 */ value, short /* System.Int16 */ min, short /* System.Int16 */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_4")]
	internal static int /* System.Int32 */ System_Math_Clamp_4(int /* System.Int32 */ value, int /* System.Int32 */ min, int /* System.Int32 */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_5")]
	internal static long /* System.Int64 */ System_Math_Clamp_5(long /* System.Int64 */ value, long /* System.Int64 */ min, long /* System.Int64 */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_6")]
	internal static nint /* System.IntPtr */ System_Math_Clamp_6(nint /* System.IntPtr */ value, nint /* System.IntPtr */ min, nint /* System.IntPtr */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_7")]
	internal static sbyte /* System.SByte */ System_Math_Clamp_7(sbyte /* System.SByte */ value, sbyte /* System.SByte */ min, sbyte /* System.SByte */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_8")]
	internal static float /* System.Single */ System_Math_Clamp_8(float /* System.Single */ value, float /* System.Single */ min, float /* System.Single */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_9")]
	internal static ushort /* System.UInt16 */ System_Math_Clamp_9(ushort /* System.UInt16 */ value, ushort /* System.UInt16 */ min, ushort /* System.UInt16 */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_10")]
	internal static uint /* System.UInt32 */ System_Math_Clamp_10(uint /* System.UInt32 */ value, uint /* System.UInt32 */ min, uint /* System.UInt32 */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_11")]
	internal static ulong /* System.UInt64 */ System_Math_Clamp_11(ulong /* System.UInt64 */ value, ulong /* System.UInt64 */ min, ulong /* System.UInt64 */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Clamp_12")]
	internal static nuint /* System.UIntPtr */ System_Math_Clamp_12(nuint /* System.UIntPtr */ value, nuint /* System.UIntPtr */ min, nuint /* System.UIntPtr */ max, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UIntPtr __returnValue = System.Math.Clamp(value, min, max);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nuint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Floor_1")]
	internal static void* /* System.Decimal */ System_Math_Floor_1(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Math.Floor(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_IEEERemainder")]
	internal static double /* System.Double */ System_Math_IEEERemainder(double /* System.Double */ x, double /* System.Double */ y, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.IEEERemainder(x, y);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_ILogB")]
	internal static int /* System.Int32 */ System_Math_ILogB(double /* System.Double */ x, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.ILogB(x);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Log_1")]
	internal static double /* System.Double */ System_Math_Log_1(double /* System.Double */ a, double /* System.Double */ newBase, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Log(a, newBase);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max")]
	internal static byte /* System.Byte */ System_Math_Max(byte /* System.Byte */ val1, byte /* System.Byte */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_1")]
	internal static void* /* System.Decimal */ System_Math_Max_1(void* /* System.Decimal */ val1, void* /* System.Decimal */ val2, void** /* System.Exception */ __outException)
	{
		System.Decimal val1Converted = InteropUtils.GetInstance<System.Decimal>(val1);
		System.Decimal val2Converted = InteropUtils.GetInstance<System.Decimal>(val2);
	
	    try {
			System.Decimal __returnValue = System.Math.Max(val1Converted, val2Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_2")]
	internal static double /* System.Double */ System_Math_Max_2(double /* System.Double */ val1, double /* System.Double */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_3")]
	internal static short /* System.Int16 */ System_Math_Max_3(short /* System.Int16 */ val1, short /* System.Int16 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_4")]
	internal static int /* System.Int32 */ System_Math_Max_4(int /* System.Int32 */ val1, int /* System.Int32 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_5")]
	internal static long /* System.Int64 */ System_Math_Max_5(long /* System.Int64 */ val1, long /* System.Int64 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_6")]
	internal static nint /* System.IntPtr */ System_Math_Max_6(nint /* System.IntPtr */ val1, nint /* System.IntPtr */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_7")]
	internal static sbyte /* System.SByte */ System_Math_Max_7(sbyte /* System.SByte */ val1, sbyte /* System.SByte */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_8")]
	internal static float /* System.Single */ System_Math_Max_8(float /* System.Single */ val1, float /* System.Single */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_9")]
	internal static ushort /* System.UInt16 */ System_Math_Max_9(ushort /* System.UInt16 */ val1, ushort /* System.UInt16 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_10")]
	internal static uint /* System.UInt32 */ System_Math_Max_10(uint /* System.UInt32 */ val1, uint /* System.UInt32 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_11")]
	internal static ulong /* System.UInt64 */ System_Math_Max_11(ulong /* System.UInt64 */ val1, ulong /* System.UInt64 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Max_12")]
	internal static nuint /* System.UIntPtr */ System_Math_Max_12(nuint /* System.UIntPtr */ val1, nuint /* System.UIntPtr */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UIntPtr __returnValue = System.Math.Max(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nuint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_MaxMagnitude")]
	internal static double /* System.Double */ System_Math_MaxMagnitude(double /* System.Double */ x, double /* System.Double */ y, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.MaxMagnitude(x, y);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min")]
	internal static byte /* System.Byte */ System_Math_Min(byte /* System.Byte */ val1, byte /* System.Byte */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_1")]
	internal static void* /* System.Decimal */ System_Math_Min_1(void* /* System.Decimal */ val1, void* /* System.Decimal */ val2, void** /* System.Exception */ __outException)
	{
		System.Decimal val1Converted = InteropUtils.GetInstance<System.Decimal>(val1);
		System.Decimal val2Converted = InteropUtils.GetInstance<System.Decimal>(val2);
	
	    try {
			System.Decimal __returnValue = System.Math.Min(val1Converted, val2Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_2")]
	internal static double /* System.Double */ System_Math_Min_2(double /* System.Double */ val1, double /* System.Double */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_3")]
	internal static short /* System.Int16 */ System_Math_Min_3(short /* System.Int16 */ val1, short /* System.Int16 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_4")]
	internal static int /* System.Int32 */ System_Math_Min_4(int /* System.Int32 */ val1, int /* System.Int32 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_5")]
	internal static long /* System.Int64 */ System_Math_Min_5(long /* System.Int64 */ val1, long /* System.Int64 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_6")]
	internal static nint /* System.IntPtr */ System_Math_Min_6(nint /* System.IntPtr */ val1, nint /* System.IntPtr */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_7")]
	internal static sbyte /* System.SByte */ System_Math_Min_7(sbyte /* System.SByte */ val1, sbyte /* System.SByte */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_8")]
	internal static float /* System.Single */ System_Math_Min_8(float /* System.Single */ val1, float /* System.Single */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_9")]
	internal static ushort /* System.UInt16 */ System_Math_Min_9(ushort /* System.UInt16 */ val1, ushort /* System.UInt16 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_10")]
	internal static uint /* System.UInt32 */ System_Math_Min_10(uint /* System.UInt32 */ val1, uint /* System.UInt32 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_11")]
	internal static ulong /* System.UInt64 */ System_Math_Min_11(ulong /* System.UInt64 */ val1, ulong /* System.UInt64 */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Min_12")]
	internal static nuint /* System.UIntPtr */ System_Math_Min_12(nuint /* System.UIntPtr */ val1, nuint /* System.UIntPtr */ val2, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UIntPtr __returnValue = System.Math.Min(val1, val2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nuint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_MinMagnitude")]
	internal static double /* System.Double */ System_Math_MinMagnitude(double /* System.Double */ x, double /* System.Double */ y, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.MinMagnitude(x, y);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_ReciprocalEstimate")]
	internal static double /* System.Double */ System_Math_ReciprocalEstimate(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.ReciprocalEstimate(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_ReciprocalSqrtEstimate")]
	internal static double /* System.Double */ System_Math_ReciprocalSqrtEstimate(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.ReciprocalSqrtEstimate(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Round")]
	internal static void* /* System.Decimal */ System_Math_Round(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Math.Round(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Round_1")]
	internal static void* /* System.Decimal */ System_Math_Round_1(void* /* System.Decimal */ d, int /* System.Int32 */ decimals, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Math.Round(dConverted, decimals);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Round_2")]
	internal static void* /* System.Decimal */ System_Math_Round_2(void* /* System.Decimal */ d, System.MidpointRounding /* System.MidpointRounding */ mode, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Math.Round(dConverted, mode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Round_3")]
	internal static void* /* System.Decimal */ System_Math_Round_3(void* /* System.Decimal */ d, int /* System.Int32 */ decimals, System.MidpointRounding /* System.MidpointRounding */ mode, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Math.Round(dConverted, decimals, mode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Round_4")]
	internal static double /* System.Double */ System_Math_Round_4(double /* System.Double */ a, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Round(a);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Round_5")]
	internal static double /* System.Double */ System_Math_Round_5(double /* System.Double */ value, int /* System.Int32 */ digits, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Round(value, digits);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Round_6")]
	internal static double /* System.Double */ System_Math_Round_6(double /* System.Double */ value, System.MidpointRounding /* System.MidpointRounding */ mode, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Round(value, mode);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Round_7")]
	internal static double /* System.Double */ System_Math_Round_7(double /* System.Double */ value, int /* System.Int32 */ digits, System.MidpointRounding /* System.MidpointRounding */ mode, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Round(value, digits, mode);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sign")]
	internal static int /* System.Int32 */ System_Math_Sign(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Int32 __returnValue = System.Math.Sign(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sign_1")]
	internal static int /* System.Int32 */ System_Math_Sign_1(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Sign(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sign_2")]
	internal static int /* System.Int32 */ System_Math_Sign_2(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Sign(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sign_3")]
	internal static int /* System.Int32 */ System_Math_Sign_3(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Sign(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sign_4")]
	internal static int /* System.Int32 */ System_Math_Sign_4(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Sign(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sign_5")]
	internal static int /* System.Int32 */ System_Math_Sign_5(nint /* System.IntPtr */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Sign(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sign_6")]
	internal static int /* System.Int32 */ System_Math_Sign_6(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Sign(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Sign_7")]
	internal static int /* System.Int32 */ System_Math_Sign_7(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Math.Sign(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Truncate")]
	internal static void* /* System.Decimal */ System_Math_Truncate(void* /* System.Decimal */ d, void** /* System.Exception */ __outException)
	{
		System.Decimal dConverted = InteropUtils.GetInstance<System.Decimal>(d);
	
	    try {
			System.Decimal __returnValue = System.Math.Truncate(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Truncate_1")]
	internal static double /* System.Double */ System_Math_Truncate_1(double /* System.Double */ d, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.Truncate(d);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_ScaleB")]
	internal static double /* System.Double */ System_Math_ScaleB(double /* System.Double */ x, int /* System.Int32 */ n, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Math.ScaleB(x, n);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_E_Get")]
	internal static double /* System.Double */ System_Math_E_Get()
	{
	
		System.Double __returnValue = System.Math.E;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_PI_Get")]
	internal static double /* System.Double */ System_Math_PI_Get()
	{
	
		System.Double __returnValue = System.Math.PI;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Tau_Get")]
	internal static double /* System.Double */ System_Math_Tau_Get()
	{
	
		System.Double __returnValue = System.Math.Tau;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_TypeOf")]
	internal static void* /* System.Type */ System_Math_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Math);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Math_Destroy")]
	internal static void /* System.Void */ System_Math_Destroy(void* /* System.Math */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Convert
{
	[UnmanagedCallersOnly(EntryPoint = "System_Convert_GetTypeCode")]
	internal static System.TypeCode /* System.TypeCode */ System_Convert_GetTypeCode(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.TypeCode __returnValue = System.Convert.GetTypeCode(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.TypeCode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_IsDBNull")]
	internal static byte /* System.Boolean */ System_Convert_IsDBNull(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = System.Convert.IsDBNull(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ChangeType")]
	internal static void* /* System.Object */ System_Convert_ChangeType(void* /* System.Object */ value, System.TypeCode /* System.TypeCode */ typeCode, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Object __returnValue = System.Convert.ChangeType(valueConverted, typeCode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ChangeType_1")]
	internal static void* /* System.Object */ System_Convert_ChangeType_1(void* /* System.Object */ value, System.TypeCode /* System.TypeCode */ typeCode, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Object __returnValue = System.Convert.ChangeType(valueConverted, typeCode, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ChangeType_2")]
	internal static void* /* System.Object */ System_Convert_ChangeType_2(void* /* System.Object */ value, void* /* System.Type */ conversionType, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Type conversionTypeConverted = InteropUtils.GetInstance<System.Type>(conversionType);
	
	    try {
			System.Object __returnValue = System.Convert.ChangeType(valueConverted, conversionTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ChangeType_3")]
	internal static void* /* System.Object */ System_Convert_ChangeType_3(void* /* System.Object */ value, void* /* System.Type */ conversionType, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Type conversionTypeConverted = InteropUtils.GetInstance<System.Type>(conversionType);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Object __returnValue = System.Convert.ChangeType(valueConverted, conversionTypeConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_1")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(valueConverted, providerConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_2")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_3")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_3(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_4")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_4(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_5")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_5(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_6")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_6(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_7")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_7(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_8")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_8(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_9")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_9(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_10")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_10(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_11")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_11(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_12")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_12(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_13")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_13(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(valueConverted, providerConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_14")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_14(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_15")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_15(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(value);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_16")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_16(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBoolean_17")]
	internal static byte /* System.Boolean */ System_Convert_ToBoolean_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Boolean __returnValue = System.Convert.ToBoolean(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar")]
	internal static char /* System.Char */ System_Convert_ToChar(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_1")]
	internal static char /* System.Char */ System_Convert_ToChar_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_2")]
	internal static char /* System.Char */ System_Convert_ToChar_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_3")]
	internal static char /* System.Char */ System_Convert_ToChar_3(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_4")]
	internal static char /* System.Char */ System_Convert_ToChar_4(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_5")]
	internal static char /* System.Char */ System_Convert_ToChar_5(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_6")]
	internal static char /* System.Char */ System_Convert_ToChar_6(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_7")]
	internal static char /* System.Char */ System_Convert_ToChar_7(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_8")]
	internal static char /* System.Char */ System_Convert_ToChar_8(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_9")]
	internal static char /* System.Char */ System_Convert_ToChar_9(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_10")]
	internal static char /* System.Char */ System_Convert_ToChar_10(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_11")]
	internal static char /* System.Char */ System_Convert_ToChar_11(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_12")]
	internal static char /* System.Char */ System_Convert_ToChar_12(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_13")]
	internal static char /* System.Char */ System_Convert_ToChar_13(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_14")]
	internal static char /* System.Char */ System_Convert_ToChar_14(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_15")]
	internal static char /* System.Char */ System_Convert_ToChar_15(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_16")]
	internal static char /* System.Char */ System_Convert_ToChar_16(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToChar_17")]
	internal static char /* System.Char */ System_Convert_ToChar_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Char __returnValue = System.Convert.ToChar(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return (char)0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_1")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_2")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_3")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_3(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_4")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_4(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_5")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_5(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_6")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_6(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_7")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_7(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_8")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_8(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_9")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_9(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_10")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_10(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_11")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_11(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_12")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_12(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_13")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_13(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_14")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_14(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_15")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_15(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_16")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_16(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_17")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte")]
	internal static byte /* System.Byte */ System_Convert_ToByte(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_1")]
	internal static byte /* System.Byte */ System_Convert_ToByte_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_2")]
	internal static byte /* System.Byte */ System_Convert_ToByte_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_3")]
	internal static byte /* System.Byte */ System_Convert_ToByte_3(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_4")]
	internal static byte /* System.Byte */ System_Convert_ToByte_4(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_5")]
	internal static byte /* System.Byte */ System_Convert_ToByte_5(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_6")]
	internal static byte /* System.Byte */ System_Convert_ToByte_6(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_7")]
	internal static byte /* System.Byte */ System_Convert_ToByte_7(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_8")]
	internal static byte /* System.Byte */ System_Convert_ToByte_8(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_9")]
	internal static byte /* System.Byte */ System_Convert_ToByte_9(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_10")]
	internal static byte /* System.Byte */ System_Convert_ToByte_10(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_11")]
	internal static byte /* System.Byte */ System_Convert_ToByte_11(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_12")]
	internal static byte /* System.Byte */ System_Convert_ToByte_12(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_13")]
	internal static byte /* System.Byte */ System_Convert_ToByte_13(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_14")]
	internal static byte /* System.Byte */ System_Convert_ToByte_14(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_15")]
	internal static byte /* System.Byte */ System_Convert_ToByte_15(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_16")]
	internal static byte /* System.Byte */ System_Convert_ToByte_16(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_17")]
	internal static byte /* System.Byte */ System_Convert_ToByte_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16")]
	internal static short /* System.Int16 */ System_Convert_ToInt16(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_1")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_2")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_3")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_3(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_4")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_4(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_5")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_5(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_6")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_6(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_7")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_7(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_8")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_8(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_9")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_9(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_10")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_10(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_11")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_11(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_12")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_12(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_13")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_13(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_14")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_14(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_15")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_15(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_16")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_16(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_17")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_1")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_2")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_3")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_3(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_4")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_4(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_5")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_5(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_6")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_6(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_7")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_7(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_8")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_8(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_9")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_9(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_10")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_10(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_11")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_11(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_12")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_12(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_13")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_13(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_14")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_14(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_15")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_15(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_16")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_16(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_17")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32")]
	internal static int /* System.Int32 */ System_Convert_ToInt32(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_1")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_2")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_3")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_3(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_4")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_4(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_5")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_5(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_6")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_6(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_7")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_7(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_8")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_8(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_9")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_9(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_10")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_10(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_11")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_11(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_12")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_12(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_13")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_13(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_14")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_14(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_15")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_15(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_16")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_16(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_17")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_1")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_2")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_3")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_3(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_4")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_4(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_5")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_5(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_6")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_6(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_7")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_7(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_8")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_8(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_9")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_9(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_10")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_10(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_11")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_11(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_12")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_12(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_13")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_13(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_14")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_14(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_15")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_15(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_16")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_16(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_17")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64")]
	internal static long /* System.Int64 */ System_Convert_ToInt64(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_1")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_2")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_3")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_3(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_4")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_4(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_5")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_5(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_6")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_6(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_7")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_7(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_8")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_8(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_9")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_9(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_10")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_10(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_11")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_11(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_12")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_12(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_13")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_13(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_14")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_14(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_15")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_15(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_16")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_16(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_17")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_1")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_2")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_3")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_3(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_4")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_4(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_5")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_5(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_6")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_6(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_7")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_7(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_8")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_8(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_9")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_9(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_10")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_10(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_11")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_11(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_12")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_12(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_13")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_13(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_14")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_14(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_15")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_15(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_16")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_16(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_17")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle")]
	internal static float /* System.Single */ System_Convert_ToSingle(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_1")]
	internal static float /* System.Single */ System_Convert_ToSingle_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_2")]
	internal static float /* System.Single */ System_Convert_ToSingle_2(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_3")]
	internal static float /* System.Single */ System_Convert_ToSingle_3(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_4")]
	internal static float /* System.Single */ System_Convert_ToSingle_4(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_5")]
	internal static float /* System.Single */ System_Convert_ToSingle_5(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_6")]
	internal static float /* System.Single */ System_Convert_ToSingle_6(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_7")]
	internal static float /* System.Single */ System_Convert_ToSingle_7(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_8")]
	internal static float /* System.Single */ System_Convert_ToSingle_8(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_9")]
	internal static float /* System.Single */ System_Convert_ToSingle_9(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_10")]
	internal static float /* System.Single */ System_Convert_ToSingle_10(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_11")]
	internal static float /* System.Single */ System_Convert_ToSingle_11(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_12")]
	internal static float /* System.Single */ System_Convert_ToSingle_12(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_13")]
	internal static float /* System.Single */ System_Convert_ToSingle_13(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_14")]
	internal static float /* System.Single */ System_Convert_ToSingle_14(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_15")]
	internal static float /* System.Single */ System_Convert_ToSingle_15(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_16")]
	internal static float /* System.Single */ System_Convert_ToSingle_16(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSingle_17")]
	internal static float /* System.Single */ System_Convert_ToSingle_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Single __returnValue = System.Convert.ToSingle(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble")]
	internal static double /* System.Double */ System_Convert_ToDouble(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_1")]
	internal static double /* System.Double */ System_Convert_ToDouble_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_2")]
	internal static double /* System.Double */ System_Convert_ToDouble_2(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_3")]
	internal static double /* System.Double */ System_Convert_ToDouble_3(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_4")]
	internal static double /* System.Double */ System_Convert_ToDouble_4(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_5")]
	internal static double /* System.Double */ System_Convert_ToDouble_5(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_6")]
	internal static double /* System.Double */ System_Convert_ToDouble_6(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_7")]
	internal static double /* System.Double */ System_Convert_ToDouble_7(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_8")]
	internal static double /* System.Double */ System_Convert_ToDouble_8(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_9")]
	internal static double /* System.Double */ System_Convert_ToDouble_9(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_10")]
	internal static double /* System.Double */ System_Convert_ToDouble_10(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_11")]
	internal static double /* System.Double */ System_Convert_ToDouble_11(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_12")]
	internal static double /* System.Double */ System_Convert_ToDouble_12(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_13")]
	internal static double /* System.Double */ System_Convert_ToDouble_13(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_14")]
	internal static double /* System.Double */ System_Convert_ToDouble_14(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_15")]
	internal static double /* System.Double */ System_Convert_ToDouble_15(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(valueConverted, providerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_16")]
	internal static double /* System.Double */ System_Convert_ToDouble_16(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDouble_17")]
	internal static double /* System.Double */ System_Convert_ToDouble_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Double __returnValue = System.Convert.ToDouble(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_1")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(valueConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_2")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_2(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_3")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_3(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_4")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_4(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_5")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_5(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_6")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_6(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_7")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_7(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_8")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_8(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_9")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_9(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_10")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_10(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_11")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_11(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_12")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_12(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_13")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_13(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_14")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_14(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(valueConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_15")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_15(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_16")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_16(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDecimal_17")]
	internal static void* /* System.Decimal */ System_Convert_ToDecimal_17(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.Decimal __returnValue = System.Convert.ToDecimal(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_1")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_1(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_2")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_2(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(valueConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_3")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_3(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_4")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_4(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(valueConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_5")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_5(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_6")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_6(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_7")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_7(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_8")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_8(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_9")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_9(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_10")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_10(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_11")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_11(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_12")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_12(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_13")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_13(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_14")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_14(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_15")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_15(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_16")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_16(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToDateTime_17")]
	internal static void* /* System.DateTime */ System_Convert_ToDateTime_17(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.DateTime __returnValue = System.Convert.ToDateTime(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString")]
	internal static byte* /* System.String */ System_Convert_ToString(void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.String __returnValue = System.Convert.ToString(valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_1")]
	internal static byte* /* System.String */ System_Convert_ToString_1(void* /* System.Object */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(valueConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_2")]
	internal static byte* /* System.String */ System_Convert_ToString_2(byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.String __returnValue = System.Convert.ToString(valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_3")]
	internal static byte* /* System.String */ System_Convert_ToString_3(byte /* System.Boolean */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Boolean valueConverted = value.ToBool();
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(valueConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_4")]
	internal static byte* /* System.String */ System_Convert_ToString_4(char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_5")]
	internal static byte* /* System.String */ System_Convert_ToString_5(char /* System.Char */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_6")]
	internal static byte* /* System.String */ System_Convert_ToString_6(sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_7")]
	internal static byte* /* System.String */ System_Convert_ToString_7(sbyte /* System.SByte */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_8")]
	internal static byte* /* System.String */ System_Convert_ToString_8(byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_9")]
	internal static byte* /* System.String */ System_Convert_ToString_9(byte /* System.Byte */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_10")]
	internal static byte* /* System.String */ System_Convert_ToString_10(short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_11")]
	internal static byte* /* System.String */ System_Convert_ToString_11(short /* System.Int16 */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_12")]
	internal static byte* /* System.String */ System_Convert_ToString_12(ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_13")]
	internal static byte* /* System.String */ System_Convert_ToString_13(ushort /* System.UInt16 */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_14")]
	internal static byte* /* System.String */ System_Convert_ToString_14(int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_15")]
	internal static byte* /* System.String */ System_Convert_ToString_15(int /* System.Int32 */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_16")]
	internal static byte* /* System.String */ System_Convert_ToString_16(uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_17")]
	internal static byte* /* System.String */ System_Convert_ToString_17(uint /* System.UInt32 */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_18")]
	internal static byte* /* System.String */ System_Convert_ToString_18(long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_19")]
	internal static byte* /* System.String */ System_Convert_ToString_19(long /* System.Int64 */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_20")]
	internal static byte* /* System.String */ System_Convert_ToString_20(ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_21")]
	internal static byte* /* System.String */ System_Convert_ToString_21(ulong /* System.UInt64 */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_22")]
	internal static byte* /* System.String */ System_Convert_ToString_22(float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_23")]
	internal static byte* /* System.String */ System_Convert_ToString_23(float /* System.Single */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_24")]
	internal static byte* /* System.String */ System_Convert_ToString_24(double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_25")]
	internal static byte* /* System.String */ System_Convert_ToString_25(double /* System.Double */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_26")]
	internal static byte* /* System.String */ System_Convert_ToString_26(void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.String __returnValue = System.Convert.ToString(valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_27")]
	internal static byte* /* System.String */ System_Convert_ToString_27(void* /* System.Decimal */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(valueConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_28")]
	internal static byte* /* System.String */ System_Convert_ToString_28(void* /* System.DateTime */ value, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
	
	    try {
			System.String __returnValue = System.Convert.ToString(valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_29")]
	internal static byte* /* System.String */ System_Convert_ToString_29(void* /* System.DateTime */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.DateTime valueConverted = InteropUtils.GetInstance<System.DateTime>(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(valueConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_30")]
	internal static byte* /* System.String */ System_Convert_ToString_30(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.String __returnValue = System.Convert.ToString(valueConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_31")]
	internal static byte* /* System.String */ System_Convert_ToString_31(byte* /* System.String */ value, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.String __returnValue = System.Convert.ToString(valueConverted, providerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToByte_18")]
	internal static byte /* System.Byte */ System_Convert_ToByte_18(byte* /* System.String */ value, int /* System.Int32 */ fromBase, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Byte __returnValue = System.Convert.ToByte(valueConverted, fromBase);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToSByte_18")]
	internal static sbyte /* System.SByte */ System_Convert_ToSByte_18(byte* /* System.String */ value, int /* System.Int32 */ fromBase, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.SByte __returnValue = System.Convert.ToSByte(valueConverted, fromBase);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt16_18")]
	internal static short /* System.Int16 */ System_Convert_ToInt16_18(byte* /* System.String */ value, int /* System.Int32 */ fromBase, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int16 __returnValue = System.Convert.ToInt16(valueConverted, fromBase);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt16_18")]
	internal static ushort /* System.UInt16 */ System_Convert_ToUInt16_18(byte* /* System.String */ value, int /* System.Int32 */ fromBase, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.UInt16 __returnValue = System.Convert.ToUInt16(valueConverted, fromBase);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt32_18")]
	internal static int /* System.Int32 */ System_Convert_ToInt32_18(byte* /* System.String */ value, int /* System.Int32 */ fromBase, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int32 __returnValue = System.Convert.ToInt32(valueConverted, fromBase);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt32_18")]
	internal static uint /* System.UInt32 */ System_Convert_ToUInt32_18(byte* /* System.String */ value, int /* System.Int32 */ fromBase, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.UInt32 __returnValue = System.Convert.ToUInt32(valueConverted, fromBase);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToInt64_18")]
	internal static long /* System.Int64 */ System_Convert_ToInt64_18(byte* /* System.String */ value, int /* System.Int32 */ fromBase, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Int64 __returnValue = System.Convert.ToInt64(valueConverted, fromBase);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToUInt64_18")]
	internal static ulong /* System.UInt64 */ System_Convert_ToUInt64_18(byte* /* System.String */ value, int /* System.Int32 */ fromBase, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.UInt64 __returnValue = System.Convert.ToUInt64(valueConverted, fromBase);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_32")]
	internal static byte* /* System.String */ System_Convert_ToString_32(byte /* System.Byte */ value, int /* System.Int32 */ toBase, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, toBase);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_33")]
	internal static byte* /* System.String */ System_Convert_ToString_33(short /* System.Int16 */ value, int /* System.Int32 */ toBase, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, toBase);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_34")]
	internal static byte* /* System.String */ System_Convert_ToString_34(int /* System.Int32 */ value, int /* System.Int32 */ toBase, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, toBase);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToString_35")]
	internal static byte* /* System.String */ System_Convert_ToString_35(long /* System.Int64 */ value, int /* System.Int32 */ toBase, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Convert.ToString(value, toBase);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBase64String")]
	internal static byte* /* System.String */ System_Convert_ToBase64String(void* /* System.Byte[] */ inArray, void** /* System.Exception */ __outException)
	{
		System.Byte[] inArrayConverted = InteropUtils.GetInstance<System.Byte[]>(inArray);
	
	    try {
			System.String __returnValue = System.Convert.ToBase64String(inArrayConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBase64String_1")]
	internal static byte* /* System.String */ System_Convert_ToBase64String_1(void* /* System.Byte[] */ inArray, System.Base64FormattingOptions /* System.Base64FormattingOptions */ options, void** /* System.Exception */ __outException)
	{
		System.Byte[] inArrayConverted = InteropUtils.GetInstance<System.Byte[]>(inArray);
	
	    try {
			System.String __returnValue = System.Convert.ToBase64String(inArrayConverted, options);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBase64String_2")]
	internal static byte* /* System.String */ System_Convert_ToBase64String_2(void* /* System.Byte[] */ inArray, int /* System.Int32 */ offset, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Byte[] inArrayConverted = InteropUtils.GetInstance<System.Byte[]>(inArray);
	
	    try {
			System.String __returnValue = System.Convert.ToBase64String(inArrayConverted, offset, length);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBase64String_3")]
	internal static byte* /* System.String */ System_Convert_ToBase64String_3(void* /* System.Byte[] */ inArray, int /* System.Int32 */ offset, int /* System.Int32 */ length, System.Base64FormattingOptions /* System.Base64FormattingOptions */ options, void** /* System.Exception */ __outException)
	{
		System.Byte[] inArrayConverted = InteropUtils.GetInstance<System.Byte[]>(inArray);
	
	    try {
			System.String __returnValue = System.Convert.ToBase64String(inArrayConverted, offset, length, options);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBase64CharArray")]
	internal static int /* System.Int32 */ System_Convert_ToBase64CharArray(void* /* System.Byte[] */ inArray, int /* System.Int32 */ offsetIn, int /* System.Int32 */ length, void* /* System.Char[] */ outArray, int /* System.Int32 */ offsetOut, void** /* System.Exception */ __outException)
	{
		System.Byte[] inArrayConverted = InteropUtils.GetInstance<System.Byte[]>(inArray);
		System.Char[] outArrayConverted = InteropUtils.GetInstance<System.Char[]>(outArray);
	
	    try {
			System.Int32 __returnValue = System.Convert.ToBase64CharArray(inArrayConverted, offsetIn, length, outArrayConverted, offsetOut);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToBase64CharArray_1")]
	internal static int /* System.Int32 */ System_Convert_ToBase64CharArray_1(void* /* System.Byte[] */ inArray, int /* System.Int32 */ offsetIn, int /* System.Int32 */ length, void* /* System.Char[] */ outArray, int /* System.Int32 */ offsetOut, System.Base64FormattingOptions /* System.Base64FormattingOptions */ options, void** /* System.Exception */ __outException)
	{
		System.Byte[] inArrayConverted = InteropUtils.GetInstance<System.Byte[]>(inArray);
		System.Char[] outArrayConverted = InteropUtils.GetInstance<System.Char[]>(outArray);
	
	    try {
			System.Int32 __returnValue = System.Convert.ToBase64CharArray(inArrayConverted, offsetIn, length, outArrayConverted, offsetOut, options);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_FromBase64String")]
	internal static void* /* System.Byte[] */ System_Convert_FromBase64String(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Byte[] __returnValue = System.Convert.FromBase64String(sConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_FromBase64CharArray")]
	internal static void* /* System.Byte[] */ System_Convert_FromBase64CharArray(void* /* System.Char[] */ inArray, int /* System.Int32 */ offset, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Char[] inArrayConverted = InteropUtils.GetInstance<System.Char[]>(inArray);
	
	    try {
			System.Byte[] __returnValue = System.Convert.FromBase64CharArray(inArrayConverted, offset, length);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_FromHexString")]
	internal static void* /* System.Byte[] */ System_Convert_FromHexString(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.Byte[] __returnValue = System.Convert.FromHexString(sConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToHexString")]
	internal static byte* /* System.String */ System_Convert_ToHexString(void* /* System.Byte[] */ inArray, void** /* System.Exception */ __outException)
	{
		System.Byte[] inArrayConverted = InteropUtils.GetInstance<System.Byte[]>(inArray);
	
	    try {
			System.String __returnValue = System.Convert.ToHexString(inArrayConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_ToHexString_1")]
	internal static byte* /* System.String */ System_Convert_ToHexString_1(void* /* System.Byte[] */ inArray, int /* System.Int32 */ offset, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Byte[] inArrayConverted = InteropUtils.GetInstance<System.Byte[]>(inArray);
	
	    try {
			System.String __returnValue = System.Convert.ToHexString(inArrayConverted, offset, length);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_DBNull_Get")]
	internal static void* /* System.Object */ System_Convert_DBNull_Get()
	{
	
		System.Object __returnValue = System.Convert.DBNull;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_TypeOf")]
	internal static void* /* System.Type */ System_Convert_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Convert);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Convert_Destroy")]
	internal static void /* System.Void */ System_Convert_Destroy(void* /* System.Convert */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Base64FormattingOptions
{
	[UnmanagedCallersOnly(EntryPoint = "System_Base64FormattingOptions_TypeOf")]
	internal static void* /* System.Type */ System_Base64FormattingOptions_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Base64FormattingOptions);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Threading_Thread
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_SpinWait")]
	internal static void /* System.Void */ System_Threading_Thread_SpinWait(int /* System.Int32 */ iterations, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Thread.SpinWait(iterations);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Yield")]
	internal static byte /* System.Boolean */ System_Threading_Thread_Yield(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Threading.Thread.Yield();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_GetApartmentState")]
	internal static System.Threading.ApartmentState /* System.Threading.ApartmentState */ System_Threading_Thread_GetApartmentState(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Threading.ApartmentState __returnValue = __selfConverted.GetApartmentState();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.ApartmentState);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_DisableComObjectEagerCleanup")]
	internal static void /* System.Void */ System_Threading_Thread_DisableComObjectEagerCleanup(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.DisableComObjectEagerCleanup();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Interrupt")]
	internal static void /* System.Void */ System_Threading_Thread_Interrupt(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.Interrupt();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Join")]
	internal static byte /* System.Boolean */ System_Threading_Thread_Join(void* /* System.Threading.Thread */ __self, int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Join(millisecondsTimeout);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Start")]
	internal static void /* System.Void */ System_Threading_Thread_Start(void* /* System.Threading.Thread */ __self, void* /* System.Object */ parameter, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
		System.Object parameterConverted = InteropUtils.GetInstance<System.Object>(parameter);
	
	    try {
			__selfConverted.Start(parameterConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_UnsafeStart")]
	internal static void /* System.Void */ System_Threading_Thread_UnsafeStart(void* /* System.Threading.Thread */ __self, void* /* System.Object */ parameter, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
		System.Object parameterConverted = InteropUtils.GetInstance<System.Object>(parameter);
	
	    try {
			__selfConverted.UnsafeStart(parameterConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Start_1")]
	internal static void /* System.Void */ System_Threading_Thread_Start_1(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.Start();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_UnsafeStart_1")]
	internal static void /* System.Void */ System_Threading_Thread_UnsafeStart_1(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.UnsafeStart();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Sleep")]
	internal static void /* System.Void */ System_Threading_Thread_Sleep(int /* System.Int32 */ millisecondsTimeout, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Thread.Sleep(millisecondsTimeout);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Abort")]
	internal static void /* System.Void */ System_Threading_Thread_Abort(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.Abort();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Abort_1")]
	internal static void /* System.Void */ System_Threading_Thread_Abort_1(void* /* System.Threading.Thread */ __self, void* /* System.Object */ stateInfo, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
		System.Object stateInfoConverted = InteropUtils.GetInstance<System.Object>(stateInfo);
	
	    try {
			__selfConverted.Abort(stateInfoConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_ResetAbort")]
	internal static void /* System.Void */ System_Threading_Thread_ResetAbort(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Thread.ResetAbort();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Suspend")]
	internal static void /* System.Void */ System_Threading_Thread_Suspend(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.Suspend();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Resume")]
	internal static void /* System.Void */ System_Threading_Thread_Resume(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.Resume();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_BeginCriticalRegion")]
	internal static void /* System.Void */ System_Threading_Thread_BeginCriticalRegion(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Thread.BeginCriticalRegion();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_EndCriticalRegion")]
	internal static void /* System.Void */ System_Threading_Thread_EndCriticalRegion(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Thread.EndCriticalRegion();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_BeginThreadAffinity")]
	internal static void /* System.Void */ System_Threading_Thread_BeginThreadAffinity(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Thread.BeginThreadAffinity();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_EndThreadAffinity")]
	internal static void /* System.Void */ System_Threading_Thread_EndThreadAffinity(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Thread.EndThreadAffinity();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_AllocateDataSlot")]
	internal static void* /* System.LocalDataStoreSlot */ System_Threading_Thread_AllocateDataSlot(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.LocalDataStoreSlot __returnValue = System.Threading.Thread.AllocateDataSlot();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_AllocateNamedDataSlot")]
	internal static void* /* System.LocalDataStoreSlot */ System_Threading_Thread_AllocateNamedDataSlot(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.LocalDataStoreSlot __returnValue = System.Threading.Thread.AllocateNamedDataSlot(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_GetNamedDataSlot")]
	internal static void* /* System.LocalDataStoreSlot */ System_Threading_Thread_GetNamedDataSlot(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.LocalDataStoreSlot __returnValue = System.Threading.Thread.GetNamedDataSlot(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_FreeNamedDataSlot")]
	internal static void /* System.Void */ System_Threading_Thread_FreeNamedDataSlot(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Threading.Thread.FreeNamedDataSlot(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_GetData")]
	internal static void* /* System.Object */ System_Threading_Thread_GetData(void* /* System.LocalDataStoreSlot */ slot, void** /* System.Exception */ __outException)
	{
		System.LocalDataStoreSlot slotConverted = InteropUtils.GetInstance<System.LocalDataStoreSlot>(slot);
	
	    try {
			System.Object __returnValue = System.Threading.Thread.GetData(slotConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_SetData")]
	internal static void /* System.Void */ System_Threading_Thread_SetData(void* /* System.LocalDataStoreSlot */ slot, void* /* System.Object */ data, void** /* System.Exception */ __outException)
	{
		System.LocalDataStoreSlot slotConverted = InteropUtils.GetInstance<System.LocalDataStoreSlot>(slot);
		System.Object dataConverted = InteropUtils.GetInstance<System.Object>(data);
	
	    try {
			System.Threading.Thread.SetData(slotConverted, dataConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_SetApartmentState")]
	internal static void /* System.Void */ System_Threading_Thread_SetApartmentState(void* /* System.Threading.Thread */ __self, System.Threading.ApartmentState /* System.Threading.ApartmentState */ state, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.SetApartmentState(state);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_TrySetApartmentState")]
	internal static byte /* System.Boolean */ System_Threading_Thread_TrySetApartmentState(void* /* System.Threading.Thread */ __self, System.Threading.ApartmentState /* System.Threading.ApartmentState */ state, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.TrySetApartmentState(state);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_GetCompressedStack")]
	internal static void* /* System.Threading.CompressedStack */ System_Threading_Thread_GetCompressedStack(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Threading.CompressedStack __returnValue = __selfConverted.GetCompressedStack();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_SetCompressedStack")]
	internal static void /* System.Void */ System_Threading_Thread_SetCompressedStack(void* /* System.Threading.Thread */ __self, void* /* System.Threading.CompressedStack */ stack, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
		System.Threading.CompressedStack stackConverted = InteropUtils.GetInstance<System.Threading.CompressedStack>(stack);
	
	    try {
			__selfConverted.SetCompressedStack(stackConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_GetDomain")]
	internal static void* /* System.AppDomain */ System_Threading_Thread_GetDomain(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.AppDomain __returnValue = System.Threading.Thread.GetDomain();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_GetDomainID")]
	internal static int /* System.Int32 */ System_Threading_Thread_GetDomainID(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Threading.Thread.GetDomainID();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_GetHashCode")]
	internal static int /* System.Int32 */ System_Threading_Thread_GetHashCode(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Join_1")]
	internal static void /* System.Void */ System_Threading_Thread_Join_1(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.Join();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Join_2")]
	internal static byte /* System.Boolean */ System_Threading_Thread_Join_2(void* /* System.Threading.Thread */ __self, void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Join(timeoutConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_MemoryBarrier")]
	internal static void /* System.Void */ System_Threading_Thread_MemoryBarrier(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Thread.MemoryBarrier();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Sleep_1")]
	internal static void /* System.Void */ System_Threading_Thread_Sleep_1(void* /* System.TimeSpan */ timeout, void** /* System.Exception */ __outException)
	{
		System.TimeSpan timeoutConverted = InteropUtils.GetInstance<System.TimeSpan>(timeout);
	
	    try {
			System.Threading.Thread.Sleep(timeoutConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead")]
	internal static byte /* System.Byte */ System_Threading_Thread_VolatileRead(byte* /* System.Byte */ address, void** /* System.Exception */ __outException)
	{
		System.Byte addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Byte);
		}
	
	
	    try {
			System.Byte __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_1")]
	internal static double /* System.Double */ System_Threading_Thread_VolatileRead_1(double* /* System.Double */ address, void** /* System.Exception */ __outException)
	{
		System.Double addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Double);
		}
	
	
	    try {
			System.Double __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_2")]
	internal static short /* System.Int16 */ System_Threading_Thread_VolatileRead_2(short* /* System.Int16 */ address, void** /* System.Exception */ __outException)
	{
		System.Int16 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Int16);
		}
	
	
	    try {
			System.Int16 __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_3")]
	internal static int /* System.Int32 */ System_Threading_Thread_VolatileRead_3(int* /* System.Int32 */ address, void** /* System.Exception */ __outException)
	{
		System.Int32 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Int32);
		}
	
	
	    try {
			System.Int32 __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_4")]
	internal static long /* System.Int64 */ System_Threading_Thread_VolatileRead_4(long* /* System.Int64 */ address, void** /* System.Exception */ __outException)
	{
		System.Int64 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Int64);
		}
	
	
	    try {
			System.Int64 __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_5")]
	internal static nint /* System.IntPtr */ System_Threading_Thread_VolatileRead_5(nint* /* System.IntPtr */ address, void** /* System.Exception */ __outException)
	{
		System.IntPtr addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.IntPtr);
		}
	
	
	    try {
			System.IntPtr __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_6")]
	internal static void* /* System.Object */ System_Threading_Thread_VolatileRead_6(void** /* System.Object */ address, void** /* System.Exception */ __outException)
	{
		System.Object addressConverted;
	
		if (address is not null) {
			addressConverted = InteropUtils.GetInstance<System.Object>((*address));
		} else {
			addressConverted = default(System.Object);
		}
	
	
	    try {
			System.Object __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_7")]
	internal static sbyte /* System.SByte */ System_Threading_Thread_VolatileRead_7(sbyte* /* System.SByte */ address, void** /* System.Exception */ __outException)
	{
		System.SByte addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.SByte);
		}
	
	
	    try {
			System.SByte __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_8")]
	internal static float /* System.Single */ System_Threading_Thread_VolatileRead_8(float* /* System.Single */ address, void** /* System.Exception */ __outException)
	{
		System.Single addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Single);
		}
	
	
	    try {
			System.Single __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_9")]
	internal static ushort /* System.UInt16 */ System_Threading_Thread_VolatileRead_9(ushort* /* System.UInt16 */ address, void** /* System.Exception */ __outException)
	{
		System.UInt16 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.UInt16);
		}
	
	
	    try {
			System.UInt16 __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_10")]
	internal static uint /* System.UInt32 */ System_Threading_Thread_VolatileRead_10(uint* /* System.UInt32 */ address, void** /* System.Exception */ __outException)
	{
		System.UInt32 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.UInt32);
		}
	
	
	    try {
			System.UInt32 __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_11")]
	internal static ulong /* System.UInt64 */ System_Threading_Thread_VolatileRead_11(ulong* /* System.UInt64 */ address, void** /* System.Exception */ __outException)
	{
		System.UInt64 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.UInt64);
		}
	
	
	    try {
			System.UInt64 __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileRead_12")]
	internal static nuint /* System.UIntPtr */ System_Threading_Thread_VolatileRead_12(nuint* /* System.UIntPtr */ address, void** /* System.Exception */ __outException)
	{
		System.UIntPtr addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.UIntPtr);
		}
	
	
	    try {
			System.UIntPtr __returnValue = System.Threading.Thread.VolatileRead(ref addressConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nuint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite(byte* /* System.Byte */ address, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		System.Byte addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Byte);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_1")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_1(double* /* System.Double */ address, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		System.Double addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Double);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_2")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_2(short* /* System.Int16 */ address, short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
		System.Int16 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Int16);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_3")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_3(int* /* System.Int32 */ address, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		System.Int32 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Int32);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_4")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_4(long* /* System.Int64 */ address, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		System.Int64 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Int64);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_5")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_5(nint* /* System.IntPtr */ address, nint /* System.IntPtr */ value, void** /* System.Exception */ __outException)
	{
		System.IntPtr addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.IntPtr);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_6")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_6(void** /* System.Object */ address, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		System.Object addressConverted;
	
		if (address is not null) {
			addressConverted = InteropUtils.GetInstance<System.Object>((*address));
		} else {
			addressConverted = default(System.Object);
		}
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted.AllocateGCHandleAndGetAddress();
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_7")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_7(sbyte* /* System.SByte */ address, sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
		System.SByte addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.SByte);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_8")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_8(float* /* System.Single */ address, float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
		System.Single addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.Single);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_9")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_9(ushort* /* System.UInt16 */ address, ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
		System.UInt16 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.UInt16);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_10")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_10(uint* /* System.UInt32 */ address, uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
		System.UInt32 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.UInt32);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_11")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_11(ulong* /* System.UInt64 */ address, ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
		System.UInt64 addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.UInt64);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_VolatileWrite_12")]
	internal static void /* System.Void */ System_Threading_Thread_VolatileWrite_12(nuint* /* System.UIntPtr */ address, nuint /* System.UIntPtr */ value, void** /* System.Exception */ __outException)
	{
		System.UIntPtr addressConverted;
	
		if (address is not null) {
			addressConverted = *address;
		} else {
			addressConverted = default(System.UIntPtr);
		}
	
	
	    try {
			System.Threading.Thread.VolatileWrite(ref addressConverted, value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (address is not null) {
				*address = addressConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_GetCurrentProcessorId")]
	internal static int /* System.Int32 */ System_Threading_Thread_GetCurrentProcessorId(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Threading.Thread.GetCurrentProcessorId();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Create")]
	internal static void* /* System.Threading.Thread */ System_Threading_Thread_Create(void* /* System.Threading.ThreadStart */ start, void** /* System.Exception */ __outException)
	{
		System.Threading.ThreadStart startConverted = InteropUtils.GetInstance<System_Threading_ThreadStart>(start)?.Trampoline;
	
	    try {
			System.Threading.Thread __returnValue = new System.Threading.Thread(startConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Create_1")]
	internal static void* /* System.Threading.Thread */ System_Threading_Thread_Create_1(void* /* System.Threading.ThreadStart */ start, int /* System.Int32 */ maxStackSize, void** /* System.Exception */ __outException)
	{
		System.Threading.ThreadStart startConverted = InteropUtils.GetInstance<System_Threading_ThreadStart>(start)?.Trampoline;
	
	    try {
			System.Threading.Thread __returnValue = new System.Threading.Thread(startConverted, maxStackSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Create_2")]
	internal static void* /* System.Threading.Thread */ System_Threading_Thread_Create_2(void* /* System.Threading.ParameterizedThreadStart */ start, void** /* System.Exception */ __outException)
	{
		System.Threading.ParameterizedThreadStart startConverted = InteropUtils.GetInstance<System_Threading_ParameterizedThreadStart>(start)?.Trampoline;
	
	    try {
			System.Threading.Thread __returnValue = new System.Threading.Thread(startConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Create_3")]
	internal static void* /* System.Threading.Thread */ System_Threading_Thread_Create_3(void* /* System.Threading.ParameterizedThreadStart */ start, int /* System.Int32 */ maxStackSize, void** /* System.Exception */ __outException)
	{
		System.Threading.ParameterizedThreadStart startConverted = InteropUtils.GetInstance<System_Threading_ParameterizedThreadStart>(start)?.Trampoline;
	
	    try {
			System.Threading.Thread __returnValue = new System.Threading.Thread(startConverted, maxStackSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_ManagedThreadId_Get")]
	internal static int /* System.Int32 */ System_Threading_Thread_ManagedThreadId_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ManagedThreadId;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_IsAlive_Get")]
	internal static byte /* System.Boolean */ System_Threading_Thread_IsAlive_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAlive;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_IsBackground_Get")]
	internal static byte /* System.Boolean */ System_Threading_Thread_IsBackground_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsBackground;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_IsBackground_Set")]
	internal static void /* System.Void */ System_Threading_Thread_IsBackground_Set(void* /* System.Threading.Thread */ __self, byte /* System.Boolean */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.IsBackground = __value.ToBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_IsThreadPoolThread_Get")]
	internal static byte /* System.Boolean */ System_Threading_Thread_IsThreadPoolThread_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsThreadPoolThread;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Priority_Get")]
	internal static System.Threading.ThreadPriority /* System.Threading.ThreadPriority */ System_Threading_Thread_Priority_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Threading.ThreadPriority __returnValue = __selfConverted.Priority;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.ThreadPriority);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Priority_Set")]
	internal static void /* System.Void */ System_Threading_Thread_Priority_Set(void* /* System.Threading.Thread */ __self, System.Threading.ThreadPriority /* System.Threading.ThreadPriority */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.Priority = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_ThreadState_Get")]
	internal static System.Threading.ThreadState /* System.Threading.ThreadState */ System_Threading_Thread_ThreadState_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Threading.ThreadState __returnValue = __selfConverted.ThreadState;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.ThreadState);
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_CurrentCulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Threading_Thread_CurrentCulture_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Globalization.CultureInfo __returnValue = __selfConverted.CurrentCulture;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_CurrentCulture_Set")]
	internal static void /* System.Void */ System_Threading_Thread_CurrentCulture_Set(void* /* System.Threading.Thread */ __self, void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.CurrentCulture = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_CurrentUICulture_Get")]
	internal static void* /* System.Globalization.CultureInfo */ System_Threading_Thread_CurrentUICulture_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Globalization.CultureInfo __returnValue = __selfConverted.CurrentUICulture;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_CurrentUICulture_Set")]
	internal static void /* System.Void */ System_Threading_Thread_CurrentUICulture_Set(void* /* System.Threading.Thread */ __self, void* /* System.Globalization.CultureInfo */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.CurrentUICulture = InteropUtils.GetInstance<System.Globalization.CultureInfo>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_CurrentPrincipal_Get")]
	internal static void* /* System.Security.Principal.IPrincipal */ System_Threading_Thread_CurrentPrincipal_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Security.Principal.IPrincipal __returnValue = System.Threading.Thread.CurrentPrincipal;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_CurrentPrincipal_Set")]
	internal static void /* System.Void */ System_Threading_Thread_CurrentPrincipal_Set(void* /* System.Security.Principal.IPrincipal */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Thread.CurrentPrincipal = InteropUtils.GetInstance<System.Security.Principal.IPrincipal>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_CurrentThread_Get")]
	internal static void* /* System.Threading.Thread */ System_Threading_Thread_CurrentThread_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.Thread __returnValue = System.Threading.Thread.CurrentThread;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_ExecutionContext_Get")]
	internal static void* /* System.Threading.ExecutionContext */ System_Threading_Thread_ExecutionContext_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Threading.ExecutionContext __returnValue = __selfConverted.ExecutionContext;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Name_Get")]
	internal static byte* /* System.String */ System_Threading_Thread_Name_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Name_Set")]
	internal static void /* System.Void */ System_Threading_Thread_Name_Set(void* /* System.Threading.Thread */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.Name = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_ApartmentState_Get")]
	internal static System.Threading.ApartmentState /* System.Threading.ApartmentState */ System_Threading_Thread_ApartmentState_Get(void* /* System.Threading.Thread */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			System.Threading.ApartmentState __returnValue = __selfConverted.ApartmentState;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.Threading.ApartmentState);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_ApartmentState_Set")]
	internal static void /* System.Void */ System_Threading_Thread_ApartmentState_Set(void* /* System.Threading.Thread */ __self, System.Threading.ApartmentState /* System.Threading.ApartmentState */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Thread __selfConverted = InteropUtils.GetInstance<System.Threading.Thread>(__self);
	
	
	    try {
			__selfConverted.ApartmentState = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Thread_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Thread);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Thread_Destroy")]
	internal static void /* System.Void */ System_Threading_Thread_Destroy(void* /* System.Threading.Thread */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_ThreadPriority
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ThreadPriority_TypeOf")]
	internal static void* /* System.Type */ System_Threading_ThreadPriority_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.ThreadPriority);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Threading_ThreadState
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ThreadState_TypeOf")]
	internal static void* /* System.Type */ System_Threading_ThreadState_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.ThreadState);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Threading_ApartmentState
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ApartmentState_TypeOf")]
	internal static void* /* System.Type */ System_Threading_ApartmentState_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.ApartmentState);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Security_Principal_IPrincipal
{
	[UnmanagedCallersOnly(EntryPoint = "System_Security_Principal_IPrincipal_IsInRole")]
	internal static byte /* System.Boolean */ System_Security_Principal_IPrincipal_IsInRole(void* /* System.Security.Principal.IPrincipal */ __self, byte* /* System.String */ role, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.Principal.IPrincipal __selfConverted = InteropUtils.GetInstance<System.Security.Principal.IPrincipal>(__self);
	
		System.String roleConverted = InteropUtils.ToDotNetString(role);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsInRole(roleConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_Principal_IPrincipal_Identity_Get")]
	internal static void* /* System.Security.Principal.IIdentity */ System_Security_Principal_IPrincipal_Identity_Get(void* /* System.Security.Principal.IPrincipal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.Principal.IPrincipal __selfConverted = InteropUtils.GetInstance<System.Security.Principal.IPrincipal>(__self);
	
	
	    try {
			System.Security.Principal.IIdentity __returnValue = __selfConverted.Identity;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_Principal_IPrincipal_TypeOf")]
	internal static void* /* System.Type */ System_Security_Principal_IPrincipal_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Security.Principal.IPrincipal);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_Principal_IPrincipal_Destroy")]
	internal static void /* System.Void */ System_Security_Principal_IPrincipal_Destroy(void* /* System.Security.Principal.IPrincipal */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Security_Principal_IIdentity
{
	[UnmanagedCallersOnly(EntryPoint = "System_Security_Principal_IIdentity_Name_Get")]
	internal static byte* /* System.String */ System_Security_Principal_IIdentity_Name_Get(void* /* System.Security.Principal.IIdentity */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.Principal.IIdentity __selfConverted = InteropUtils.GetInstance<System.Security.Principal.IIdentity>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_Principal_IIdentity_AuthenticationType_Get")]
	internal static byte* /* System.String */ System_Security_Principal_IIdentity_AuthenticationType_Get(void* /* System.Security.Principal.IIdentity */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.Principal.IIdentity __selfConverted = InteropUtils.GetInstance<System.Security.Principal.IIdentity>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.AuthenticationType;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_Principal_IIdentity_IsAuthenticated_Get")]
	internal static byte /* System.Boolean */ System_Security_Principal_IIdentity_IsAuthenticated_Get(void* /* System.Security.Principal.IIdentity */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.Principal.IIdentity __selfConverted = InteropUtils.GetInstance<System.Security.Principal.IIdentity>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsAuthenticated;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_Principal_IIdentity_TypeOf")]
	internal static void* /* System.Type */ System_Security_Principal_IIdentity_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Security.Principal.IIdentity);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_Principal_IIdentity_Destroy")]
	internal static void /* System.Void */ System_Security_Principal_IIdentity_Destroy(void* /* System.Security.Principal.IIdentity */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_ExecutionContext
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_GetObjectData")]
	internal static void /* System.Void */ System_Threading_ExecutionContext_GetObjectData(void* /* System.Threading.ExecutionContext */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.ExecutionContext __selfConverted = InteropUtils.GetInstance<System.Threading.ExecutionContext>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_Capture")]
	internal static void* /* System.Threading.ExecutionContext */ System_Threading_ExecutionContext_Capture(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.ExecutionContext __returnValue = System.Threading.ExecutionContext.Capture();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_SuppressFlow")]
	internal static void* /* System.Threading.AsyncFlowControl */ System_Threading_ExecutionContext_SuppressFlow(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.AsyncFlowControl __returnValue = System.Threading.ExecutionContext.SuppressFlow();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_RestoreFlow")]
	internal static void /* System.Void */ System_Threading_ExecutionContext_RestoreFlow(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.ExecutionContext.RestoreFlow();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_IsFlowSuppressed")]
	internal static byte /* System.Boolean */ System_Threading_ExecutionContext_IsFlowSuppressed(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Threading.ExecutionContext.IsFlowSuppressed();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_Run")]
	internal static void /* System.Void */ System_Threading_ExecutionContext_Run(void* /* System.Threading.ExecutionContext */ executionContext, void* /* System.Threading.ContextCallback */ callback, void* /* System.Object */ state, void** /* System.Exception */ __outException)
	{
		System.Threading.ExecutionContext executionContextConverted = InteropUtils.GetInstance<System.Threading.ExecutionContext>(executionContext);
		System.Threading.ContextCallback callbackConverted = InteropUtils.GetInstance<System_Threading_ContextCallback>(callback)?.Trampoline;
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
	
	    try {
			System.Threading.ExecutionContext.Run(executionContextConverted, callbackConverted, stateConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_Restore_1")]
	internal static void /* System.Void */ System_Threading_ExecutionContext_Restore_1(void* /* System.Threading.ExecutionContext */ executionContext, void** /* System.Exception */ __outException)
	{
		System.Threading.ExecutionContext executionContextConverted = InteropUtils.GetInstance<System.Threading.ExecutionContext>(executionContext);
	
	    try {
			System.Threading.ExecutionContext.Restore(executionContextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_CreateCopy")]
	internal static void* /* System.Threading.ExecutionContext */ System_Threading_ExecutionContext_CreateCopy(void* /* System.Threading.ExecutionContext */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.ExecutionContext __selfConverted = InteropUtils.GetInstance<System.Threading.ExecutionContext>(__self);
	
	
	    try {
			System.Threading.ExecutionContext __returnValue = __selfConverted.CreateCopy();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_Dispose")]
	internal static void /* System.Void */ System_Threading_ExecutionContext_Dispose(void* /* System.Threading.ExecutionContext */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.ExecutionContext __selfConverted = InteropUtils.GetInstance<System.Threading.ExecutionContext>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_TypeOf")]
	internal static void* /* System.Type */ System_Threading_ExecutionContext_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.ExecutionContext);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ExecutionContext_Destroy")]
	internal static void /* System.Void */ System_Threading_ExecutionContext_Destroy(void* /* System.Threading.ExecutionContext */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_AsyncFlowControl
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_AsyncFlowControl_Undo")]
	internal static void /* System.Void */ System_Threading_AsyncFlowControl_Undo(void* /* System.Threading.AsyncFlowControl */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.AsyncFlowControl __selfConverted = InteropUtils.GetInstance<System.Threading.AsyncFlowControl>(__self);
	
	
	    try {
			__selfConverted.Undo();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_AsyncFlowControl_Dispose")]
	internal static void /* System.Void */ System_Threading_AsyncFlowControl_Dispose(void* /* System.Threading.AsyncFlowControl */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.AsyncFlowControl __selfConverted = InteropUtils.GetInstance<System.Threading.AsyncFlowControl>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_AsyncFlowControl_Equals")]
	internal static byte /* System.Boolean */ System_Threading_AsyncFlowControl_Equals(void* /* System.Threading.AsyncFlowControl */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.AsyncFlowControl __selfConverted = InteropUtils.GetInstance<System.Threading.AsyncFlowControl>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_AsyncFlowControl_Equals_1")]
	internal static byte /* System.Boolean */ System_Threading_AsyncFlowControl_Equals_1(void* /* System.Threading.AsyncFlowControl */ __self, void* /* System.Threading.AsyncFlowControl */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.AsyncFlowControl __selfConverted = InteropUtils.GetInstance<System.Threading.AsyncFlowControl>(__self);
	
		System.Threading.AsyncFlowControl objConverted = InteropUtils.GetInstance<System.Threading.AsyncFlowControl>(obj);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(objConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_AsyncFlowControl_GetHashCode")]
	internal static int /* System.Int32 */ System_Threading_AsyncFlowControl_GetHashCode(void* /* System.Threading.AsyncFlowControl */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.AsyncFlowControl __selfConverted = InteropUtils.GetInstance<System.Threading.AsyncFlowControl>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_AsyncFlowControl_TypeOf")]
	internal static void* /* System.Type */ System_Threading_AsyncFlowControl_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.AsyncFlowControl);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_AsyncFlowControl_Destroy")]
	internal static void /* System.Void */ System_Threading_AsyncFlowControl_Destroy(void* /* System.Threading.AsyncFlowControl */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_ContextCallback
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.Object */ /* state */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.Threading.ContextCallback> m_trampoline;
	internal System.Threading.ContextCallback Trampoline
	{
		get {
			System.Threading.ContextCallback? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_Threading_ContextCallback(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* state */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_Threading_ContextCallback(System.Threading.ContextCallback originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_Threading_ContextCallback()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.Threading.ContextCallback? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Threading_ContextCallback);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Threading.ContextCallback trampoline = (System.Threading.ContextCallback)System.Delegate.CreateDelegate(typeof(System.Threading.ContextCallback), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction(System.Object /* System.Object */ state)
	{
		void* stateConverted = state.AllocateGCHandleAndGetAddress();
	


		CFunction(Context, stateConverted);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ContextCallback_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* state */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Threading_ContextCallback(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ContextCallback_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void* /* System.Object */ state, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_Threading_ContextCallback>(self);

			System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
		


			selfConverted.Trampoline(stateConverted);
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ContextCallback_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_ContextCallback>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ContextCallback_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.Object */ /* state */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_ContextCallback>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ContextCallback_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_ContextCallback>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ContextCallback_Destroy")]
	internal static void /* System.Void */ System_Threading_ContextCallback_Destroy(void* /* System.Threading.ContextCallback */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_LocalDataStoreSlot
{
	[UnmanagedCallersOnly(EntryPoint = "System_LocalDataStoreSlot_TypeOf")]
	internal static void* /* System.Type */ System_LocalDataStoreSlot_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.LocalDataStoreSlot);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_LocalDataStoreSlot_Destroy")]
	internal static void /* System.Void */ System_LocalDataStoreSlot_Destroy(void* /* System.LocalDataStoreSlot */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_CompressedStack
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CompressedStack_GetObjectData")]
	internal static void /* System.Void */ System_Threading_CompressedStack_GetObjectData(void* /* System.Threading.CompressedStack */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CompressedStack __selfConverted = InteropUtils.GetInstance<System.Threading.CompressedStack>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CompressedStack_Capture")]
	internal static void* /* System.Threading.CompressedStack */ System_Threading_CompressedStack_Capture(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.CompressedStack __returnValue = System.Threading.CompressedStack.Capture();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CompressedStack_CreateCopy")]
	internal static void* /* System.Threading.CompressedStack */ System_Threading_CompressedStack_CreateCopy(void* /* System.Threading.CompressedStack */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CompressedStack __selfConverted = InteropUtils.GetInstance<System.Threading.CompressedStack>(__self);
	
	
	    try {
			System.Threading.CompressedStack __returnValue = __selfConverted.CreateCopy();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CompressedStack_GetCompressedStack")]
	internal static void* /* System.Threading.CompressedStack */ System_Threading_CompressedStack_GetCompressedStack(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.CompressedStack __returnValue = System.Threading.CompressedStack.GetCompressedStack();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CompressedStack_Run")]
	internal static void /* System.Void */ System_Threading_CompressedStack_Run(void* /* System.Threading.CompressedStack */ compressedStack, void* /* System.Threading.ContextCallback */ callback, void* /* System.Object */ state, void** /* System.Exception */ __outException)
	{
		System.Threading.CompressedStack compressedStackConverted = InteropUtils.GetInstance<System.Threading.CompressedStack>(compressedStack);
		System.Threading.ContextCallback callbackConverted = InteropUtils.GetInstance<System_Threading_ContextCallback>(callback)?.Trampoline;
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
	
	    try {
			System.Threading.CompressedStack.Run(compressedStackConverted, callbackConverted, stateConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CompressedStack_TypeOf")]
	internal static void* /* System.Type */ System_Threading_CompressedStack_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.CompressedStack);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CompressedStack_Destroy")]
	internal static void /* System.Void */ System_Threading_CompressedStack_Destroy(void* /* System.Threading.CompressedStack */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_AppDomain
{
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_SetDynamicBase")]
	internal static void /* System.Void */ System_AppDomain_SetDynamicBase(void* /* System.AppDomain */ __self, byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			__selfConverted.SetDynamicBase(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ApplyPolicy")]
	internal static byte* /* System.String */ System_AppDomain_ApplyPolicy(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
	
	    try {
			System.String __returnValue = __selfConverted.ApplyPolicy(assemblyNameConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateDomain")]
	internal static void* /* System.AppDomain */ System_AppDomain_CreateDomain(byte* /* System.String */ friendlyName, void** /* System.Exception */ __outException)
	{
		System.String friendlyNameConverted = InteropUtils.ToDotNetString(friendlyName);
	
	    try {
			System.AppDomain __returnValue = System.AppDomain.CreateDomain(friendlyNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ExecuteAssembly")]
	internal static int /* System.Int32 */ System_AppDomain_ExecuteAssembly(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyFile, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
	
	    try {
			System.Int32 __returnValue = __selfConverted.ExecuteAssembly(assemblyFileConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ExecuteAssembly_1")]
	internal static int /* System.Int32 */ System_AppDomain_ExecuteAssembly_1(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyFile, void* /* System.String[] */ args, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
		System.String[] argsConverted = InteropUtils.GetInstance<System.String[]>(args);
	
	    try {
			System.Int32 __returnValue = __selfConverted.ExecuteAssembly(assemblyFileConverted, argsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ExecuteAssembly_2")]
	internal static int /* System.Int32 */ System_AppDomain_ExecuteAssembly_2(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyFile, void* /* System.String[] */ args, void* /* System.Byte[] */ hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm /* System.Configuration.Assemblies.AssemblyHashAlgorithm */ hashAlgorithm, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
		System.String[] argsConverted = InteropUtils.GetInstance<System.String[]>(args);
		System.Byte[] hashValueConverted = InteropUtils.GetInstance<System.Byte[]>(hashValue);
	
	    try {
			System.Int32 __returnValue = __selfConverted.ExecuteAssembly(assemblyFileConverted, argsConverted, hashValueConverted, hashAlgorithm);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ExecuteAssemblyByName")]
	internal static int /* System.Int32 */ System_AppDomain_ExecuteAssemblyByName(void* /* System.AppDomain */ __self, void* /* System.Reflection.AssemblyName */ assemblyName, void* /* System.String[] */ args, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.Reflection.AssemblyName assemblyNameConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(assemblyName);
		System.String[] argsConverted = InteropUtils.GetInstance<System.String[]>(args);
	
	    try {
			System.Int32 __returnValue = __selfConverted.ExecuteAssemblyByName(assemblyNameConverted, argsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ExecuteAssemblyByName_1")]
	internal static int /* System.Int32 */ System_AppDomain_ExecuteAssemblyByName_1(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
	
	    try {
			System.Int32 __returnValue = __selfConverted.ExecuteAssemblyByName(assemblyNameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ExecuteAssemblyByName_2")]
	internal static int /* System.Int32 */ System_AppDomain_ExecuteAssemblyByName_2(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyName, void* /* System.String[] */ args, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
		System.String[] argsConverted = InteropUtils.GetInstance<System.String[]>(args);
	
	    try {
			System.Int32 __returnValue = __selfConverted.ExecuteAssemblyByName(assemblyNameConverted, argsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_GetData")]
	internal static void* /* System.Object */ System_AppDomain_GetData(void* /* System.AppDomain */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Object __returnValue = __selfConverted.GetData(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_SetData")]
	internal static void /* System.Void */ System_AppDomain_SetData(void* /* System.AppDomain */ __self, byte* /* System.String */ name, void* /* System.Object */ data, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.Object dataConverted = InteropUtils.GetInstance<System.Object>(data);
	
	    try {
			__selfConverted.SetData(nameConverted, dataConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_IsDefaultAppDomain")]
	internal static byte /* System.Boolean */ System_AppDomain_IsDefaultAppDomain(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsDefaultAppDomain();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_IsFinalizingForUnload")]
	internal static byte /* System.Boolean */ System_AppDomain_IsFinalizingForUnload(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFinalizingForUnload();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ToString")]
	internal static byte* /* System.String */ System_AppDomain_ToString(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_Unload")]
	internal static void /* System.Void */ System_AppDomain_Unload(void* /* System.AppDomain */ domain, void** /* System.Exception */ __outException)
	{
		System.AppDomain domainConverted = InteropUtils.GetInstance<System.AppDomain>(domain);
	
	    try {
			System.AppDomain.Unload(domainConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_Load")]
	internal static void* /* System.Reflection.Assembly */ System_AppDomain_Load(void* /* System.AppDomain */ __self, void* /* System.Byte[] */ rawAssembly, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.Byte[] rawAssemblyConverted = InteropUtils.GetInstance<System.Byte[]>(rawAssembly);
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.Load(rawAssemblyConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_Load_1")]
	internal static void* /* System.Reflection.Assembly */ System_AppDomain_Load_1(void* /* System.AppDomain */ __self, void* /* System.Byte[] */ rawAssembly, void* /* System.Byte[] */ rawSymbolStore, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.Byte[] rawAssemblyConverted = InteropUtils.GetInstance<System.Byte[]>(rawAssembly);
		System.Byte[] rawSymbolStoreConverted = InteropUtils.GetInstance<System.Byte[]>(rawSymbolStore);
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.Load(rawAssemblyConverted, rawSymbolStoreConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_Load_2")]
	internal static void* /* System.Reflection.Assembly */ System_AppDomain_Load_2(void* /* System.AppDomain */ __self, void* /* System.Reflection.AssemblyName */ assemblyRef, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.Reflection.AssemblyName assemblyRefConverted = InteropUtils.GetInstance<System.Reflection.AssemblyName>(assemblyRef);
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.Load(assemblyRefConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_Load_3")]
	internal static void* /* System.Reflection.Assembly */ System_AppDomain_Load_3(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyString, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyStringConverted = InteropUtils.ToDotNetString(assemblyString);
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.Load(assemblyStringConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ReflectionOnlyGetAssemblies")]
	internal static void* /* System.Reflection.Assembly[] */ System_AppDomain_ReflectionOnlyGetAssemblies(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Reflection.Assembly[] __returnValue = __selfConverted.ReflectionOnlyGetAssemblies();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_GetCurrentThreadId")]
	internal static int /* System.Int32 */ System_AppDomain_GetCurrentThreadId(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.AppDomain.GetCurrentThreadId();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_AppendPrivatePath")]
	internal static void /* System.Void */ System_AppDomain_AppendPrivatePath(void* /* System.AppDomain */ __self, byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			__selfConverted.AppendPrivatePath(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ClearPrivatePath")]
	internal static void /* System.Void */ System_AppDomain_ClearPrivatePath(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			__selfConverted.ClearPrivatePath();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ClearShadowCopyPath")]
	internal static void /* System.Void */ System_AppDomain_ClearShadowCopyPath(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			__selfConverted.ClearShadowCopyPath();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_SetCachePath")]
	internal static void /* System.Void */ System_AppDomain_SetCachePath(void* /* System.AppDomain */ __self, byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			__selfConverted.SetCachePath(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_SetShadowCopyFiles")]
	internal static void /* System.Void */ System_AppDomain_SetShadowCopyFiles(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			__selfConverted.SetShadowCopyFiles();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_SetShadowCopyPath")]
	internal static void /* System.Void */ System_AppDomain_SetShadowCopyPath(void* /* System.AppDomain */ __self, byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			__selfConverted.SetShadowCopyPath(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_GetAssemblies")]
	internal static void* /* System.Reflection.Assembly[] */ System_AppDomain_GetAssemblies(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Reflection.Assembly[] __returnValue = __selfConverted.GetAssemblies();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_SetPrincipalPolicy")]
	internal static void /* System.Void */ System_AppDomain_SetPrincipalPolicy(void* /* System.AppDomain */ __self, System.Security.Principal.PrincipalPolicy /* System.Security.Principal.PrincipalPolicy */ policy, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			__selfConverted.SetPrincipalPolicy(policy);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_SetThreadPrincipal")]
	internal static void /* System.Void */ System_AppDomain_SetThreadPrincipal(void* /* System.AppDomain */ __self, void* /* System.Security.Principal.IPrincipal */ principal, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.Security.Principal.IPrincipal principalConverted = InteropUtils.GetInstance<System.Security.Principal.IPrincipal>(principal);
	
	    try {
			__selfConverted.SetThreadPrincipal(principalConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstance")]
	internal static void* /* System.Runtime.Remoting.ObjectHandle */ System_AppDomain_CreateInstance(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyName, byte* /* System.String */ typeName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
	
	    try {
			System.Runtime.Remoting.ObjectHandle __returnValue = __selfConverted.CreateInstance(assemblyNameConverted, typeNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstance_1")]
	internal static void* /* System.Runtime.Remoting.ObjectHandle */ System_AppDomain_CreateInstance_1(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyName, byte* /* System.String */ typeName, byte /* System.Boolean */ ignoreCase, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object[] */ args, void* /* System.Globalization.CultureInfo */ culture, void* /* System.Object[] */ activationAttributes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
		System.Object[] activationAttributesConverted = InteropUtils.GetInstance<System.Object[]>(activationAttributes);
	
	    try {
			System.Runtime.Remoting.ObjectHandle __returnValue = __selfConverted.CreateInstance(assemblyNameConverted, typeNameConverted, ignoreCaseConverted, bindingAttr, binderConverted, argsConverted, cultureConverted, activationAttributesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstance_2")]
	internal static void* /* System.Runtime.Remoting.ObjectHandle */ System_AppDomain_CreateInstance_2(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyName, byte* /* System.String */ typeName, void* /* System.Object[] */ activationAttributes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Object[] activationAttributesConverted = InteropUtils.GetInstance<System.Object[]>(activationAttributes);
	
	    try {
			System.Runtime.Remoting.ObjectHandle __returnValue = __selfConverted.CreateInstance(assemblyNameConverted, typeNameConverted, activationAttributesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstanceAndUnwrap")]
	internal static void* /* System.Object */ System_AppDomain_CreateInstanceAndUnwrap(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyName, byte* /* System.String */ typeName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstanceAndUnwrap(assemblyNameConverted, typeNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstanceAndUnwrap_1")]
	internal static void* /* System.Object */ System_AppDomain_CreateInstanceAndUnwrap_1(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyName, byte* /* System.String */ typeName, byte /* System.Boolean */ ignoreCase, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object[] */ args, void* /* System.Globalization.CultureInfo */ culture, void* /* System.Object[] */ activationAttributes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
		System.Object[] activationAttributesConverted = InteropUtils.GetInstance<System.Object[]>(activationAttributes);
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstanceAndUnwrap(assemblyNameConverted, typeNameConverted, ignoreCaseConverted, bindingAttr, binderConverted, argsConverted, cultureConverted, activationAttributesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstanceAndUnwrap_2")]
	internal static void* /* System.Object */ System_AppDomain_CreateInstanceAndUnwrap_2(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyName, byte* /* System.String */ typeName, void* /* System.Object[] */ activationAttributes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyNameConverted = InteropUtils.ToDotNetString(assemblyName);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Object[] activationAttributesConverted = InteropUtils.GetInstance<System.Object[]>(activationAttributes);
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstanceAndUnwrap(assemblyNameConverted, typeNameConverted, activationAttributesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstanceFrom")]
	internal static void* /* System.Runtime.Remoting.ObjectHandle */ System_AppDomain_CreateInstanceFrom(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyFile, byte* /* System.String */ typeName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
	
	    try {
			System.Runtime.Remoting.ObjectHandle __returnValue = __selfConverted.CreateInstanceFrom(assemblyFileConverted, typeNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstanceFrom_1")]
	internal static void* /* System.Runtime.Remoting.ObjectHandle */ System_AppDomain_CreateInstanceFrom_1(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyFile, byte* /* System.String */ typeName, byte /* System.Boolean */ ignoreCase, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object[] */ args, void* /* System.Globalization.CultureInfo */ culture, void* /* System.Object[] */ activationAttributes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
		System.Object[] activationAttributesConverted = InteropUtils.GetInstance<System.Object[]>(activationAttributes);
	
	    try {
			System.Runtime.Remoting.ObjectHandle __returnValue = __selfConverted.CreateInstanceFrom(assemblyFileConverted, typeNameConverted, ignoreCaseConverted, bindingAttr, binderConverted, argsConverted, cultureConverted, activationAttributesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstanceFrom_2")]
	internal static void* /* System.Runtime.Remoting.ObjectHandle */ System_AppDomain_CreateInstanceFrom_2(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyFile, byte* /* System.String */ typeName, void* /* System.Object[] */ activationAttributes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Object[] activationAttributesConverted = InteropUtils.GetInstance<System.Object[]>(activationAttributes);
	
	    try {
			System.Runtime.Remoting.ObjectHandle __returnValue = __selfConverted.CreateInstanceFrom(assemblyFileConverted, typeNameConverted, activationAttributesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstanceFromAndUnwrap")]
	internal static void* /* System.Object */ System_AppDomain_CreateInstanceFromAndUnwrap(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyFile, byte* /* System.String */ typeName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstanceFromAndUnwrap(assemblyFileConverted, typeNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstanceFromAndUnwrap_1")]
	internal static void* /* System.Object */ System_AppDomain_CreateInstanceFromAndUnwrap_1(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyFile, byte* /* System.String */ typeName, byte /* System.Boolean */ ignoreCase, System.Reflection.BindingFlags /* System.Reflection.BindingFlags */ bindingAttr, void* /* System.Reflection.Binder */ binder, void* /* System.Object[] */ args, void* /* System.Globalization.CultureInfo */ culture, void* /* System.Object[] */ activationAttributes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Boolean ignoreCaseConverted = ignoreCase.ToBool();
		System.Reflection.Binder binderConverted = InteropUtils.GetInstance<System.Reflection.Binder>(binder);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
		System.Globalization.CultureInfo cultureConverted = InteropUtils.GetInstance<System.Globalization.CultureInfo>(culture);
		System.Object[] activationAttributesConverted = InteropUtils.GetInstance<System.Object[]>(activationAttributes);
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstanceFromAndUnwrap(assemblyFileConverted, typeNameConverted, ignoreCaseConverted, bindingAttr, binderConverted, argsConverted, cultureConverted, activationAttributesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CreateInstanceFromAndUnwrap_2")]
	internal static void* /* System.Object */ System_AppDomain_CreateInstanceFromAndUnwrap_2(void* /* System.AppDomain */ __self, byte* /* System.String */ assemblyFile, byte* /* System.String */ typeName, void* /* System.Object[] */ activationAttributes, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
		System.String assemblyFileConverted = InteropUtils.ToDotNetString(assemblyFile);
		System.String typeNameConverted = InteropUtils.ToDotNetString(typeName);
		System.Object[] activationAttributesConverted = InteropUtils.GetInstance<System.Object[]>(activationAttributes);
	
	    try {
			System.Object __returnValue = __selfConverted.CreateInstanceFromAndUnwrap(assemblyFileConverted, typeNameConverted, activationAttributesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_CurrentDomain_Get")]
	internal static void* /* System.AppDomain */ System_AppDomain_CurrentDomain_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.AppDomain __returnValue = System.AppDomain.CurrentDomain;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_BaseDirectory_Get")]
	internal static byte* /* System.String */ System_AppDomain_BaseDirectory_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.BaseDirectory;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_RelativeSearchPath_Get")]
	internal static byte* /* System.String */ System_AppDomain_RelativeSearchPath_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.RelativeSearchPath;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_SetupInformation_Get")]
	internal static void* /* System.AppDomainSetup */ System_AppDomain_SetupInformation_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.AppDomainSetup __returnValue = __selfConverted.SetupInformation;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_PermissionSet_Get")]
	internal static void* /* System.Security.PermissionSet */ System_AppDomain_PermissionSet_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Security.PermissionSet __returnValue = __selfConverted.PermissionSet;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_DynamicDirectory_Get")]
	internal static byte* /* System.String */ System_AppDomain_DynamicDirectory_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.DynamicDirectory;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_FriendlyName_Get")]
	internal static byte* /* System.String */ System_AppDomain_FriendlyName_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FriendlyName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_Id_Get")]
	internal static int /* System.Int32 */ System_AppDomain_Id_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Id;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_IsFullyTrusted_Get")]
	internal static byte /* System.Boolean */ System_AppDomain_IsFullyTrusted_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFullyTrusted;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_IsHomogenous_Get")]
	internal static byte /* System.Boolean */ System_AppDomain_IsHomogenous_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsHomogenous;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_MonitoringIsEnabled_Get")]
	internal static byte /* System.Boolean */ System_AppDomain_MonitoringIsEnabled_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.AppDomain.MonitoringIsEnabled;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_MonitoringIsEnabled_Set")]
	internal static void /* System.Void */ System_AppDomain_MonitoringIsEnabled_Set(byte /* System.Boolean */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.AppDomain.MonitoringIsEnabled = __value.ToBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_MonitoringSurvivedMemorySize_Get")]
	internal static long /* System.Int64 */ System_AppDomain_MonitoringSurvivedMemorySize_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.MonitoringSurvivedMemorySize;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_MonitoringSurvivedProcessMemorySize_Get")]
	internal static long /* System.Int64 */ System_AppDomain_MonitoringSurvivedProcessMemorySize_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.AppDomain.MonitoringSurvivedProcessMemorySize;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_MonitoringTotalAllocatedMemorySize_Get")]
	internal static long /* System.Int64 */ System_AppDomain_MonitoringTotalAllocatedMemorySize_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.MonitoringTotalAllocatedMemorySize;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ShadowCopyFiles_Get")]
	internal static byte /* System.Boolean */ System_AppDomain_ShadowCopyFiles_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.ShadowCopyFiles;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_MonitoringTotalProcessorTime_Get")]
	internal static void* /* System.TimeSpan */ System_AppDomain_MonitoringTotalProcessorTime_Get(void* /* System.AppDomain */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
	    try {
			System.TimeSpan __returnValue = __selfConverted.MonitoringTotalProcessorTime;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_UnhandledException_Add")]
	internal static void /* System.Void */ System_AppDomain_UnhandledException_Add(void* /* System.AppDomain */ __self, void* /* System.UnhandledExceptionEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.UnhandledException += InteropUtils.GetInstance<System_UnhandledExceptionEventHandler>(__value)?.Trampoline;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_UnhandledException_Remove")]
	internal static void /* System.Void */ System_AppDomain_UnhandledException_Remove(void* /* System.AppDomain */ __self, void* /* System.UnhandledExceptionEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.UnhandledException -= InteropUtils.GetInstance<System_UnhandledExceptionEventHandler>(__value)?.Trampoline;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_DomainUnload_Add")]
	internal static void /* System.Void */ System_AppDomain_DomainUnload_Add(void* /* System.AppDomain */ __self, void* /* System.EventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.DomainUnload += InteropUtils.GetInstance<System_EventHandler>(__value)?.Trampoline;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_DomainUnload_Remove")]
	internal static void /* System.Void */ System_AppDomain_DomainUnload_Remove(void* /* System.AppDomain */ __self, void* /* System.EventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.DomainUnload -= InteropUtils.GetInstance<System_EventHandler>(__value)?.Trampoline;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ProcessExit_Add")]
	internal static void /* System.Void */ System_AppDomain_ProcessExit_Add(void* /* System.AppDomain */ __self, void* /* System.EventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.ProcessExit += InteropUtils.GetInstance<System_EventHandler>(__value)?.Trampoline;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ProcessExit_Remove")]
	internal static void /* System.Void */ System_AppDomain_ProcessExit_Remove(void* /* System.AppDomain */ __self, void* /* System.EventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.ProcessExit -= InteropUtils.GetInstance<System_EventHandler>(__value)?.Trampoline;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_AssemblyLoad_Add")]
	internal static void /* System.Void */ System_AppDomain_AssemblyLoad_Add(void* /* System.AppDomain */ __self, void* /* System.AssemblyLoadEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.AssemblyLoad += InteropUtils.GetInstance<System_AssemblyLoadEventHandler>(__value)?.Trampoline;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_AssemblyLoad_Remove")]
	internal static void /* System.Void */ System_AppDomain_AssemblyLoad_Remove(void* /* System.AppDomain */ __self, void* /* System.AssemblyLoadEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.AssemblyLoad -= InteropUtils.GetInstance<System_AssemblyLoadEventHandler>(__value)?.Trampoline;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_AssemblyResolve_Add")]
	internal static void /* System.Void */ System_AppDomain_AssemblyResolve_Add(void* /* System.AppDomain */ __self, void* /* System.ResolveEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.AssemblyResolve += InteropUtils.GetInstance<System_ResolveEventHandler>(__value)?.Trampoline;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_AssemblyResolve_Remove")]
	internal static void /* System.Void */ System_AppDomain_AssemblyResolve_Remove(void* /* System.AppDomain */ __self, void* /* System.ResolveEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.AssemblyResolve -= InteropUtils.GetInstance<System_ResolveEventHandler>(__value)?.Trampoline;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ReflectionOnlyAssemblyResolve_Add")]
	internal static void /* System.Void */ System_AppDomain_ReflectionOnlyAssemblyResolve_Add(void* /* System.AppDomain */ __self, void* /* System.ResolveEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.ReflectionOnlyAssemblyResolve += InteropUtils.GetInstance<System_ResolveEventHandler>(__value)?.Trampoline;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ReflectionOnlyAssemblyResolve_Remove")]
	internal static void /* System.Void */ System_AppDomain_ReflectionOnlyAssemblyResolve_Remove(void* /* System.AppDomain */ __self, void* /* System.ResolveEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.ReflectionOnlyAssemblyResolve -= InteropUtils.GetInstance<System_ResolveEventHandler>(__value)?.Trampoline;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_TypeResolve_Add")]
	internal static void /* System.Void */ System_AppDomain_TypeResolve_Add(void* /* System.AppDomain */ __self, void* /* System.ResolveEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.TypeResolve += InteropUtils.GetInstance<System_ResolveEventHandler>(__value)?.Trampoline;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_TypeResolve_Remove")]
	internal static void /* System.Void */ System_AppDomain_TypeResolve_Remove(void* /* System.AppDomain */ __self, void* /* System.ResolveEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.TypeResolve -= InteropUtils.GetInstance<System_ResolveEventHandler>(__value)?.Trampoline;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ResourceResolve_Add")]
	internal static void /* System.Void */ System_AppDomain_ResourceResolve_Add(void* /* System.AppDomain */ __self, void* /* System.ResolveEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.ResourceResolve += InteropUtils.GetInstance<System_ResolveEventHandler>(__value)?.Trampoline;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_ResourceResolve_Remove")]
	internal static void /* System.Void */ System_AppDomain_ResourceResolve_Remove(void* /* System.AppDomain */ __self, void* /* System.ResolveEventHandler */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomain __selfConverted = InteropUtils.GetInstance<System.AppDomain>(__self);
	
	
		__selfConverted.ResourceResolve -= InteropUtils.GetInstance<System_ResolveEventHandler>(__value)?.Trampoline;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_TypeOf")]
	internal static void* /* System.Type */ System_AppDomain_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.AppDomain);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomain_Destroy")]
	internal static void /* System.Void */ System_AppDomain_Destroy(void* /* System.AppDomain */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_AppDomainSetup
{
	[UnmanagedCallersOnly(EntryPoint = "System_AppDomainSetup_ApplicationBase_Get")]
	internal static byte* /* System.String */ System_AppDomainSetup_ApplicationBase_Get(void* /* System.AppDomainSetup */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomainSetup __selfConverted = InteropUtils.GetInstance<System.AppDomainSetup>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ApplicationBase;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomainSetup_TargetFrameworkName_Get")]
	internal static byte* /* System.String */ System_AppDomainSetup_TargetFrameworkName_Get(void* /* System.AppDomainSetup */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AppDomainSetup __selfConverted = InteropUtils.GetInstance<System.AppDomainSetup>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.TargetFrameworkName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomainSetup_TypeOf")]
	internal static void* /* System.Type */ System_AppDomainSetup_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.AppDomainSetup);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AppDomainSetup_Destroy")]
	internal static void /* System.Void */ System_AppDomainSetup_Destroy(void* /* System.AppDomainSetup */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Security_PermissionSet
{
	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_AddPermission")]
	internal static void* /* System.Security.IPermission */ System_Security_PermissionSet_AddPermission(void* /* System.Security.PermissionSet */ __self, void* /* System.Security.IPermission */ perm, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
		System.Security.IPermission permConverted = InteropUtils.GetInstance<System.Security.IPermission>(perm);
	
	    try {
			System.Security.IPermission __returnValue = __selfConverted.AddPermission(permConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Assert")]
	internal static void /* System.Void */ System_Security_PermissionSet_Assert(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			__selfConverted.Assert();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_ContainsNonCodeAccessPermissions")]
	internal static byte /* System.Boolean */ System_Security_PermissionSet_ContainsNonCodeAccessPermissions(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.ContainsNonCodeAccessPermissions();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_ConvertPermissionSet")]
	internal static void* /* System.Byte[] */ System_Security_PermissionSet_ConvertPermissionSet(byte* /* System.String */ inFormat, void* /* System.Byte[] */ inData, byte* /* System.String */ outFormat, void** /* System.Exception */ __outException)
	{
		System.String inFormatConverted = InteropUtils.ToDotNetString(inFormat);
		System.Byte[] inDataConverted = InteropUtils.GetInstance<System.Byte[]>(inData);
		System.String outFormatConverted = InteropUtils.ToDotNetString(outFormat);
	
	    try {
			System.Byte[] __returnValue = System.Security.PermissionSet.ConvertPermissionSet(inFormatConverted, inDataConverted, outFormatConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Copy")]
	internal static void* /* System.Security.PermissionSet */ System_Security_PermissionSet_Copy(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Security.PermissionSet __returnValue = __selfConverted.Copy();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_CopyTo")]
	internal static void /* System.Void */ System_Security_PermissionSet_CopyTo(void* /* System.Security.PermissionSet */ __self, void* /* System.Array */ array, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(arrayConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Demand")]
	internal static void /* System.Void */ System_Security_PermissionSet_Demand(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			__selfConverted.Demand();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Deny")]
	internal static void /* System.Void */ System_Security_PermissionSet_Deny(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			__selfConverted.Deny();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Equals")]
	internal static byte /* System.Boolean */ System_Security_PermissionSet_Equals(void* /* System.Security.PermissionSet */ __self, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(oConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_FromXml")]
	internal static void /* System.Void */ System_Security_PermissionSet_FromXml(void* /* System.Security.PermissionSet */ __self, void* /* System.Security.SecurityElement */ et, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
		System.Security.SecurityElement etConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(et);
	
	    try {
			__selfConverted.FromXml(etConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_GetEnumerator")]
	internal static void* /* System.Collections.IEnumerator */ System_Security_PermissionSet_GetEnumerator(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Collections.IEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_GetHashCode")]
	internal static int /* System.Int32 */ System_Security_PermissionSet_GetHashCode(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_GetPermission")]
	internal static void* /* System.Security.IPermission */ System_Security_PermissionSet_GetPermission(void* /* System.Security.PermissionSet */ __self, void* /* System.Type */ permClass, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
		System.Type permClassConverted = InteropUtils.GetInstance<System.Type>(permClass);
	
	    try {
			System.Security.IPermission __returnValue = __selfConverted.GetPermission(permClassConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Intersect")]
	internal static void* /* System.Security.PermissionSet */ System_Security_PermissionSet_Intersect(void* /* System.Security.PermissionSet */ __self, void* /* System.Security.PermissionSet */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
		System.Security.PermissionSet otherConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(other);
	
	    try {
			System.Security.PermissionSet __returnValue = __selfConverted.Intersect(otherConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_IsEmpty")]
	internal static byte /* System.Boolean */ System_Security_PermissionSet_IsEmpty(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsEmpty();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_IsSubsetOf")]
	internal static byte /* System.Boolean */ System_Security_PermissionSet_IsSubsetOf(void* /* System.Security.PermissionSet */ __self, void* /* System.Security.PermissionSet */ target, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
		System.Security.PermissionSet targetConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(target);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSubsetOf(targetConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_IsUnrestricted")]
	internal static byte /* System.Boolean */ System_Security_PermissionSet_IsUnrestricted(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsUnrestricted();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_PermitOnly")]
	internal static void /* System.Void */ System_Security_PermissionSet_PermitOnly(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			__selfConverted.PermitOnly();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_RemovePermission")]
	internal static void* /* System.Security.IPermission */ System_Security_PermissionSet_RemovePermission(void* /* System.Security.PermissionSet */ __self, void* /* System.Type */ permClass, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
		System.Type permClassConverted = InteropUtils.GetInstance<System.Type>(permClass);
	
	    try {
			System.Security.IPermission __returnValue = __selfConverted.RemovePermission(permClassConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_RevertAssert")]
	internal static void /* System.Void */ System_Security_PermissionSet_RevertAssert(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Security.PermissionSet.RevertAssert();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_SetPermission")]
	internal static void* /* System.Security.IPermission */ System_Security_PermissionSet_SetPermission(void* /* System.Security.PermissionSet */ __self, void* /* System.Security.IPermission */ perm, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
		System.Security.IPermission permConverted = InteropUtils.GetInstance<System.Security.IPermission>(perm);
	
	    try {
			System.Security.IPermission __returnValue = __selfConverted.SetPermission(permConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_ToString")]
	internal static byte* /* System.String */ System_Security_PermissionSet_ToString(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_ToXml")]
	internal static void* /* System.Security.SecurityElement */ System_Security_PermissionSet_ToXml(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Security.SecurityElement __returnValue = __selfConverted.ToXml();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Union")]
	internal static void* /* System.Security.PermissionSet */ System_Security_PermissionSet_Union(void* /* System.Security.PermissionSet */ __self, void* /* System.Security.PermissionSet */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
		System.Security.PermissionSet otherConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(other);
	
	    try {
			System.Security.PermissionSet __returnValue = __selfConverted.Union(otherConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Create")]
	internal static void* /* System.Security.PermissionSet */ System_Security_PermissionSet_Create(System.Security.Permissions.PermissionState /* System.Security.Permissions.PermissionState */ state, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Security.PermissionSet __returnValue = new System.Security.PermissionSet(state);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Create_1")]
	internal static void* /* System.Security.PermissionSet */ System_Security_PermissionSet_Create_1(void* /* System.Security.PermissionSet */ permSet, void** /* System.Exception */ __outException)
	{
		System.Security.PermissionSet permSetConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(permSet);
	
	    try {
			System.Security.PermissionSet __returnValue = new System.Security.PermissionSet(permSetConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Count_Get")]
	internal static int /* System.Int32 */ System_Security_PermissionSet_Count_Get(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Count;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Security_PermissionSet_IsReadOnly_Get(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_IsSynchronized_Get")]
	internal static byte /* System.Boolean */ System_Security_PermissionSet_IsSynchronized_Get(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSynchronized;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_SyncRoot_Get")]
	internal static void* /* System.Object */ System_Security_PermissionSet_SyncRoot_Get(void* /* System.Security.PermissionSet */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.PermissionSet __selfConverted = InteropUtils.GetInstance<System.Security.PermissionSet>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.SyncRoot;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_TypeOf")]
	internal static void* /* System.Type */ System_Security_PermissionSet_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Security.PermissionSet);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_PermissionSet_Destroy")]
	internal static void /* System.Void */ System_Security_PermissionSet_Destroy(void* /* System.Security.PermissionSet */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Security_IPermission
{
	[UnmanagedCallersOnly(EntryPoint = "System_Security_IPermission_Copy")]
	internal static void* /* System.Security.IPermission */ System_Security_IPermission_Copy(void* /* System.Security.IPermission */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.IPermission __selfConverted = InteropUtils.GetInstance<System.Security.IPermission>(__self);
	
	
	    try {
			System.Security.IPermission __returnValue = __selfConverted.Copy();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_IPermission_Demand")]
	internal static void /* System.Void */ System_Security_IPermission_Demand(void* /* System.Security.IPermission */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.IPermission __selfConverted = InteropUtils.GetInstance<System.Security.IPermission>(__self);
	
	
	    try {
			__selfConverted.Demand();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_IPermission_Intersect")]
	internal static void* /* System.Security.IPermission */ System_Security_IPermission_Intersect(void* /* System.Security.IPermission */ __self, void* /* System.Security.IPermission */ target, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.IPermission __selfConverted = InteropUtils.GetInstance<System.Security.IPermission>(__self);
	
		System.Security.IPermission targetConverted = InteropUtils.GetInstance<System.Security.IPermission>(target);
	
	    try {
			System.Security.IPermission __returnValue = __selfConverted.Intersect(targetConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_IPermission_IsSubsetOf")]
	internal static byte /* System.Boolean */ System_Security_IPermission_IsSubsetOf(void* /* System.Security.IPermission */ __self, void* /* System.Security.IPermission */ target, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.IPermission __selfConverted = InteropUtils.GetInstance<System.Security.IPermission>(__self);
	
		System.Security.IPermission targetConverted = InteropUtils.GetInstance<System.Security.IPermission>(target);
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSubsetOf(targetConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_IPermission_Union")]
	internal static void* /* System.Security.IPermission */ System_Security_IPermission_Union(void* /* System.Security.IPermission */ __self, void* /* System.Security.IPermission */ target, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.IPermission __selfConverted = InteropUtils.GetInstance<System.Security.IPermission>(__self);
	
		System.Security.IPermission targetConverted = InteropUtils.GetInstance<System.Security.IPermission>(target);
	
	    try {
			System.Security.IPermission __returnValue = __selfConverted.Union(targetConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_IPermission_TypeOf")]
	internal static void* /* System.Type */ System_Security_IPermission_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Security.IPermission);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_IPermission_Destroy")]
	internal static void /* System.Void */ System_Security_IPermission_Destroy(void* /* System.Security.IPermission */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Security_SecurityElement
{
	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_AddAttribute")]
	internal static void /* System.Void */ System_Security_SecurityElement_AddAttribute(void* /* System.Security.SecurityElement */ __self, byte* /* System.String */ name, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			__selfConverted.AddAttribute(nameConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_AddChild")]
	internal static void /* System.Void */ System_Security_SecurityElement_AddChild(void* /* System.Security.SecurityElement */ __self, void* /* System.Security.SecurityElement */ child, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
		System.Security.SecurityElement childConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(child);
	
	    try {
			__selfConverted.AddChild(childConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Equal")]
	internal static byte /* System.Boolean */ System_Security_SecurityElement_Equal(void* /* System.Security.SecurityElement */ __self, void* /* System.Security.SecurityElement */ other, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
		System.Security.SecurityElement otherConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(other);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equal(otherConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Copy")]
	internal static void* /* System.Security.SecurityElement */ System_Security_SecurityElement_Copy(void* /* System.Security.SecurityElement */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
	
	    try {
			System.Security.SecurityElement __returnValue = __selfConverted.Copy();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_IsValidTag")]
	internal static byte /* System.Boolean */ System_Security_SecurityElement_IsValidTag(byte* /* System.String */ tag, void** /* System.Exception */ __outException)
	{
		System.String tagConverted = InteropUtils.ToDotNetString(tag);
	
	    try {
			System.Boolean __returnValue = System.Security.SecurityElement.IsValidTag(tagConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_IsValidText")]
	internal static byte /* System.Boolean */ System_Security_SecurityElement_IsValidText(byte* /* System.String */ text, void** /* System.Exception */ __outException)
	{
		System.String textConverted = InteropUtils.ToDotNetString(text);
	
	    try {
			System.Boolean __returnValue = System.Security.SecurityElement.IsValidText(textConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_IsValidAttributeName")]
	internal static byte /* System.Boolean */ System_Security_SecurityElement_IsValidAttributeName(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.Boolean __returnValue = System.Security.SecurityElement.IsValidAttributeName(nameConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_IsValidAttributeValue")]
	internal static byte /* System.Boolean */ System_Security_SecurityElement_IsValidAttributeValue(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Boolean __returnValue = System.Security.SecurityElement.IsValidAttributeValue(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Escape")]
	internal static byte* /* System.String */ System_Security_SecurityElement_Escape(byte* /* System.String */ str, void** /* System.Exception */ __outException)
	{
		System.String strConverted = InteropUtils.ToDotNetString(str);
	
	    try {
			System.String __returnValue = System.Security.SecurityElement.Escape(strConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_ToString")]
	internal static byte* /* System.String */ System_Security_SecurityElement_ToString(void* /* System.Security.SecurityElement */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Attribute")]
	internal static byte* /* System.String */ System_Security_SecurityElement_Attribute(void* /* System.Security.SecurityElement */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			System.String __returnValue = __selfConverted.Attribute(nameConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_SearchForChildByTag")]
	internal static void* /* System.Security.SecurityElement */ System_Security_SecurityElement_SearchForChildByTag(void* /* System.Security.SecurityElement */ __self, byte* /* System.String */ tag, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
		System.String tagConverted = InteropUtils.ToDotNetString(tag);
	
	    try {
			System.Security.SecurityElement __returnValue = __selfConverted.SearchForChildByTag(tagConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_SearchForTextOfTag")]
	internal static byte* /* System.String */ System_Security_SecurityElement_SearchForTextOfTag(void* /* System.Security.SecurityElement */ __self, byte* /* System.String */ tag, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
		System.String tagConverted = InteropUtils.ToDotNetString(tag);
	
	    try {
			System.String __returnValue = __selfConverted.SearchForTextOfTag(tagConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_FromString")]
	internal static void* /* System.Security.SecurityElement */ System_Security_SecurityElement_FromString(byte* /* System.String */ xml, void** /* System.Exception */ __outException)
	{
		System.String xmlConverted = InteropUtils.ToDotNetString(xml);
	
	    try {
			System.Security.SecurityElement __returnValue = System.Security.SecurityElement.FromString(xmlConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Create")]
	internal static void* /* System.Security.SecurityElement */ System_Security_SecurityElement_Create(byte* /* System.String */ tag, void** /* System.Exception */ __outException)
	{
		System.String tagConverted = InteropUtils.ToDotNetString(tag);
	
	    try {
			System.Security.SecurityElement __returnValue = new System.Security.SecurityElement(tagConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Create_1")]
	internal static void* /* System.Security.SecurityElement */ System_Security_SecurityElement_Create_1(byte* /* System.String */ tag, byte* /* System.String */ text, void** /* System.Exception */ __outException)
	{
		System.String tagConverted = InteropUtils.ToDotNetString(tag);
		System.String textConverted = InteropUtils.ToDotNetString(text);
	
	    try {
			System.Security.SecurityElement __returnValue = new System.Security.SecurityElement(tagConverted, textConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Tag_Get")]
	internal static byte* /* System.String */ System_Security_SecurityElement_Tag_Get(void* /* System.Security.SecurityElement */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Tag;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Tag_Set")]
	internal static void /* System.Void */ System_Security_SecurityElement_Tag_Set(void* /* System.Security.SecurityElement */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
	
	    try {
			__selfConverted.Tag = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Attributes_Get")]
	internal static void* /* System.Collections.Hashtable */ System_Security_SecurityElement_Attributes_Get(void* /* System.Security.SecurityElement */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
	
	    try {
			System.Collections.Hashtable __returnValue = __selfConverted.Attributes;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Attributes_Set")]
	internal static void /* System.Void */ System_Security_SecurityElement_Attributes_Set(void* /* System.Security.SecurityElement */ __self, void* /* System.Collections.Hashtable */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
	
	    try {
			__selfConverted.Attributes = InteropUtils.GetInstance<System.Collections.Hashtable>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Text_Get")]
	internal static byte* /* System.String */ System_Security_SecurityElement_Text_Get(void* /* System.Security.SecurityElement */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Text;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Text_Set")]
	internal static void /* System.Void */ System_Security_SecurityElement_Text_Set(void* /* System.Security.SecurityElement */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
	
	    try {
			__selfConverted.Text = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Children_Get")]
	internal static void* /* System.Collections.ArrayList */ System_Security_SecurityElement_Children_Get(void* /* System.Security.SecurityElement */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
	
	    try {
			System.Collections.ArrayList __returnValue = __selfConverted.Children;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Children_Set")]
	internal static void /* System.Void */ System_Security_SecurityElement_Children_Set(void* /* System.Security.SecurityElement */ __self, void* /* System.Collections.ArrayList */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecurityElement __selfConverted = InteropUtils.GetInstance<System.Security.SecurityElement>(__self);
	
	
	    try {
			__selfConverted.Children = InteropUtils.GetInstance<System.Collections.ArrayList>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_TypeOf")]
	internal static void* /* System.Type */ System_Security_SecurityElement_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Security.SecurityElement);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecurityElement_Destroy")]
	internal static void /* System.Void */ System_Security_SecurityElement_Destroy(void* /* System.Security.SecurityElement */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_Hashtable
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Add")]
	internal static void /* System.Void */ System_Collections_Hashtable_Add(void* /* System.Collections.Hashtable */ __self, void* /* System.Object */ key, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.Add(keyConverted, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Clear")]
	internal static void /* System.Void */ System_Collections_Hashtable_Clear(void* /* System.Collections.Hashtable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
	
	    try {
			__selfConverted.Clear();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Clone")]
	internal static void* /* System.Object */ System_Collections_Hashtable_Clone(void* /* System.Collections.Hashtable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Contains")]
	internal static byte /* System.Boolean */ System_Collections_Hashtable_Contains(void* /* System.Collections.Hashtable */ __self, void* /* System.Object */ key, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(keyConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_ContainsKey")]
	internal static byte /* System.Boolean */ System_Collections_Hashtable_ContainsKey(void* /* System.Collections.Hashtable */ __self, void* /* System.Object */ key, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
	
	    try {
			System.Boolean __returnValue = __selfConverted.ContainsKey(keyConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_ContainsValue")]
	internal static byte /* System.Boolean */ System_Collections_Hashtable_ContainsValue(void* /* System.Collections.Hashtable */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.ContainsValue(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_CopyTo")]
	internal static void /* System.Void */ System_Collections_Hashtable_CopyTo(void* /* System.Collections.Hashtable */ __self, void* /* System.Array */ array, int /* System.Int32 */ arrayIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(arrayConverted, arrayIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_GetEnumerator")]
	internal static void* /* System.Collections.IDictionaryEnumerator */ System_Collections_Hashtable_GetEnumerator(void* /* System.Collections.Hashtable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
	
	    try {
			System.Collections.IDictionaryEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Remove")]
	internal static void /* System.Void */ System_Collections_Hashtable_Remove(void* /* System.Collections.Hashtable */ __self, void* /* System.Object */ key, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
	
	    try {
			__selfConverted.Remove(keyConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Synchronized")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Synchronized(void* /* System.Collections.Hashtable */ table, void** /* System.Exception */ __outException)
	{
		System.Collections.Hashtable tableConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(table);
	
	    try {
			System.Collections.Hashtable __returnValue = System.Collections.Hashtable.Synchronized(tableConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_GetObjectData")]
	internal static void /* System.Void */ System_Collections_Hashtable_GetObjectData(void* /* System.Collections.Hashtable */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_OnDeserialization")]
	internal static void /* System.Void */ System_Collections_Hashtable_OnDeserialization(void* /* System.Collections.Hashtable */ __self, void* /* System.Object */ sender, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
		System.Object senderConverted = InteropUtils.GetInstance<System.Object>(sender);
	
	    try {
			__selfConverted.OnDeserialization(senderConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_1")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_1(int /* System.Int32 */ capacity, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(capacity);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_2")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_2(int /* System.Int32 */ capacity, float /* System.Single */ loadFactor, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(capacity, loadFactor);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_3")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_3(int /* System.Int32 */ capacity, float /* System.Single */ loadFactor, void* /* System.Collections.IEqualityComparer */ equalityComparer, void** /* System.Exception */ __outException)
	{
		System.Collections.IEqualityComparer equalityComparerConverted = InteropUtils.GetInstance<System.Collections.IEqualityComparer>(equalityComparer);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(capacity, loadFactor, equalityComparerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_4")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_4(void* /* System.Collections.IHashCodeProvider */ hcp, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Collections.IHashCodeProvider hcpConverted = InteropUtils.GetInstance<System.Collections.IHashCodeProvider>(hcp);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(hcpConverted, comparerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_5")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_5(void* /* System.Collections.IEqualityComparer */ equalityComparer, void** /* System.Exception */ __outException)
	{
		System.Collections.IEqualityComparer equalityComparerConverted = InteropUtils.GetInstance<System.Collections.IEqualityComparer>(equalityComparer);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(equalityComparerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_6")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_6(int /* System.Int32 */ capacity, void* /* System.Collections.IHashCodeProvider */ hcp, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Collections.IHashCodeProvider hcpConverted = InteropUtils.GetInstance<System.Collections.IHashCodeProvider>(hcp);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(capacity, hcpConverted, comparerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_7")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_7(int /* System.Int32 */ capacity, void* /* System.Collections.IEqualityComparer */ equalityComparer, void** /* System.Exception */ __outException)
	{
		System.Collections.IEqualityComparer equalityComparerConverted = InteropUtils.GetInstance<System.Collections.IEqualityComparer>(equalityComparer);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(capacity, equalityComparerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_8")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_8(void* /* System.Collections.IDictionary */ d, void** /* System.Exception */ __outException)
	{
		System.Collections.IDictionary dConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(d);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(dConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_9")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_9(void* /* System.Collections.IDictionary */ d, float /* System.Single */ loadFactor, void** /* System.Exception */ __outException)
	{
		System.Collections.IDictionary dConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(d);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(dConverted, loadFactor);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_10")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_10(void* /* System.Collections.IDictionary */ d, void* /* System.Collections.IHashCodeProvider */ hcp, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Collections.IDictionary dConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(d);
		System.Collections.IHashCodeProvider hcpConverted = InteropUtils.GetInstance<System.Collections.IHashCodeProvider>(hcp);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(dConverted, hcpConverted, comparerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_11")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_11(void* /* System.Collections.IDictionary */ d, void* /* System.Collections.IEqualityComparer */ equalityComparer, void** /* System.Exception */ __outException)
	{
		System.Collections.IDictionary dConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(d);
		System.Collections.IEqualityComparer equalityComparerConverted = InteropUtils.GetInstance<System.Collections.IEqualityComparer>(equalityComparer);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(dConverted, equalityComparerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_12")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_12(int /* System.Int32 */ capacity, float /* System.Single */ loadFactor, void* /* System.Collections.IHashCodeProvider */ hcp, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Collections.IHashCodeProvider hcpConverted = InteropUtils.GetInstance<System.Collections.IHashCodeProvider>(hcp);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(capacity, loadFactor, hcpConverted, comparerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_13")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_13(void* /* System.Collections.IDictionary */ d, float /* System.Single */ loadFactor, void* /* System.Collections.IHashCodeProvider */ hcp, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		System.Collections.IDictionary dConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(d);
		System.Collections.IHashCodeProvider hcpConverted = InteropUtils.GetInstance<System.Collections.IHashCodeProvider>(hcp);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(dConverted, loadFactor, hcpConverted, comparerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Create_14")]
	internal static void* /* System.Collections.Hashtable */ System_Collections_Hashtable_Create_14(void* /* System.Collections.IDictionary */ d, float /* System.Single */ loadFactor, void* /* System.Collections.IEqualityComparer */ equalityComparer, void** /* System.Exception */ __outException)
	{
		System.Collections.IDictionary dConverted = InteropUtils.GetInstance<System.Collections.IDictionary>(d);
		System.Collections.IEqualityComparer equalityComparerConverted = InteropUtils.GetInstance<System.Collections.IEqualityComparer>(equalityComparer);
	
	    try {
			System.Collections.Hashtable __returnValue = new System.Collections.Hashtable(dConverted, loadFactor, equalityComparerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Collections_Hashtable_IsReadOnly_Get(void* /* System.Collections.Hashtable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_IsFixedSize_Get")]
	internal static byte /* System.Boolean */ System_Collections_Hashtable_IsFixedSize_Get(void* /* System.Collections.Hashtable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFixedSize;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_IsSynchronized_Get")]
	internal static byte /* System.Boolean */ System_Collections_Hashtable_IsSynchronized_Get(void* /* System.Collections.Hashtable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSynchronized;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Keys_Get")]
	internal static void* /* System.Collections.ICollection */ System_Collections_Hashtable_Keys_Get(void* /* System.Collections.Hashtable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
	
	    try {
			System.Collections.ICollection __returnValue = __selfConverted.Keys;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Values_Get")]
	internal static void* /* System.Collections.ICollection */ System_Collections_Hashtable_Values_Get(void* /* System.Collections.Hashtable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
	
	    try {
			System.Collections.ICollection __returnValue = __selfConverted.Values;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_SyncRoot_Get")]
	internal static void* /* System.Object */ System_Collections_Hashtable_SyncRoot_Get(void* /* System.Collections.Hashtable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.SyncRoot;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Count_Get")]
	internal static int /* System.Int32 */ System_Collections_Hashtable_Count_Get(void* /* System.Collections.Hashtable */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.Hashtable __selfConverted = InteropUtils.GetInstance<System.Collections.Hashtable>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Count;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_TypeOf")]
	internal static void* /* System.Type */ System_Collections_Hashtable_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.Hashtable);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_Hashtable_Destroy")]
	internal static void /* System.Void */ System_Collections_Hashtable_Destroy(void* /* System.Collections.Hashtable */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_IEqualityComparer
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEqualityComparer_Equals")]
	internal static byte /* System.Boolean */ System_Collections_IEqualityComparer_Equals(void* /* System.Collections.IEqualityComparer */ __self, void* /* System.Object */ x, void* /* System.Object */ y, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IEqualityComparer __selfConverted = InteropUtils.GetInstance<System.Collections.IEqualityComparer>(__self);
	
		System.Object xConverted = InteropUtils.GetInstance<System.Object>(x);
		System.Object yConverted = InteropUtils.GetInstance<System.Object>(y);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(xConverted, yConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEqualityComparer_GetHashCode")]
	internal static int /* System.Int32 */ System_Collections_IEqualityComparer_GetHashCode(void* /* System.Collections.IEqualityComparer */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IEqualityComparer __selfConverted = InteropUtils.GetInstance<System.Collections.IEqualityComparer>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode(objConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEqualityComparer_TypeOf")]
	internal static void* /* System.Type */ System_Collections_IEqualityComparer_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.IEqualityComparer);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IEqualityComparer_Destroy")]
	internal static void /* System.Void */ System_Collections_IEqualityComparer_Destroy(void* /* System.Collections.IEqualityComparer */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_IHashCodeProvider
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IHashCodeProvider_GetHashCode")]
	internal static int /* System.Int32 */ System_Collections_IHashCodeProvider_GetHashCode(void* /* System.Collections.IHashCodeProvider */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IHashCodeProvider __selfConverted = InteropUtils.GetInstance<System.Collections.IHashCodeProvider>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Int32 __returnValue = __selfConverted.GetHashCode(objConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IHashCodeProvider_TypeOf")]
	internal static void* /* System.Type */ System_Collections_IHashCodeProvider_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.IHashCodeProvider);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IHashCodeProvider_Destroy")]
	internal static void /* System.Void */ System_Collections_IHashCodeProvider_Destroy(void* /* System.Collections.IHashCodeProvider */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_ArrayList
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Adapter")]
	internal static void* /* System.Collections.ArrayList */ System_Collections_ArrayList_Adapter(void* /* System.Collections.IList */ list, void** /* System.Exception */ __outException)
	{
		System.Collections.IList listConverted = InteropUtils.GetInstance<System.Collections.IList>(list);
	
	    try {
			System.Collections.ArrayList __returnValue = System.Collections.ArrayList.Adapter(listConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Add")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_Add(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Add(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_AddRange")]
	internal static void /* System.Void */ System_Collections_ArrayList_AddRange(void* /* System.Collections.ArrayList */ __self, void* /* System.Collections.ICollection */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Collections.ICollection cConverted = InteropUtils.GetInstance<System.Collections.ICollection>(c);
	
	    try {
			__selfConverted.AddRange(cConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_BinarySearch")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_BinarySearch(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, int /* System.Int32 */ count, void* /* System.Object */ value, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Int32 __returnValue = __selfConverted.BinarySearch(index, count, valueConverted, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_BinarySearch_1")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_BinarySearch_1(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.BinarySearch(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_BinarySearch_2")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_BinarySearch_2(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ value, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			System.Int32 __returnValue = __selfConverted.BinarySearch(valueConverted, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Clear")]
	internal static void /* System.Void */ System_Collections_ArrayList_Clear(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			__selfConverted.Clear();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Clone")]
	internal static void* /* System.Object */ System_Collections_ArrayList_Clone(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Clone();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Contains")]
	internal static byte /* System.Boolean */ System_Collections_ArrayList_Contains(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ item, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object itemConverted = InteropUtils.GetInstance<System.Object>(item);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(itemConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_CopyTo")]
	internal static void /* System.Void */ System_Collections_ArrayList_CopyTo(void* /* System.Collections.ArrayList */ __self, void* /* System.Array */ array, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(arrayConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_CopyTo_1")]
	internal static void /* System.Void */ System_Collections_ArrayList_CopyTo_1(void* /* System.Collections.ArrayList */ __self, void* /* System.Array */ array, int /* System.Int32 */ arrayIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(arrayConverted, arrayIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_CopyTo_2")]
	internal static void /* System.Void */ System_Collections_ArrayList_CopyTo_2(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, void* /* System.Array */ array, int /* System.Int32 */ arrayIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Array arrayConverted = InteropUtils.GetInstance<System.Array>(array);
	
	    try {
			__selfConverted.CopyTo(index, arrayConverted, arrayIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_FixedSize")]
	internal static void* /* System.Collections.IList */ System_Collections_ArrayList_FixedSize(void* /* System.Collections.IList */ list, void** /* System.Exception */ __outException)
	{
		System.Collections.IList listConverted = InteropUtils.GetInstance<System.Collections.IList>(list);
	
	    try {
			System.Collections.IList __returnValue = System.Collections.ArrayList.FixedSize(listConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_FixedSize_1")]
	internal static void* /* System.Collections.ArrayList */ System_Collections_ArrayList_FixedSize_1(void* /* System.Collections.ArrayList */ list, void** /* System.Exception */ __outException)
	{
		System.Collections.ArrayList listConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(list);
	
	    try {
			System.Collections.ArrayList __returnValue = System.Collections.ArrayList.FixedSize(listConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_GetEnumerator")]
	internal static void* /* System.Collections.IEnumerator */ System_Collections_ArrayList_GetEnumerator(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Collections.IEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_GetEnumerator_1")]
	internal static void* /* System.Collections.IEnumerator */ System_Collections_ArrayList_GetEnumerator_1(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Collections.IEnumerator __returnValue = __selfConverted.GetEnumerator(index, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_IndexOf")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_IndexOf(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_IndexOf_1")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_IndexOf_1(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_IndexOf_2")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_IndexOf_2(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Insert")]
	internal static void /* System.Void */ System_Collections_ArrayList_Insert(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.Insert(index, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_InsertRange")]
	internal static void /* System.Void */ System_Collections_ArrayList_InsertRange(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, void* /* System.Collections.ICollection */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Collections.ICollection cConverted = InteropUtils.GetInstance<System.Collections.ICollection>(c);
	
	    try {
			__selfConverted.InsertRange(index, cConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_LastIndexOf")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_LastIndexOf(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_LastIndexOf_1")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_LastIndexOf_1(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ value, int /* System.Int32 */ startIndex, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, startIndex);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_LastIndexOf_2")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_LastIndexOf_2(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.LastIndexOf(valueConverted, startIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_ReadOnly")]
	internal static void* /* System.Collections.IList */ System_Collections_ArrayList_ReadOnly(void* /* System.Collections.IList */ list, void** /* System.Exception */ __outException)
	{
		System.Collections.IList listConverted = InteropUtils.GetInstance<System.Collections.IList>(list);
	
	    try {
			System.Collections.IList __returnValue = System.Collections.ArrayList.ReadOnly(listConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_ReadOnly_1")]
	internal static void* /* System.Collections.ArrayList */ System_Collections_ArrayList_ReadOnly_1(void* /* System.Collections.ArrayList */ list, void** /* System.Exception */ __outException)
	{
		System.Collections.ArrayList listConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(list);
	
	    try {
			System.Collections.ArrayList __returnValue = System.Collections.ArrayList.ReadOnly(listConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Remove")]
	internal static void /* System.Void */ System_Collections_ArrayList_Remove(void* /* System.Collections.ArrayList */ __self, void* /* System.Object */ obj, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			__selfConverted.Remove(objConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_RemoveAt")]
	internal static void /* System.Void */ System_Collections_ArrayList_RemoveAt(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			__selfConverted.RemoveAt(index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_RemoveRange")]
	internal static void /* System.Void */ System_Collections_ArrayList_RemoveRange(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			__selfConverted.RemoveRange(index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Repeat")]
	internal static void* /* System.Collections.ArrayList */ System_Collections_ArrayList_Repeat(void* /* System.Object */ value, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Collections.ArrayList __returnValue = System.Collections.ArrayList.Repeat(valueConverted, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Reverse")]
	internal static void /* System.Void */ System_Collections_ArrayList_Reverse(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			__selfConverted.Reverse();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Reverse_1")]
	internal static void /* System.Void */ System_Collections_ArrayList_Reverse_1(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			__selfConverted.Reverse(index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_SetRange")]
	internal static void /* System.Void */ System_Collections_ArrayList_SetRange(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, void* /* System.Collections.ICollection */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Collections.ICollection cConverted = InteropUtils.GetInstance<System.Collections.ICollection>(c);
	
	    try {
			__selfConverted.SetRange(index, cConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_GetRange")]
	internal static void* /* System.Collections.ArrayList */ System_Collections_ArrayList_GetRange(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Collections.ArrayList __returnValue = __selfConverted.GetRange(index, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Sort")]
	internal static void /* System.Void */ System_Collections_ArrayList_Sort(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			__selfConverted.Sort();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Sort_1")]
	internal static void /* System.Void */ System_Collections_ArrayList_Sort_1(void* /* System.Collections.ArrayList */ __self, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			__selfConverted.Sort(comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Sort_2")]
	internal static void /* System.Void */ System_Collections_ArrayList_Sort_2(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ index, int /* System.Int32 */ count, void* /* System.Collections.IComparer */ comparer, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Collections.IComparer comparerConverted = InteropUtils.GetInstance<System.Collections.IComparer>(comparer);
	
	    try {
			__selfConverted.Sort(index, count, comparerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Synchronized")]
	internal static void* /* System.Collections.IList */ System_Collections_ArrayList_Synchronized(void* /* System.Collections.IList */ list, void** /* System.Exception */ __outException)
	{
		System.Collections.IList listConverted = InteropUtils.GetInstance<System.Collections.IList>(list);
	
	    try {
			System.Collections.IList __returnValue = System.Collections.ArrayList.Synchronized(listConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Synchronized_1")]
	internal static void* /* System.Collections.ArrayList */ System_Collections_ArrayList_Synchronized_1(void* /* System.Collections.ArrayList */ list, void** /* System.Exception */ __outException)
	{
		System.Collections.ArrayList listConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(list);
	
	    try {
			System.Collections.ArrayList __returnValue = System.Collections.ArrayList.Synchronized(listConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_ToArray")]
	internal static void* /* System.Object[] */ System_Collections_ArrayList_ToArray(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Object[] __returnValue = __selfConverted.ToArray();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_ToArray_1")]
	internal static void* /* System.Array */ System_Collections_ArrayList_ToArray_1(void* /* System.Collections.ArrayList */ __self, void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.Array __returnValue = __selfConverted.ToArray(typeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_TrimToSize")]
	internal static void /* System.Void */ System_Collections_ArrayList_TrimToSize(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			__selfConverted.TrimToSize();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Create")]
	internal static void* /* System.Collections.ArrayList */ System_Collections_ArrayList_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Collections.ArrayList __returnValue = new System.Collections.ArrayList();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Create_1")]
	internal static void* /* System.Collections.ArrayList */ System_Collections_ArrayList_Create_1(int /* System.Int32 */ capacity, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Collections.ArrayList __returnValue = new System.Collections.ArrayList(capacity);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Create_2")]
	internal static void* /* System.Collections.ArrayList */ System_Collections_ArrayList_Create_2(void* /* System.Collections.ICollection */ c, void** /* System.Exception */ __outException)
	{
		System.Collections.ICollection cConverted = InteropUtils.GetInstance<System.Collections.ICollection>(c);
	
	    try {
			System.Collections.ArrayList __returnValue = new System.Collections.ArrayList(cConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Capacity_Get")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_Capacity_Get(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Capacity;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Capacity_Set")]
	internal static void /* System.Void */ System_Collections_ArrayList_Capacity_Set(void* /* System.Collections.ArrayList */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			__selfConverted.Capacity = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Count_Get")]
	internal static int /* System.Int32 */ System_Collections_ArrayList_Count_Get(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Count;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_IsFixedSize_Get")]
	internal static byte /* System.Boolean */ System_Collections_ArrayList_IsFixedSize_Get(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFixedSize;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Collections_ArrayList_IsReadOnly_Get(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_IsSynchronized_Get")]
	internal static byte /* System.Boolean */ System_Collections_ArrayList_IsSynchronized_Get(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsSynchronized;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_SyncRoot_Get")]
	internal static void* /* System.Object */ System_Collections_ArrayList_SyncRoot_Get(void* /* System.Collections.ArrayList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.ArrayList __selfConverted = InteropUtils.GetInstance<System.Collections.ArrayList>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.SyncRoot;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_TypeOf")]
	internal static void* /* System.Type */ System_Collections_ArrayList_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.ArrayList);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_ArrayList_Destroy")]
	internal static void /* System.Void */ System_Collections_ArrayList_Destroy(void* /* System.Collections.ArrayList */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Collections_IList
{
	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_Add")]
	internal static int /* System.Int32 */ System_Collections_IList_Add(void* /* System.Collections.IList */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IList __selfConverted = InteropUtils.GetInstance<System.Collections.IList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Add(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_Contains")]
	internal static byte /* System.Boolean */ System_Collections_IList_Contains(void* /* System.Collections.IList */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IList __selfConverted = InteropUtils.GetInstance<System.Collections.IList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Contains(valueConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_Clear")]
	internal static void /* System.Void */ System_Collections_IList_Clear(void* /* System.Collections.IList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IList __selfConverted = InteropUtils.GetInstance<System.Collections.IList>(__self);
	
	
	    try {
			__selfConverted.Clear();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_IndexOf")]
	internal static int /* System.Int32 */ System_Collections_IList_IndexOf(void* /* System.Collections.IList */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IList __selfConverted = InteropUtils.GetInstance<System.Collections.IList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Int32 __returnValue = __selfConverted.IndexOf(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_Insert")]
	internal static void /* System.Void */ System_Collections_IList_Insert(void* /* System.Collections.IList */ __self, int /* System.Int32 */ index, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IList __selfConverted = InteropUtils.GetInstance<System.Collections.IList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.Insert(index, valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_Remove")]
	internal static void /* System.Void */ System_Collections_IList_Remove(void* /* System.Collections.IList */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IList __selfConverted = InteropUtils.GetInstance<System.Collections.IList>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.Remove(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_RemoveAt")]
	internal static void /* System.Void */ System_Collections_IList_RemoveAt(void* /* System.Collections.IList */ __self, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IList __selfConverted = InteropUtils.GetInstance<System.Collections.IList>(__self);
	
	
	    try {
			__selfConverted.RemoveAt(index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_Collections_IList_IsReadOnly_Get(void* /* System.Collections.IList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IList __selfConverted = InteropUtils.GetInstance<System.Collections.IList>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_IsFixedSize_Get")]
	internal static byte /* System.Boolean */ System_Collections_IList_IsFixedSize_Get(void* /* System.Collections.IList */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Collections.IList __selfConverted = InteropUtils.GetInstance<System.Collections.IList>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsFixedSize;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_TypeOf")]
	internal static void* /* System.Type */ System_Collections_IList_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Collections.IList);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Collections_IList_Destroy")]
	internal static void /* System.Void */ System_Collections_IList_Destroy(void* /* System.Collections.IList */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Security_Permissions_PermissionState
{
	[UnmanagedCallersOnly(EntryPoint = "System_Security_Permissions_PermissionState_TypeOf")]
	internal static void* /* System.Type */ System_Security_Permissions_PermissionState_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Security.Permissions.PermissionState);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_UnhandledExceptionEventHandler
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.UnhandledExceptionEventArgs */ /* e */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.UnhandledExceptionEventHandler> m_trampoline;
	internal System.UnhandledExceptionEventHandler Trampoline
	{
		get {
			System.UnhandledExceptionEventHandler? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_UnhandledExceptionEventHandler(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.UnhandledExceptionEventArgs */ /* e */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_UnhandledExceptionEventHandler(System.UnhandledExceptionEventHandler originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_UnhandledExceptionEventHandler()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.UnhandledExceptionEventHandler? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_UnhandledExceptionEventHandler);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.UnhandledExceptionEventHandler trampoline = (System.UnhandledExceptionEventHandler)System.Delegate.CreateDelegate(typeof(System.UnhandledExceptionEventHandler), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction(System.Object /* System.Object */ sender, System.UnhandledExceptionEventArgs /* System.UnhandledExceptionEventArgs */ e)
	{
		void* senderConverted = sender.AllocateGCHandleAndGetAddress();
		void* eConverted = e.AllocateGCHandleAndGetAddress();
	


		CFunction(Context, senderConverted, eConverted);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventHandler_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.UnhandledExceptionEventArgs */ /* e */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_UnhandledExceptionEventHandler(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventHandler_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void* /* System.Object */ sender, void* /* System.UnhandledExceptionEventArgs */ e, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_UnhandledExceptionEventHandler>(self);

			System.Object senderConverted = InteropUtils.GetInstance<System.Object>(sender);
			System.UnhandledExceptionEventArgs eConverted = InteropUtils.GetInstance<System.UnhandledExceptionEventArgs>(e);
		


			selfConverted.Trampoline(senderConverted, eConverted);
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventHandler_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_UnhandledExceptionEventHandler>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventHandler_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.UnhandledExceptionEventArgs */ /* e */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_UnhandledExceptionEventHandler>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventHandler_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_UnhandledExceptionEventHandler>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventHandler_Destroy")]
	internal static void /* System.Void */ System_UnhandledExceptionEventHandler_Destroy(void* /* System.UnhandledExceptionEventHandler */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_UnhandledExceptionEventArgs
{
	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventArgs_Create")]
	internal static void* /* System.UnhandledExceptionEventArgs */ System_UnhandledExceptionEventArgs_Create(void* /* System.Object */ exception, byte /* System.Boolean */ isTerminating, void** /* System.Exception */ __outException)
	{
		System.Object exceptionConverted = InteropUtils.GetInstance<System.Object>(exception);
		System.Boolean isTerminatingConverted = isTerminating.ToBool();
	
	    try {
			System.UnhandledExceptionEventArgs __returnValue = new System.UnhandledExceptionEventArgs(exceptionConverted, isTerminatingConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventArgs_ExceptionObject_Get")]
	internal static void* /* System.Object */ System_UnhandledExceptionEventArgs_ExceptionObject_Get(void* /* System.UnhandledExceptionEventArgs */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.UnhandledExceptionEventArgs __selfConverted = InteropUtils.GetInstance<System.UnhandledExceptionEventArgs>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.ExceptionObject;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventArgs_IsTerminating_Get")]
	internal static byte /* System.Boolean */ System_UnhandledExceptionEventArgs_IsTerminating_Get(void* /* System.UnhandledExceptionEventArgs */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.UnhandledExceptionEventArgs __selfConverted = InteropUtils.GetInstance<System.UnhandledExceptionEventArgs>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsTerminating;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventArgs_TypeOf")]
	internal static void* /* System.Type */ System_UnhandledExceptionEventArgs_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.UnhandledExceptionEventArgs);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_UnhandledExceptionEventArgs_Destroy")]
	internal static void /* System.Void */ System_UnhandledExceptionEventArgs_Destroy(void* /* System.UnhandledExceptionEventArgs */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_EventHandler
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.EventArgs */ /* e */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.EventHandler> m_trampoline;
	internal System.EventHandler Trampoline
	{
		get {
			System.EventHandler? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_EventHandler(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.EventArgs */ /* e */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_EventHandler(System.EventHandler originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_EventHandler()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.EventHandler? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_EventHandler);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.EventHandler trampoline = (System.EventHandler)System.Delegate.CreateDelegate(typeof(System.EventHandler), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction(System.Object /* System.Object */ sender, System.EventArgs /* System.EventArgs */ e)
	{
		void* senderConverted = sender.AllocateGCHandleAndGetAddress();
		void* eConverted = e.AllocateGCHandleAndGetAddress();
	


		CFunction(Context, senderConverted, eConverted);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_EventHandler_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.EventArgs */ /* e */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_EventHandler(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_EventHandler_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void* /* System.Object */ sender, void* /* System.EventArgs */ e, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_EventHandler>(self);

			System.Object senderConverted = InteropUtils.GetInstance<System.Object>(sender);
			System.EventArgs eConverted = InteropUtils.GetInstance<System.EventArgs>(e);
		


			selfConverted.Trampoline(senderConverted, eConverted);
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_EventHandler_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_EventHandler>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_EventHandler_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.EventArgs */ /* e */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_EventHandler>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_EventHandler_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_EventHandler>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_EventHandler_Destroy")]
	internal static void /* System.Void */ System_EventHandler_Destroy(void* /* System.EventHandler */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_AssemblyLoadEventHandler
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.AssemblyLoadEventArgs */ /* args */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.AssemblyLoadEventHandler> m_trampoline;
	internal System.AssemblyLoadEventHandler Trampoline
	{
		get {
			System.AssemblyLoadEventHandler? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_AssemblyLoadEventHandler(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.AssemblyLoadEventArgs */ /* args */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_AssemblyLoadEventHandler(System.AssemblyLoadEventHandler originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_AssemblyLoadEventHandler()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.AssemblyLoadEventHandler? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_AssemblyLoadEventHandler);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.AssemblyLoadEventHandler trampoline = (System.AssemblyLoadEventHandler)System.Delegate.CreateDelegate(typeof(System.AssemblyLoadEventHandler), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction(System.Object /* System.Object */ sender, System.AssemblyLoadEventArgs /* System.AssemblyLoadEventArgs */ args)
	{
		void* senderConverted = sender.AllocateGCHandleAndGetAddress();
		void* argsConverted = args.AllocateGCHandleAndGetAddress();
	


		CFunction(Context, senderConverted, argsConverted);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AssemblyLoadEventHandler_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.AssemblyLoadEventArgs */ /* args */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_AssemblyLoadEventHandler(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AssemblyLoadEventHandler_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void* /* System.Object */ sender, void* /* System.AssemblyLoadEventArgs */ args, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_AssemblyLoadEventHandler>(self);

			System.Object senderConverted = InteropUtils.GetInstance<System.Object>(sender);
			System.AssemblyLoadEventArgs argsConverted = InteropUtils.GetInstance<System.AssemblyLoadEventArgs>(args);
		


			selfConverted.Trampoline(senderConverted, argsConverted);
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AssemblyLoadEventHandler_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_AssemblyLoadEventHandler>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AssemblyLoadEventHandler_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.AssemblyLoadEventArgs */ /* args */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_AssemblyLoadEventHandler>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AssemblyLoadEventHandler_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_AssemblyLoadEventHandler>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_AssemblyLoadEventHandler_Destroy")]
	internal static void /* System.Void */ System_AssemblyLoadEventHandler_Destroy(void* /* System.AssemblyLoadEventHandler */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_AssemblyLoadEventArgs
{
	[UnmanagedCallersOnly(EntryPoint = "System_AssemblyLoadEventArgs_Create")]
	internal static void* /* System.AssemblyLoadEventArgs */ System_AssemblyLoadEventArgs_Create(void* /* System.Reflection.Assembly */ loadedAssembly, void** /* System.Exception */ __outException)
	{
		System.Reflection.Assembly loadedAssemblyConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(loadedAssembly);
	
	    try {
			System.AssemblyLoadEventArgs __returnValue = new System.AssemblyLoadEventArgs(loadedAssemblyConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AssemblyLoadEventArgs_LoadedAssembly_Get")]
	internal static void* /* System.Reflection.Assembly */ System_AssemblyLoadEventArgs_LoadedAssembly_Get(void* /* System.AssemblyLoadEventArgs */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.AssemblyLoadEventArgs __selfConverted = InteropUtils.GetInstance<System.AssemblyLoadEventArgs>(__self);
	
	
	    try {
			System.Reflection.Assembly __returnValue = __selfConverted.LoadedAssembly;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_AssemblyLoadEventArgs_TypeOf")]
	internal static void* /* System.Type */ System_AssemblyLoadEventArgs_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.AssemblyLoadEventArgs);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_AssemblyLoadEventArgs_Destroy")]
	internal static void /* System.Void */ System_AssemblyLoadEventArgs_Destroy(void* /* System.AssemblyLoadEventArgs */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_ResolveEventHandler
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* args */, void* /* System.Reflection.Assembly */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.ResolveEventHandler> m_trampoline;
	internal System.ResolveEventHandler Trampoline
	{
		get {
			System.ResolveEventHandler? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_ResolveEventHandler(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* args */, void* /* System.Reflection.Assembly */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_ResolveEventHandler(System.ResolveEventHandler originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_ResolveEventHandler()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.ResolveEventHandler? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_ResolveEventHandler);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.ResolveEventHandler trampoline = (System.ResolveEventHandler)System.Delegate.CreateDelegate(typeof(System.ResolveEventHandler), this, invocationMethod);

		return trampoline;
	}

	private System.Reflection.Assembly __InvokeByCallingCFunction(System.Object /* System.Object */ sender, System.ResolveEventArgs /* System.ResolveEventArgs */ args)
	{
		void* senderConverted = sender.AllocateGCHandleAndGetAddress();
		void* argsConverted = args.AllocateGCHandleAndGetAddress();
	


		var __returnValue = CFunction(Context, senderConverted, argsConverted);
		var __returnValueConverted = InteropUtils.GetInstance<System.Reflection.Assembly>(__returnValue);

		InteropUtils.FreeIfAllocated(__returnValue);

		return __returnValueConverted;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventHandler_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* args */, void* /* System.Reflection.Assembly */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_ResolveEventHandler(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventHandler_Invoke")]
	public static void* /* System.Reflection.Assembly */ Invoke(void* self, void* /* System.Object */ sender, void* /* System.ResolveEventArgs */ args, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_ResolveEventHandler>(self);

			System.Object senderConverted = InteropUtils.GetInstance<System.Object>(sender);
			System.ResolveEventArgs argsConverted = InteropUtils.GetInstance<System.ResolveEventArgs>(args);
		


			var __returnValue = selfConverted.Trampoline(senderConverted, argsConverted);
			var __returnValueConverted = __returnValue.AllocateGCHandleAndGetAddress();

			return __returnValueConverted;
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

			return null;
		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventHandler_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_ResolveEventHandler>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventHandler_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.Object */ /* sender */, void* /* System.ResolveEventArgs */ /* args */, void* /* System.Reflection.Assembly */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_ResolveEventHandler>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventHandler_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_ResolveEventHandler>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_ResolveEventHandler_Destroy")]
	internal static void /* System.Void */ System_ResolveEventHandler_Destroy(void* /* System.ResolveEventHandler */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Security_Principal_PrincipalPolicy
{
	[UnmanagedCallersOnly(EntryPoint = "System_Security_Principal_PrincipalPolicy_TypeOf")]
	internal static void* /* System.Type */ System_Security_Principal_PrincipalPolicy_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Security.Principal.PrincipalPolicy);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_Runtime_Remoting_ObjectHandle
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Remoting_ObjectHandle_Unwrap")]
	internal static void* /* System.Object */ System_Runtime_Remoting_ObjectHandle_Unwrap(void* /* System.Runtime.Remoting.ObjectHandle */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Runtime.Remoting.ObjectHandle __selfConverted = InteropUtils.GetInstance<System.Runtime.Remoting.ObjectHandle>(__self);
	
	
	    try {
			System.Object __returnValue = __selfConverted.Unwrap();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Remoting_ObjectHandle_Create")]
	internal static void* /* System.Runtime.Remoting.ObjectHandle */ System_Runtime_Remoting_ObjectHandle_Create(void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Runtime.Remoting.ObjectHandle __returnValue = new System.Runtime.Remoting.ObjectHandle(oConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Remoting_ObjectHandle_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_Remoting_ObjectHandle_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.Remoting.ObjectHandle);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_Remoting_ObjectHandle_Destroy")]
	internal static void /* System.Void */ System_Runtime_Remoting_ObjectHandle_Destroy(void* /* System.Runtime.Remoting.ObjectHandle */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_ThreadStart
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.Threading.ThreadStart> m_trampoline;
	internal System.Threading.ThreadStart Trampoline
	{
		get {
			System.Threading.ThreadStart? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_Threading_ThreadStart(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_Threading_ThreadStart(System.Threading.ThreadStart originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_Threading_ThreadStart()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.Threading.ThreadStart? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Threading_ThreadStart);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Threading.ThreadStart trampoline = (System.Threading.ThreadStart)System.Delegate.CreateDelegate(typeof(System.Threading.ThreadStart), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction()
	{
	


		CFunction(Context);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ThreadStart_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Threading_ThreadStart(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ThreadStart_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_Threading_ThreadStart>(self);

		


			selfConverted.Trampoline();
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ThreadStart_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_ThreadStart>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ThreadStart_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_ThreadStart>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ThreadStart_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_ThreadStart>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ThreadStart_Destroy")]
	internal static void /* System.Void */ System_Threading_ThreadStart_Destroy(void* /* System.Threading.ThreadStart */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_ParameterizedThreadStart
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.Object */ /* obj */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.Threading.ParameterizedThreadStart> m_trampoline;
	internal System.Threading.ParameterizedThreadStart Trampoline
	{
		get {
			System.Threading.ParameterizedThreadStart? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_Threading_ParameterizedThreadStart(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* obj */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_Threading_ParameterizedThreadStart(System.Threading.ParameterizedThreadStart originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_Threading_ParameterizedThreadStart()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.Threading.ParameterizedThreadStart? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Threading_ParameterizedThreadStart);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Threading.ParameterizedThreadStart trampoline = (System.Threading.ParameterizedThreadStart)System.Delegate.CreateDelegate(typeof(System.Threading.ParameterizedThreadStart), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction(System.Object /* System.Object */ obj)
	{
		void* objConverted = obj.AllocateGCHandleAndGetAddress();
	


		CFunction(Context, objConverted);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ParameterizedThreadStart_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* obj */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Threading_ParameterizedThreadStart(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ParameterizedThreadStart_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void* /* System.Object */ obj, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_Threading_ParameterizedThreadStart>(self);

			System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		


			selfConverted.Trampoline(objConverted);
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ParameterizedThreadStart_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_ParameterizedThreadStart>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ParameterizedThreadStart_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.Object */ /* obj */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_ParameterizedThreadStart>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ParameterizedThreadStart_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_ParameterizedThreadStart>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_ParameterizedThreadStart_Destroy")]
	internal static void /* System.Void */ System_Threading_ParameterizedThreadStart_Destroy(void* /* System.Threading.ParameterizedThreadStart */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_Timer
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Change")]
	internal static byte /* System.Boolean */ System_Threading_Timer_Change(void* /* System.Threading.Timer */ __self, int /* System.Int32 */ dueTime, int /* System.Int32 */ period, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Timer __selfConverted = InteropUtils.GetInstance<System.Threading.Timer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Change(dueTime, period);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Change_1")]
	internal static byte /* System.Boolean */ System_Threading_Timer_Change_1(void* /* System.Threading.Timer */ __self, void* /* System.TimeSpan */ dueTime, void* /* System.TimeSpan */ period, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Timer __selfConverted = InteropUtils.GetInstance<System.Threading.Timer>(__self);
	
		System.TimeSpan dueTimeConverted = InteropUtils.GetInstance<System.TimeSpan>(dueTime);
		System.TimeSpan periodConverted = InteropUtils.GetInstance<System.TimeSpan>(period);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Change(dueTimeConverted, periodConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Change_2")]
	internal static byte /* System.Boolean */ System_Threading_Timer_Change_2(void* /* System.Threading.Timer */ __self, uint /* System.UInt32 */ dueTime, uint /* System.UInt32 */ period, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Timer __selfConverted = InteropUtils.GetInstance<System.Threading.Timer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Change(dueTime, period);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Change_3")]
	internal static byte /* System.Boolean */ System_Threading_Timer_Change_3(void* /* System.Threading.Timer */ __self, long /* System.Int64 */ dueTime, long /* System.Int64 */ period, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Timer __selfConverted = InteropUtils.GetInstance<System.Threading.Timer>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Change(dueTime, period);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Dispose")]
	internal static byte /* System.Boolean */ System_Threading_Timer_Dispose(void* /* System.Threading.Timer */ __self, void* /* System.Threading.WaitHandle */ notifyObject, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Timer __selfConverted = InteropUtils.GetInstance<System.Threading.Timer>(__self);
	
		System.Threading.WaitHandle notifyObjectConverted = InteropUtils.GetInstance<System.Threading.WaitHandle>(notifyObject);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Dispose(notifyObjectConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Dispose_1")]
	internal static void /* System.Void */ System_Threading_Timer_Dispose_1(void* /* System.Threading.Timer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Timer __selfConverted = InteropUtils.GetInstance<System.Threading.Timer>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_DisposeAsync")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_Threading_Timer_DisposeAsync(void* /* System.Threading.Timer */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.Timer __selfConverted = InteropUtils.GetInstance<System.Threading.Timer>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.DisposeAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Create")]
	internal static void* /* System.Threading.Timer */ System_Threading_Timer_Create(void* /* System.Threading.TimerCallback */ callback, void* /* System.Object */ state, int /* System.Int32 */ dueTime, int /* System.Int32 */ period, void** /* System.Exception */ __outException)
	{
		System.Threading.TimerCallback callbackConverted = InteropUtils.GetInstance<System_Threading_TimerCallback>(callback)?.Trampoline;
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
	
	    try {
			System.Threading.Timer __returnValue = new System.Threading.Timer(callbackConverted, stateConverted, dueTime, period);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Create_1")]
	internal static void* /* System.Threading.Timer */ System_Threading_Timer_Create_1(void* /* System.Threading.TimerCallback */ callback, void* /* System.Object */ state, void* /* System.TimeSpan */ dueTime, void* /* System.TimeSpan */ period, void** /* System.Exception */ __outException)
	{
		System.Threading.TimerCallback callbackConverted = InteropUtils.GetInstance<System_Threading_TimerCallback>(callback)?.Trampoline;
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
		System.TimeSpan dueTimeConverted = InteropUtils.GetInstance<System.TimeSpan>(dueTime);
		System.TimeSpan periodConverted = InteropUtils.GetInstance<System.TimeSpan>(period);
	
	    try {
			System.Threading.Timer __returnValue = new System.Threading.Timer(callbackConverted, stateConverted, dueTimeConverted, periodConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Create_2")]
	internal static void* /* System.Threading.Timer */ System_Threading_Timer_Create_2(void* /* System.Threading.TimerCallback */ callback, void* /* System.Object */ state, uint /* System.UInt32 */ dueTime, uint /* System.UInt32 */ period, void** /* System.Exception */ __outException)
	{
		System.Threading.TimerCallback callbackConverted = InteropUtils.GetInstance<System_Threading_TimerCallback>(callback)?.Trampoline;
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
	
	    try {
			System.Threading.Timer __returnValue = new System.Threading.Timer(callbackConverted, stateConverted, dueTime, period);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Create_3")]
	internal static void* /* System.Threading.Timer */ System_Threading_Timer_Create_3(void* /* System.Threading.TimerCallback */ callback, void* /* System.Object */ state, long /* System.Int64 */ dueTime, long /* System.Int64 */ period, void** /* System.Exception */ __outException)
	{
		System.Threading.TimerCallback callbackConverted = InteropUtils.GetInstance<System_Threading_TimerCallback>(callback)?.Trampoline;
		System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
	
	    try {
			System.Threading.Timer __returnValue = new System.Threading.Timer(callbackConverted, stateConverted, dueTime, period);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Create_4")]
	internal static void* /* System.Threading.Timer */ System_Threading_Timer_Create_4(void* /* System.Threading.TimerCallback */ callback, void** /* System.Exception */ __outException)
	{
		System.Threading.TimerCallback callbackConverted = InteropUtils.GetInstance<System_Threading_TimerCallback>(callback)?.Trampoline;
	
	    try {
			System.Threading.Timer __returnValue = new System.Threading.Timer(callbackConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_ActiveCount_Get")]
	internal static long /* System.Int64 */ System_Threading_Timer_ActiveCount_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Threading.Timer.ActiveCount;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_TypeOf")]
	internal static void* /* System.Type */ System_Threading_Timer_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.Timer);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_Timer_Destroy")]
	internal static void /* System.Void */ System_Threading_Timer_Destroy(void* /* System.Threading.Timer */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_TimerCallback
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void* /* System.Object */ /* state */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<System.Threading.TimerCallback> m_trampoline;
	internal System.Threading.TimerCallback Trampoline
	{
		get {
			System.Threading.TimerCallback? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private System_Threading_TimerCallback(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* state */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal System_Threading_TimerCallback(System.Threading.TimerCallback originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~System_Threading_TimerCallback()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private System.Threading.TimerCallback? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(System_Threading_TimerCallback);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		System.Threading.TimerCallback trampoline = (System.Threading.TimerCallback)System.Delegate.CreateDelegate(typeof(System.Threading.TimerCallback), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction(System.Object /* System.Object */ state)
	{
		void* stateConverted = state.AllocateGCHandleAndGetAddress();
	


		CFunction(Context, stateConverted);
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_TimerCallback_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void* /* System.Object */ /* state */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new System_Threading_TimerCallback(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_TimerCallback_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void* /* System.Object */ state, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<System_Threading_TimerCallback>(self);

			System.Object stateConverted = InteropUtils.GetInstance<System.Object>(state);
		


			selfConverted.Trampoline(stateConverted);
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_TimerCallback_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_TimerCallback>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_TimerCallback_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void* /* System.Object */ /* state */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_TimerCallback>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_TimerCallback_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<System_Threading_TimerCallback>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_TimerCallback_Destroy")]
	internal static void /* System.Void */ System_Threading_TimerCallback_Destroy(void* /* System.Threading.TimerCallback */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Threading_CancellationTokenSource
{
	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_Cancel")]
	internal static void /* System.Void */ System_Threading_CancellationTokenSource_Cancel(void* /* System.Threading.CancellationTokenSource */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenSource __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenSource>(__self);
	
	
	    try {
			__selfConverted.Cancel();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_Cancel_1")]
	internal static void /* System.Void */ System_Threading_CancellationTokenSource_Cancel_1(void* /* System.Threading.CancellationTokenSource */ __self, byte /* System.Boolean */ throwOnFirstException, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenSource __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenSource>(__self);
	
		System.Boolean throwOnFirstExceptionConverted = throwOnFirstException.ToBool();
	
	    try {
			__selfConverted.Cancel(throwOnFirstExceptionConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_CancelAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_Threading_CancellationTokenSource_CancelAsync(void* /* System.Threading.CancellationTokenSource */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenSource __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenSource>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.CancelAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_CancelAfter")]
	internal static void /* System.Void */ System_Threading_CancellationTokenSource_CancelAfter(void* /* System.Threading.CancellationTokenSource */ __self, void* /* System.TimeSpan */ delay, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenSource __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenSource>(__self);
	
		System.TimeSpan delayConverted = InteropUtils.GetInstance<System.TimeSpan>(delay);
	
	    try {
			__selfConverted.CancelAfter(delayConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_CancelAfter_1")]
	internal static void /* System.Void */ System_Threading_CancellationTokenSource_CancelAfter_1(void* /* System.Threading.CancellationTokenSource */ __self, int /* System.Int32 */ millisecondsDelay, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenSource __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenSource>(__self);
	
	
	    try {
			__selfConverted.CancelAfter(millisecondsDelay);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_TryReset")]
	internal static byte /* System.Boolean */ System_Threading_CancellationTokenSource_TryReset(void* /* System.Threading.CancellationTokenSource */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenSource __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenSource>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.TryReset();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_Dispose")]
	internal static void /* System.Void */ System_Threading_CancellationTokenSource_Dispose(void* /* System.Threading.CancellationTokenSource */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenSource __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenSource>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_CreateLinkedTokenSource")]
	internal static void* /* System.Threading.CancellationTokenSource */ System_Threading_CancellationTokenSource_CreateLinkedTokenSource(void* /* System.Threading.CancellationToken */ token1, void* /* System.Threading.CancellationToken */ token2, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken token1Converted = InteropUtils.GetInstance<System.Threading.CancellationToken>(token1);
		System.Threading.CancellationToken token2Converted = InteropUtils.GetInstance<System.Threading.CancellationToken>(token2);
	
	    try {
			System.Threading.CancellationTokenSource __returnValue = System.Threading.CancellationTokenSource.CreateLinkedTokenSource(token1Converted, token2Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_CreateLinkedTokenSource_1")]
	internal static void* /* System.Threading.CancellationTokenSource */ System_Threading_CancellationTokenSource_CreateLinkedTokenSource_1(void* /* System.Threading.CancellationToken */ token, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken tokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(token);
	
	    try {
			System.Threading.CancellationTokenSource __returnValue = System.Threading.CancellationTokenSource.CreateLinkedTokenSource(tokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_CreateLinkedTokenSource_2")]
	internal static void* /* System.Threading.CancellationTokenSource */ System_Threading_CancellationTokenSource_CreateLinkedTokenSource_2(void* /* System.Threading.CancellationToken[] */ tokens, void** /* System.Exception */ __outException)
	{
		System.Threading.CancellationToken[] tokensConverted = InteropUtils.GetInstance<System.Threading.CancellationToken[]>(tokens);
	
	    try {
			System.Threading.CancellationTokenSource __returnValue = System.Threading.CancellationTokenSource.CreateLinkedTokenSource(tokensConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_Create_1")]
	internal static void* /* System.Threading.CancellationTokenSource */ System_Threading_CancellationTokenSource_Create_1(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.CancellationTokenSource __returnValue = new System.Threading.CancellationTokenSource();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_Create_2")]
	internal static void* /* System.Threading.CancellationTokenSource */ System_Threading_CancellationTokenSource_Create_2(void* /* System.TimeSpan */ delay, void** /* System.Exception */ __outException)
	{
		System.TimeSpan delayConverted = InteropUtils.GetInstance<System.TimeSpan>(delay);
	
	    try {
			System.Threading.CancellationTokenSource __returnValue = new System.Threading.CancellationTokenSource(delayConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_Create_3")]
	internal static void* /* System.Threading.CancellationTokenSource */ System_Threading_CancellationTokenSource_Create_3(int /* System.Int32 */ millisecondsDelay, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Threading.CancellationTokenSource __returnValue = new System.Threading.CancellationTokenSource(millisecondsDelay);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_IsCancellationRequested_Get")]
	internal static byte /* System.Boolean */ System_Threading_CancellationTokenSource_IsCancellationRequested_Get(void* /* System.Threading.CancellationTokenSource */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenSource __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenSource>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsCancellationRequested;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_Token_Get")]
	internal static void* /* System.Threading.CancellationToken */ System_Threading_CancellationTokenSource_Token_Get(void* /* System.Threading.CancellationTokenSource */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Threading.CancellationTokenSource __selfConverted = InteropUtils.GetInstance<System.Threading.CancellationTokenSource>(__self);
	
	
	    try {
			System.Threading.CancellationToken __returnValue = __selfConverted.Token;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_TypeOf")]
	internal static void* /* System.Type */ System_Threading_CancellationTokenSource_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Threading.CancellationTokenSource);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Threading_CancellationTokenSource_Destroy")]
	internal static void /* System.Void */ System_Threading_CancellationTokenSource_Destroy(void* /* System.Threading.CancellationTokenSource */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_Random
{
	[UnmanagedCallersOnly(EntryPoint = "System_Random_Next")]
	internal static int /* System.Int32 */ System_Random_Next(void* /* System.Random */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Random __selfConverted = InteropUtils.GetInstance<System.Random>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Next();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_Next_1")]
	internal static int /* System.Int32 */ System_Random_Next_1(void* /* System.Random */ __self, int /* System.Int32 */ maxValue, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Random __selfConverted = InteropUtils.GetInstance<System.Random>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Next(maxValue);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_Next_2")]
	internal static int /* System.Int32 */ System_Random_Next_2(void* /* System.Random */ __self, int /* System.Int32 */ minValue, int /* System.Int32 */ maxValue, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Random __selfConverted = InteropUtils.GetInstance<System.Random>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Next(minValue, maxValue);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_NextInt64")]
	internal static long /* System.Int64 */ System_Random_NextInt64(void* /* System.Random */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Random __selfConverted = InteropUtils.GetInstance<System.Random>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.NextInt64();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_NextInt64_1")]
	internal static long /* System.Int64 */ System_Random_NextInt64_1(void* /* System.Random */ __self, long /* System.Int64 */ maxValue, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Random __selfConverted = InteropUtils.GetInstance<System.Random>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.NextInt64(maxValue);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_NextInt64_2")]
	internal static long /* System.Int64 */ System_Random_NextInt64_2(void* /* System.Random */ __self, long /* System.Int64 */ minValue, long /* System.Int64 */ maxValue, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Random __selfConverted = InteropUtils.GetInstance<System.Random>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.NextInt64(minValue, maxValue);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_NextSingle")]
	internal static float /* System.Single */ System_Random_NextSingle(void* /* System.Random */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Random __selfConverted = InteropUtils.GetInstance<System.Random>(__self);
	
	
	    try {
			System.Single __returnValue = __selfConverted.NextSingle();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_NextDouble")]
	internal static double /* System.Double */ System_Random_NextDouble(void* /* System.Random */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Random __selfConverted = InteropUtils.GetInstance<System.Random>(__self);
	
	
	    try {
			System.Double __returnValue = __selfConverted.NextDouble();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_NextBytes")]
	internal static void /* System.Void */ System_Random_NextBytes(void* /* System.Random */ __self, void* /* System.Byte[] */ buffer, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Random __selfConverted = InteropUtils.GetInstance<System.Random>(__self);
	
		System.Byte[] bufferConverted = InteropUtils.GetInstance<System.Byte[]>(buffer);
	
	    try {
			__selfConverted.NextBytes(bufferConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	// TODO: Generic Methods with array parameters are not supported

	// TODO: Generic Methods with array parameters are not supported

	[UnmanagedCallersOnly(EntryPoint = "System_Random_Create")]
	internal static void* /* System.Random */ System_Random_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Random __returnValue = new System.Random();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_Create_1")]
	internal static void* /* System.Random */ System_Random_Create_1(int /* System.Int32 */ Seed, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Random __returnValue = new System.Random(Seed);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_Shared_Get")]
	internal static void* /* System.Random */ System_Random_Shared_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Random __returnValue = System.Random.Shared;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_TypeOf")]
	internal static void* /* System.Type */ System_Random_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Random);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Random_Destroy")]
	internal static void /* System.Void */ System_Random_Destroy(void* /* System.Random */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.


// Type "T" was skipped. Reason: It has no full name.

internal unsafe class System_IO_Path
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_ChangeExtension")]
	internal static byte* /* System.String */ System_IO_Path_ChangeExtension(byte* /* System.String */ path, byte* /* System.String */ extension, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String extensionConverted = InteropUtils.ToDotNetString(extension);
	
	    try {
			System.String __returnValue = System.IO.Path.ChangeExtension(pathConverted, extensionConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_Exists")]
	internal static byte /* System.Boolean */ System_IO_Path_Exists(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.Boolean __returnValue = System.IO.Path.Exists(pathConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetDirectoryName")]
	internal static byte* /* System.String */ System_IO_Path_GetDirectoryName(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String __returnValue = System.IO.Path.GetDirectoryName(pathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetExtension")]
	internal static byte* /* System.String */ System_IO_Path_GetExtension(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String __returnValue = System.IO.Path.GetExtension(pathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetFileName")]
	internal static byte* /* System.String */ System_IO_Path_GetFileName(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String __returnValue = System.IO.Path.GetFileName(pathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetFileNameWithoutExtension")]
	internal static byte* /* System.String */ System_IO_Path_GetFileNameWithoutExtension(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String __returnValue = System.IO.Path.GetFileNameWithoutExtension(pathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetRandomFileName")]
	internal static byte* /* System.String */ System_IO_Path_GetRandomFileName(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.IO.Path.GetRandomFileName();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_IsPathFullyQualified")]
	internal static byte /* System.Boolean */ System_IO_Path_IsPathFullyQualified(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.Boolean __returnValue = System.IO.Path.IsPathFullyQualified(pathConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_HasExtension")]
	internal static byte /* System.Boolean */ System_IO_Path_HasExtension(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.Boolean __returnValue = System.IO.Path.HasExtension(pathConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_Combine")]
	internal static byte* /* System.String */ System_IO_Path_Combine(byte* /* System.String */ path1, byte* /* System.String */ path2, void** /* System.Exception */ __outException)
	{
		System.String path1Converted = InteropUtils.ToDotNetString(path1);
		System.String path2Converted = InteropUtils.ToDotNetString(path2);
	
	    try {
			System.String __returnValue = System.IO.Path.Combine(path1Converted, path2Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_Combine_1")]
	internal static byte* /* System.String */ System_IO_Path_Combine_1(byte* /* System.String */ path1, byte* /* System.String */ path2, byte* /* System.String */ path3, void** /* System.Exception */ __outException)
	{
		System.String path1Converted = InteropUtils.ToDotNetString(path1);
		System.String path2Converted = InteropUtils.ToDotNetString(path2);
		System.String path3Converted = InteropUtils.ToDotNetString(path3);
	
	    try {
			System.String __returnValue = System.IO.Path.Combine(path1Converted, path2Converted, path3Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_Combine_2")]
	internal static byte* /* System.String */ System_IO_Path_Combine_2(byte* /* System.String */ path1, byte* /* System.String */ path2, byte* /* System.String */ path3, byte* /* System.String */ path4, void** /* System.Exception */ __outException)
	{
		System.String path1Converted = InteropUtils.ToDotNetString(path1);
		System.String path2Converted = InteropUtils.ToDotNetString(path2);
		System.String path3Converted = InteropUtils.ToDotNetString(path3);
		System.String path4Converted = InteropUtils.ToDotNetString(path4);
	
	    try {
			System.String __returnValue = System.IO.Path.Combine(path1Converted, path2Converted, path3Converted, path4Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_Combine_3")]
	internal static byte* /* System.String */ System_IO_Path_Combine_3(void* /* System.String[] */ paths, void** /* System.Exception */ __outException)
	{
		System.String[] pathsConverted = InteropUtils.GetInstance<System.String[]>(paths);
	
	    try {
			System.String __returnValue = System.IO.Path.Combine(pathsConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_Join")]
	internal static byte* /* System.String */ System_IO_Path_Join(byte* /* System.String */ path1, byte* /* System.String */ path2, void** /* System.Exception */ __outException)
	{
		System.String path1Converted = InteropUtils.ToDotNetString(path1);
		System.String path2Converted = InteropUtils.ToDotNetString(path2);
	
	    try {
			System.String __returnValue = System.IO.Path.Join(path1Converted, path2Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_Join_1")]
	internal static byte* /* System.String */ System_IO_Path_Join_1(byte* /* System.String */ path1, byte* /* System.String */ path2, byte* /* System.String */ path3, void** /* System.Exception */ __outException)
	{
		System.String path1Converted = InteropUtils.ToDotNetString(path1);
		System.String path2Converted = InteropUtils.ToDotNetString(path2);
		System.String path3Converted = InteropUtils.ToDotNetString(path3);
	
	    try {
			System.String __returnValue = System.IO.Path.Join(path1Converted, path2Converted, path3Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_Join_2")]
	internal static byte* /* System.String */ System_IO_Path_Join_2(byte* /* System.String */ path1, byte* /* System.String */ path2, byte* /* System.String */ path3, byte* /* System.String */ path4, void** /* System.Exception */ __outException)
	{
		System.String path1Converted = InteropUtils.ToDotNetString(path1);
		System.String path2Converted = InteropUtils.ToDotNetString(path2);
		System.String path3Converted = InteropUtils.ToDotNetString(path3);
		System.String path4Converted = InteropUtils.ToDotNetString(path4);
	
	    try {
			System.String __returnValue = System.IO.Path.Join(path1Converted, path2Converted, path3Converted, path4Converted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_Join_3")]
	internal static byte* /* System.String */ System_IO_Path_Join_3(void* /* System.String[] */ paths, void** /* System.Exception */ __outException)
	{
		System.String[] pathsConverted = InteropUtils.GetInstance<System.String[]>(paths);
	
	    try {
			System.String __returnValue = System.IO.Path.Join(pathsConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetRelativePath")]
	internal static byte* /* System.String */ System_IO_Path_GetRelativePath(byte* /* System.String */ relativeTo, byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String relativeToConverted = InteropUtils.ToDotNetString(relativeTo);
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String __returnValue = System.IO.Path.GetRelativePath(relativeToConverted, pathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_TrimEndingDirectorySeparator")]
	internal static byte* /* System.String */ System_IO_Path_TrimEndingDirectorySeparator(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String __returnValue = System.IO.Path.TrimEndingDirectorySeparator(pathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_EndsInDirectorySeparator")]
	internal static byte /* System.Boolean */ System_IO_Path_EndsInDirectorySeparator(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.Boolean __returnValue = System.IO.Path.EndsInDirectorySeparator(pathConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetInvalidFileNameChars")]
	internal static void* /* System.Char[] */ System_IO_Path_GetInvalidFileNameChars(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char[] __returnValue = System.IO.Path.GetInvalidFileNameChars();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetInvalidPathChars")]
	internal static void* /* System.Char[] */ System_IO_Path_GetInvalidPathChars(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Char[] __returnValue = System.IO.Path.GetInvalidPathChars();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetFullPath")]
	internal static byte* /* System.String */ System_IO_Path_GetFullPath(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String __returnValue = System.IO.Path.GetFullPath(pathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetFullPath_1")]
	internal static byte* /* System.String */ System_IO_Path_GetFullPath_1(byte* /* System.String */ path, byte* /* System.String */ basePath, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String basePathConverted = InteropUtils.ToDotNetString(basePath);
	
	    try {
			System.String __returnValue = System.IO.Path.GetFullPath(pathConverted, basePathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetTempPath")]
	internal static byte* /* System.String */ System_IO_Path_GetTempPath(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.IO.Path.GetTempPath();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetTempFileName")]
	internal static byte* /* System.String */ System_IO_Path_GetTempFileName(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.IO.Path.GetTempFileName();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_IsPathRooted")]
	internal static byte /* System.Boolean */ System_IO_Path_IsPathRooted(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.Boolean __returnValue = System.IO.Path.IsPathRooted(pathConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_GetPathRoot")]
	internal static byte* /* System.String */ System_IO_Path_GetPathRoot(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String __returnValue = System.IO.Path.GetPathRoot(pathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_DirectorySeparatorChar_Get")]
	internal static char /* System.Char */ System_IO_Path_DirectorySeparatorChar_Get()
	{
	
		System.Char __returnValue = System.IO.Path.DirectorySeparatorChar;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_AltDirectorySeparatorChar_Get")]
	internal static char /* System.Char */ System_IO_Path_AltDirectorySeparatorChar_Get()
	{
	
		System.Char __returnValue = System.IO.Path.AltDirectorySeparatorChar;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_VolumeSeparatorChar_Get")]
	internal static char /* System.Char */ System_IO_Path_VolumeSeparatorChar_Get()
	{
	
		System.Char __returnValue = System.IO.Path.VolumeSeparatorChar;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_PathSeparator_Get")]
	internal static char /* System.Char */ System_IO_Path_PathSeparator_Get()
	{
	
		System.Char __returnValue = System.IO.Path.PathSeparator;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_InvalidPathChars_Get")]
	internal static void* /* System.Char[] */ System_IO_Path_InvalidPathChars_Get()
	{
	
		System.Char[] __returnValue = System.IO.Path.InvalidPathChars;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_TypeOf")]
	internal static void* /* System.Type */ System_IO_Path_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.Path);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Path_Destroy")]
	internal static void /* System.Void */ System_IO_Path_Destroy(void* /* System.IO.Path */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_File
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_OpenText")]
	internal static void* /* System.IO.StreamReader */ System_IO_File_OpenText(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.StreamReader __returnValue = System.IO.File.OpenText(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_CreateText")]
	internal static void* /* System.IO.StreamWriter */ System_IO_File_CreateText(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.StreamWriter __returnValue = System.IO.File.CreateText(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_AppendText")]
	internal static void* /* System.IO.StreamWriter */ System_IO_File_AppendText(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.StreamWriter __returnValue = System.IO.File.AppendText(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Copy")]
	internal static void /* System.Void */ System_IO_File_Copy(byte* /* System.String */ sourceFileName, byte* /* System.String */ destFileName, void** /* System.Exception */ __outException)
	{
		System.String sourceFileNameConverted = InteropUtils.ToDotNetString(sourceFileName);
		System.String destFileNameConverted = InteropUtils.ToDotNetString(destFileName);
	
	    try {
			System.IO.File.Copy(sourceFileNameConverted, destFileNameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Copy_1")]
	internal static void /* System.Void */ System_IO_File_Copy_1(byte* /* System.String */ sourceFileName, byte* /* System.String */ destFileName, byte /* System.Boolean */ overwrite, void** /* System.Exception */ __outException)
	{
		System.String sourceFileNameConverted = InteropUtils.ToDotNetString(sourceFileName);
		System.String destFileNameConverted = InteropUtils.ToDotNetString(destFileName);
		System.Boolean overwriteConverted = overwrite.ToBool();
	
	    try {
			System.IO.File.Copy(sourceFileNameConverted, destFileNameConverted, overwriteConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Create_1")]
	internal static void* /* System.IO.FileStream */ System_IO_File_Create_1(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = System.IO.File.Create(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Create_2")]
	internal static void* /* System.IO.FileStream */ System_IO_File_Create_2(byte* /* System.String */ path, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = System.IO.File.Create(pathConverted, bufferSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Create_3")]
	internal static void* /* System.IO.FileStream */ System_IO_File_Create_3(byte* /* System.String */ path, int /* System.Int32 */ bufferSize, System.IO.FileOptions /* System.IO.FileOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = System.IO.File.Create(pathConverted, bufferSize, options);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Delete")]
	internal static void /* System.Void */ System_IO_File_Delete(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.File.Delete(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Exists")]
	internal static byte /* System.Boolean */ System_IO_File_Exists(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.Boolean __returnValue = System.IO.File.Exists(pathConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Open_1")]
	internal static void* /* System.IO.FileStream */ System_IO_File_Open_1(byte* /* System.String */ path, void* /* System.IO.FileStreamOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.IO.FileStreamOptions optionsConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(options);
	
	    try {
			System.IO.FileStream __returnValue = System.IO.File.Open(pathConverted, optionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Open_2")]
	internal static void* /* System.IO.FileStream */ System_IO_File_Open_2(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = System.IO.File.Open(pathConverted, mode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Open_3")]
	internal static void* /* System.IO.FileStream */ System_IO_File_Open_3(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = System.IO.File.Open(pathConverted, mode, access);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Open_4")]
	internal static void* /* System.IO.FileStream */ System_IO_File_Open_4(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = System.IO.File.Open(pathConverted, mode, access, share);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_OpenHandle")]
	internal static void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ System_IO_File_OpenHandle(byte* /* System.String */ path, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, System.IO.FileOptions /* System.IO.FileOptions */ options, long /* System.Int64 */ preallocationSize, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			Microsoft.Win32.SafeHandles.SafeFileHandle __returnValue = System.IO.File.OpenHandle(pathConverted, mode, access, share, options, preallocationSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetCreationTime")]
	internal static void /* System.Void */ System_IO_File_SetCreationTime(byte* /* System.String */ path, void* /* System.DateTime */ creationTime, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime creationTimeConverted = InteropUtils.GetInstance<System.DateTime>(creationTime);
	
	    try {
			System.IO.File.SetCreationTime(pathConverted, creationTimeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetCreationTime_1")]
	internal static void /* System.Void */ System_IO_File_SetCreationTime_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void* /* System.DateTime */ creationTime, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
		System.DateTime creationTimeConverted = InteropUtils.GetInstance<System.DateTime>(creationTime);
	
	    try {
			System.IO.File.SetCreationTime(fileHandleConverted, creationTimeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetCreationTimeUtc")]
	internal static void /* System.Void */ System_IO_File_SetCreationTimeUtc(byte* /* System.String */ path, void* /* System.DateTime */ creationTimeUtc, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime creationTimeUtcConverted = InteropUtils.GetInstance<System.DateTime>(creationTimeUtc);
	
	    try {
			System.IO.File.SetCreationTimeUtc(pathConverted, creationTimeUtcConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetCreationTimeUtc_1")]
	internal static void /* System.Void */ System_IO_File_SetCreationTimeUtc_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void* /* System.DateTime */ creationTimeUtc, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
		System.DateTime creationTimeUtcConverted = InteropUtils.GetInstance<System.DateTime>(creationTimeUtc);
	
	    try {
			System.IO.File.SetCreationTimeUtc(fileHandleConverted, creationTimeUtcConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetCreationTime")]
	internal static void* /* System.DateTime */ System_IO_File_GetCreationTime(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetCreationTime(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetCreationTime_1")]
	internal static void* /* System.DateTime */ System_IO_File_GetCreationTime_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetCreationTime(fileHandleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetCreationTimeUtc")]
	internal static void* /* System.DateTime */ System_IO_File_GetCreationTimeUtc(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetCreationTimeUtc(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetCreationTimeUtc_1")]
	internal static void* /* System.DateTime */ System_IO_File_GetCreationTimeUtc_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetCreationTimeUtc(fileHandleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetLastAccessTime")]
	internal static void /* System.Void */ System_IO_File_SetLastAccessTime(byte* /* System.String */ path, void* /* System.DateTime */ lastAccessTime, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime lastAccessTimeConverted = InteropUtils.GetInstance<System.DateTime>(lastAccessTime);
	
	    try {
			System.IO.File.SetLastAccessTime(pathConverted, lastAccessTimeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetLastAccessTime_1")]
	internal static void /* System.Void */ System_IO_File_SetLastAccessTime_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void* /* System.DateTime */ lastAccessTime, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
		System.DateTime lastAccessTimeConverted = InteropUtils.GetInstance<System.DateTime>(lastAccessTime);
	
	    try {
			System.IO.File.SetLastAccessTime(fileHandleConverted, lastAccessTimeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetLastAccessTimeUtc")]
	internal static void /* System.Void */ System_IO_File_SetLastAccessTimeUtc(byte* /* System.String */ path, void* /* System.DateTime */ lastAccessTimeUtc, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime lastAccessTimeUtcConverted = InteropUtils.GetInstance<System.DateTime>(lastAccessTimeUtc);
	
	    try {
			System.IO.File.SetLastAccessTimeUtc(pathConverted, lastAccessTimeUtcConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetLastAccessTimeUtc_1")]
	internal static void /* System.Void */ System_IO_File_SetLastAccessTimeUtc_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void* /* System.DateTime */ lastAccessTimeUtc, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
		System.DateTime lastAccessTimeUtcConverted = InteropUtils.GetInstance<System.DateTime>(lastAccessTimeUtc);
	
	    try {
			System.IO.File.SetLastAccessTimeUtc(fileHandleConverted, lastAccessTimeUtcConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetLastAccessTime")]
	internal static void* /* System.DateTime */ System_IO_File_GetLastAccessTime(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetLastAccessTime(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetLastAccessTime_1")]
	internal static void* /* System.DateTime */ System_IO_File_GetLastAccessTime_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetLastAccessTime(fileHandleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetLastAccessTimeUtc")]
	internal static void* /* System.DateTime */ System_IO_File_GetLastAccessTimeUtc(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetLastAccessTimeUtc(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetLastAccessTimeUtc_1")]
	internal static void* /* System.DateTime */ System_IO_File_GetLastAccessTimeUtc_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetLastAccessTimeUtc(fileHandleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetLastWriteTime")]
	internal static void /* System.Void */ System_IO_File_SetLastWriteTime(byte* /* System.String */ path, void* /* System.DateTime */ lastWriteTime, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime lastWriteTimeConverted = InteropUtils.GetInstance<System.DateTime>(lastWriteTime);
	
	    try {
			System.IO.File.SetLastWriteTime(pathConverted, lastWriteTimeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetLastWriteTime_1")]
	internal static void /* System.Void */ System_IO_File_SetLastWriteTime_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void* /* System.DateTime */ lastWriteTime, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
		System.DateTime lastWriteTimeConverted = InteropUtils.GetInstance<System.DateTime>(lastWriteTime);
	
	    try {
			System.IO.File.SetLastWriteTime(fileHandleConverted, lastWriteTimeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetLastWriteTimeUtc")]
	internal static void /* System.Void */ System_IO_File_SetLastWriteTimeUtc(byte* /* System.String */ path, void* /* System.DateTime */ lastWriteTimeUtc, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime lastWriteTimeUtcConverted = InteropUtils.GetInstance<System.DateTime>(lastWriteTimeUtc);
	
	    try {
			System.IO.File.SetLastWriteTimeUtc(pathConverted, lastWriteTimeUtcConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetLastWriteTimeUtc_1")]
	internal static void /* System.Void */ System_IO_File_SetLastWriteTimeUtc_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void* /* System.DateTime */ lastWriteTimeUtc, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
		System.DateTime lastWriteTimeUtcConverted = InteropUtils.GetInstance<System.DateTime>(lastWriteTimeUtc);
	
	    try {
			System.IO.File.SetLastWriteTimeUtc(fileHandleConverted, lastWriteTimeUtcConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetLastWriteTime")]
	internal static void* /* System.DateTime */ System_IO_File_GetLastWriteTime(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetLastWriteTime(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetLastWriteTime_1")]
	internal static void* /* System.DateTime */ System_IO_File_GetLastWriteTime_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetLastWriteTime(fileHandleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetLastWriteTimeUtc")]
	internal static void* /* System.DateTime */ System_IO_File_GetLastWriteTimeUtc(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetLastWriteTimeUtc(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetLastWriteTimeUtc_1")]
	internal static void* /* System.DateTime */ System_IO_File_GetLastWriteTimeUtc_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
	
	    try {
			System.DateTime __returnValue = System.IO.File.GetLastWriteTimeUtc(fileHandleConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetAttributes")]
	internal static System.IO.FileAttributes /* System.IO.FileAttributes */ System_IO_File_GetAttributes(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileAttributes __returnValue = System.IO.File.GetAttributes(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileAttributes);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetAttributes_1")]
	internal static System.IO.FileAttributes /* System.IO.FileAttributes */ System_IO_File_GetAttributes_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
	
	    try {
			System.IO.FileAttributes __returnValue = System.IO.File.GetAttributes(fileHandleConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileAttributes);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetAttributes")]
	internal static void /* System.Void */ System_IO_File_SetAttributes(byte* /* System.String */ path, System.IO.FileAttributes /* System.IO.FileAttributes */ fileAttributes, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.File.SetAttributes(pathConverted, fileAttributes);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetAttributes_1")]
	internal static void /* System.Void */ System_IO_File_SetAttributes_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, System.IO.FileAttributes /* System.IO.FileAttributes */ fileAttributes, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
	
	    try {
			System.IO.File.SetAttributes(fileHandleConverted, fileAttributes);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetUnixFileMode")]
	internal static System.IO.UnixFileMode /* System.IO.UnixFileMode */ System_IO_File_GetUnixFileMode(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.UnixFileMode __returnValue = System.IO.File.GetUnixFileMode(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.UnixFileMode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_GetUnixFileMode_1")]
	internal static System.IO.UnixFileMode /* System.IO.UnixFileMode */ System_IO_File_GetUnixFileMode_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
	
	    try {
			System.IO.UnixFileMode __returnValue = System.IO.File.GetUnixFileMode(fileHandleConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.UnixFileMode);
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetUnixFileMode")]
	internal static void /* System.Void */ System_IO_File_SetUnixFileMode(byte* /* System.String */ path, System.IO.UnixFileMode /* System.IO.UnixFileMode */ mode, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.File.SetUnixFileMode(pathConverted, mode);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_SetUnixFileMode_1")]
	internal static void /* System.Void */ System_IO_File_SetUnixFileMode_1(void* /* Microsoft.Win32.SafeHandles.SafeFileHandle */ fileHandle, System.IO.UnixFileMode /* System.IO.UnixFileMode */ mode, void** /* System.Exception */ __outException)
	{
		Microsoft.Win32.SafeHandles.SafeFileHandle fileHandleConverted = InteropUtils.GetInstance<Microsoft.Win32.SafeHandles.SafeFileHandle>(fileHandle);
	
	    try {
			System.IO.File.SetUnixFileMode(fileHandleConverted, mode);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_OpenRead")]
	internal static void* /* System.IO.FileStream */ System_IO_File_OpenRead(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = System.IO.File.OpenRead(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_OpenWrite")]
	internal static void* /* System.IO.FileStream */ System_IO_File_OpenWrite(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.FileStream __returnValue = System.IO.File.OpenWrite(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_ReadAllText")]
	internal static byte* /* System.String */ System_IO_File_ReadAllText(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String __returnValue = System.IO.File.ReadAllText(pathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_ReadAllText_1")]
	internal static byte* /* System.String */ System_IO_File_ReadAllText_1(byte* /* System.String */ path, void* /* System.Text.Encoding */ encoding, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.String __returnValue = System.IO.File.ReadAllText(pathConverted, encodingConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_WriteAllText")]
	internal static void /* System.Void */ System_IO_File_WriteAllText(byte* /* System.String */ path, byte* /* System.String */ contents, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String contentsConverted = InteropUtils.ToDotNetString(contents);
	
	    try {
			System.IO.File.WriteAllText(pathConverted, contentsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_WriteAllText_1")]
	internal static void /* System.Void */ System_IO_File_WriteAllText_1(byte* /* System.String */ path, byte* /* System.String */ contents, void* /* System.Text.Encoding */ encoding, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String contentsConverted = InteropUtils.ToDotNetString(contents);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.IO.File.WriteAllText(pathConverted, contentsConverted, encodingConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_ReadAllBytes")]
	internal static void* /* System.Byte[] */ System_IO_File_ReadAllBytes(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.Byte[] __returnValue = System.IO.File.ReadAllBytes(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_WriteAllBytes")]
	internal static void /* System.Void */ System_IO_File_WriteAllBytes(byte* /* System.String */ path, void* /* System.Byte[] */ bytes, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
	
	    try {
			System.IO.File.WriteAllBytes(pathConverted, bytesConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_ReadAllLines")]
	internal static void* /* System.String[] */ System_IO_File_ReadAllLines(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String[] __returnValue = System.IO.File.ReadAllLines(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_ReadAllLines_1")]
	internal static void* /* System.String[] */ System_IO_File_ReadAllLines_1(byte* /* System.String */ path, void* /* System.Text.Encoding */ encoding, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.String[] __returnValue = System.IO.File.ReadAllLines(pathConverted, encodingConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_WriteAllLines")]
	internal static void /* System.Void */ System_IO_File_WriteAllLines(byte* /* System.String */ path, void* /* System.String[] */ contents, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String[] contentsConverted = InteropUtils.GetInstance<System.String[]>(contents);
	
	    try {
			System.IO.File.WriteAllLines(pathConverted, contentsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_WriteAllLines_1")]
	internal static void /* System.Void */ System_IO_File_WriteAllLines_1(byte* /* System.String */ path, void* /* System.String[] */ contents, void* /* System.Text.Encoding */ encoding, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String[] contentsConverted = InteropUtils.GetInstance<System.String[]>(contents);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.IO.File.WriteAllLines(pathConverted, contentsConverted, encodingConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_AppendAllText")]
	internal static void /* System.Void */ System_IO_File_AppendAllText(byte* /* System.String */ path, byte* /* System.String */ contents, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String contentsConverted = InteropUtils.ToDotNetString(contents);
	
	    try {
			System.IO.File.AppendAllText(pathConverted, contentsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_AppendAllText_1")]
	internal static void /* System.Void */ System_IO_File_AppendAllText_1(byte* /* System.String */ path, byte* /* System.String */ contents, void* /* System.Text.Encoding */ encoding, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String contentsConverted = InteropUtils.ToDotNetString(contents);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.IO.File.AppendAllText(pathConverted, contentsConverted, encodingConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Replace")]
	internal static void /* System.Void */ System_IO_File_Replace(byte* /* System.String */ sourceFileName, byte* /* System.String */ destinationFileName, byte* /* System.String */ destinationBackupFileName, void** /* System.Exception */ __outException)
	{
		System.String sourceFileNameConverted = InteropUtils.ToDotNetString(sourceFileName);
		System.String destinationFileNameConverted = InteropUtils.ToDotNetString(destinationFileName);
		System.String destinationBackupFileNameConverted = InteropUtils.ToDotNetString(destinationBackupFileName);
	
	    try {
			System.IO.File.Replace(sourceFileNameConverted, destinationFileNameConverted, destinationBackupFileNameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Replace_1")]
	internal static void /* System.Void */ System_IO_File_Replace_1(byte* /* System.String */ sourceFileName, byte* /* System.String */ destinationFileName, byte* /* System.String */ destinationBackupFileName, byte /* System.Boolean */ ignoreMetadataErrors, void** /* System.Exception */ __outException)
	{
		System.String sourceFileNameConverted = InteropUtils.ToDotNetString(sourceFileName);
		System.String destinationFileNameConverted = InteropUtils.ToDotNetString(destinationFileName);
		System.String destinationBackupFileNameConverted = InteropUtils.ToDotNetString(destinationBackupFileName);
		System.Boolean ignoreMetadataErrorsConverted = ignoreMetadataErrors.ToBool();
	
	    try {
			System.IO.File.Replace(sourceFileNameConverted, destinationFileNameConverted, destinationBackupFileNameConverted, ignoreMetadataErrorsConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Move")]
	internal static void /* System.Void */ System_IO_File_Move(byte* /* System.String */ sourceFileName, byte* /* System.String */ destFileName, void** /* System.Exception */ __outException)
	{
		System.String sourceFileNameConverted = InteropUtils.ToDotNetString(sourceFileName);
		System.String destFileNameConverted = InteropUtils.ToDotNetString(destFileName);
	
	    try {
			System.IO.File.Move(sourceFileNameConverted, destFileNameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Move_1")]
	internal static void /* System.Void */ System_IO_File_Move_1(byte* /* System.String */ sourceFileName, byte* /* System.String */ destFileName, byte /* System.Boolean */ overwrite, void** /* System.Exception */ __outException)
	{
		System.String sourceFileNameConverted = InteropUtils.ToDotNetString(sourceFileName);
		System.String destFileNameConverted = InteropUtils.ToDotNetString(destFileName);
		System.Boolean overwriteConverted = overwrite.ToBool();
	
	    try {
			System.IO.File.Move(sourceFileNameConverted, destFileNameConverted, overwriteConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Encrypt")]
	internal static void /* System.Void */ System_IO_File_Encrypt(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.File.Encrypt(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Decrypt")]
	internal static void /* System.Void */ System_IO_File_Decrypt(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.File.Decrypt(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_WriteAllTextAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_File_WriteAllTextAsync(byte* /* System.String */ path, byte* /* System.String */ contents, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String contentsConverted = InteropUtils.ToDotNetString(contents);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.IO.File.WriteAllTextAsync(pathConverted, contentsConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_WriteAllTextAsync_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_File_WriteAllTextAsync_1(byte* /* System.String */ path, byte* /* System.String */ contents, void* /* System.Text.Encoding */ encoding, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String contentsConverted = InteropUtils.ToDotNetString(contents);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.IO.File.WriteAllTextAsync(pathConverted, contentsConverted, encodingConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_WriteAllBytesAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_File_WriteAllBytesAsync(byte* /* System.String */ path, void* /* System.Byte[] */ bytes, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Byte[] bytesConverted = InteropUtils.GetInstance<System.Byte[]>(bytes);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.IO.File.WriteAllBytesAsync(pathConverted, bytesConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_AppendAllTextAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_File_AppendAllTextAsync(byte* /* System.String */ path, byte* /* System.String */ contents, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String contentsConverted = InteropUtils.ToDotNetString(contents);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.IO.File.AppendAllTextAsync(pathConverted, contentsConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_AppendAllTextAsync_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_File_AppendAllTextAsync_1(byte* /* System.String */ path, byte* /* System.String */ contents, void* /* System.Text.Encoding */ encoding, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String contentsConverted = InteropUtils.ToDotNetString(contents);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = System.IO.File.AppendAllTextAsync(pathConverted, contentsConverted, encodingConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_CreateSymbolicLink")]
	internal static void* /* System.IO.FileSystemInfo */ System_IO_File_CreateSymbolicLink(byte* /* System.String */ path, byte* /* System.String */ pathToTarget, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String pathToTargetConverted = InteropUtils.ToDotNetString(pathToTarget);
	
	    try {
			System.IO.FileSystemInfo __returnValue = System.IO.File.CreateSymbolicLink(pathConverted, pathToTargetConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_ResolveLinkTarget")]
	internal static void* /* System.IO.FileSystemInfo */ System_IO_File_ResolveLinkTarget(byte* /* System.String */ linkPath, byte /* System.Boolean */ returnFinalTarget, void** /* System.Exception */ __outException)
	{
		System.String linkPathConverted = InteropUtils.ToDotNetString(linkPath);
		System.Boolean returnFinalTargetConverted = returnFinalTarget.ToBool();
	
	    try {
			System.IO.FileSystemInfo __returnValue = System.IO.File.ResolveLinkTarget(linkPathConverted, returnFinalTargetConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_TypeOf")]
	internal static void* /* System.Type */ System_IO_File_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.File);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_File_Destroy")]
	internal static void /* System.Void */ System_IO_File_Destroy(void* /* System.IO.File */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_StreamReader
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Close")]
	internal static void /* System.Void */ System_IO_StreamReader_Close(void* /* System.IO.StreamReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
	
	    try {
			__selfConverted.Close();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_DiscardBufferedData")]
	internal static void /* System.Void */ System_IO_StreamReader_DiscardBufferedData(void* /* System.IO.StreamReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
	
	    try {
			__selfConverted.DiscardBufferedData();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Peek")]
	internal static int /* System.Int32 */ System_IO_StreamReader_Peek(void* /* System.IO.StreamReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Peek();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Read")]
	internal static int /* System.Int32 */ System_IO_StreamReader_Read(void* /* System.IO.StreamReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Read();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Read_1")]
	internal static int /* System.Int32 */ System_IO_StreamReader_Read_1(void* /* System.IO.StreamReader */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Read(bufferConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_ReadToEnd")]
	internal static byte* /* System.String */ System_IO_StreamReader_ReadToEnd(void* /* System.IO.StreamReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ReadToEnd();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_ReadBlock")]
	internal static int /* System.Int32 */ System_IO_StreamReader_ReadBlock(void* /* System.IO.StreamReader */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			System.Int32 __returnValue = __selfConverted.ReadBlock(bufferConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_ReadLine")]
	internal static byte* /* System.String */ System_IO_StreamReader_ReadLine(void* /* System.IO.StreamReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ReadLine();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create(void* /* System.IO.Stream */ stream, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(streamConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_1")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_1(void* /* System.IO.Stream */ stream, byte /* System.Boolean */ detectEncodingFromByteOrderMarks, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
		System.Boolean detectEncodingFromByteOrderMarksConverted = detectEncodingFromByteOrderMarks.ToBool();
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(streamConverted, detectEncodingFromByteOrderMarksConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_2")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_2(void* /* System.IO.Stream */ stream, void* /* System.Text.Encoding */ encoding, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(streamConverted, encodingConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_3")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_3(void* /* System.IO.Stream */ stream, void* /* System.Text.Encoding */ encoding, byte /* System.Boolean */ detectEncodingFromByteOrderMarks, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
		System.Boolean detectEncodingFromByteOrderMarksConverted = detectEncodingFromByteOrderMarks.ToBool();
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(streamConverted, encodingConverted, detectEncodingFromByteOrderMarksConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_4")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_4(void* /* System.IO.Stream */ stream, void* /* System.Text.Encoding */ encoding, byte /* System.Boolean */ detectEncodingFromByteOrderMarks, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
		System.Boolean detectEncodingFromByteOrderMarksConverted = detectEncodingFromByteOrderMarks.ToBool();
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(streamConverted, encodingConverted, detectEncodingFromByteOrderMarksConverted, bufferSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_5")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_5(void* /* System.IO.Stream */ stream, void* /* System.Text.Encoding */ encoding, byte /* System.Boolean */ detectEncodingFromByteOrderMarks, int /* System.Int32 */ bufferSize, byte /* System.Boolean */ leaveOpen, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
		System.Boolean detectEncodingFromByteOrderMarksConverted = detectEncodingFromByteOrderMarks.ToBool();
		System.Boolean leaveOpenConverted = leaveOpen.ToBool();
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(streamConverted, encodingConverted, detectEncodingFromByteOrderMarksConverted, bufferSize, leaveOpenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_6")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_6(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_7")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_7(byte* /* System.String */ path, byte /* System.Boolean */ detectEncodingFromByteOrderMarks, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Boolean detectEncodingFromByteOrderMarksConverted = detectEncodingFromByteOrderMarks.ToBool();
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(pathConverted, detectEncodingFromByteOrderMarksConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_8")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_8(byte* /* System.String */ path, void* /* System.Text.Encoding */ encoding, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(pathConverted, encodingConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_9")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_9(byte* /* System.String */ path, void* /* System.Text.Encoding */ encoding, byte /* System.Boolean */ detectEncodingFromByteOrderMarks, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
		System.Boolean detectEncodingFromByteOrderMarksConverted = detectEncodingFromByteOrderMarks.ToBool();
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(pathConverted, encodingConverted, detectEncodingFromByteOrderMarksConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_10")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_10(byte* /* System.String */ path, void* /* System.Text.Encoding */ encoding, byte /* System.Boolean */ detectEncodingFromByteOrderMarks, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
		System.Boolean detectEncodingFromByteOrderMarksConverted = detectEncodingFromByteOrderMarks.ToBool();
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(pathConverted, encodingConverted, detectEncodingFromByteOrderMarksConverted, bufferSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_11")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_11(byte* /* System.String */ path, void* /* System.IO.FileStreamOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.IO.FileStreamOptions optionsConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(options);
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(pathConverted, optionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Create_12")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Create_12(byte* /* System.String */ path, void* /* System.Text.Encoding */ encoding, byte /* System.Boolean */ detectEncodingFromByteOrderMarks, void* /* System.IO.FileStreamOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
		System.Boolean detectEncodingFromByteOrderMarksConverted = detectEncodingFromByteOrderMarks.ToBool();
		System.IO.FileStreamOptions optionsConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(options);
	
	    try {
			System.IO.StreamReader __returnValue = new System.IO.StreamReader(pathConverted, encodingConverted, detectEncodingFromByteOrderMarksConverted, optionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_CurrentEncoding_Get")]
	internal static void* /* System.Text.Encoding */ System_IO_StreamReader_CurrentEncoding_Get(void* /* System.IO.StreamReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.CurrentEncoding;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_BaseStream_Get")]
	internal static void* /* System.IO.Stream */ System_IO_StreamReader_BaseStream_Get(void* /* System.IO.StreamReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
	
	    try {
			System.IO.Stream __returnValue = __selfConverted.BaseStream;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_EndOfStream_Get")]
	internal static byte /* System.Boolean */ System_IO_StreamReader_EndOfStream_Get(void* /* System.IO.StreamReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamReader __selfConverted = InteropUtils.GetInstance<System.IO.StreamReader>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.EndOfStream;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Null_Get")]
	internal static void* /* System.IO.StreamReader */ System_IO_StreamReader_Null_Get()
	{
	
		System.IO.StreamReader __returnValue = System.IO.StreamReader.Null;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_TypeOf")]
	internal static void* /* System.Type */ System_IO_StreamReader_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.StreamReader);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamReader_Destroy")]
	internal static void /* System.Void */ System_IO_StreamReader_Destroy(void* /* System.IO.StreamReader */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_TextReader
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_Close")]
	internal static void /* System.Void */ System_IO_TextReader_Close(void* /* System.IO.TextReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextReader __selfConverted = InteropUtils.GetInstance<System.IO.TextReader>(__self);
	
	
	    try {
			__selfConverted.Close();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_Dispose")]
	internal static void /* System.Void */ System_IO_TextReader_Dispose(void* /* System.IO.TextReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextReader __selfConverted = InteropUtils.GetInstance<System.IO.TextReader>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_Peek")]
	internal static int /* System.Int32 */ System_IO_TextReader_Peek(void* /* System.IO.TextReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextReader __selfConverted = InteropUtils.GetInstance<System.IO.TextReader>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Peek();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_Read")]
	internal static int /* System.Int32 */ System_IO_TextReader_Read(void* /* System.IO.TextReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextReader __selfConverted = InteropUtils.GetInstance<System.IO.TextReader>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Read();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_Read_1")]
	internal static int /* System.Int32 */ System_IO_TextReader_Read_1(void* /* System.IO.TextReader */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextReader __selfConverted = InteropUtils.GetInstance<System.IO.TextReader>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			System.Int32 __returnValue = __selfConverted.Read(bufferConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_ReadToEnd")]
	internal static byte* /* System.String */ System_IO_TextReader_ReadToEnd(void* /* System.IO.TextReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextReader __selfConverted = InteropUtils.GetInstance<System.IO.TextReader>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ReadToEnd();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_ReadBlock")]
	internal static int /* System.Int32 */ System_IO_TextReader_ReadBlock(void* /* System.IO.TextReader */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextReader __selfConverted = InteropUtils.GetInstance<System.IO.TextReader>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			System.Int32 __returnValue = __selfConverted.ReadBlock(bufferConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_ReadLine")]
	internal static byte* /* System.String */ System_IO_TextReader_ReadLine(void* /* System.IO.TextReader */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextReader __selfConverted = InteropUtils.GetInstance<System.IO.TextReader>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ReadLine();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_Synchronized")]
	internal static void* /* System.IO.TextReader */ System_IO_TextReader_Synchronized(void* /* System.IO.TextReader */ reader, void** /* System.Exception */ __outException)
	{
		System.IO.TextReader readerConverted = InteropUtils.GetInstance<System.IO.TextReader>(reader);
	
	    try {
			System.IO.TextReader __returnValue = System.IO.TextReader.Synchronized(readerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_Null_Get")]
	internal static void* /* System.IO.TextReader */ System_IO_TextReader_Null_Get()
	{
	
		System.IO.TextReader __returnValue = System.IO.TextReader.Null;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_TypeOf")]
	internal static void* /* System.Type */ System_IO_TextReader_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.TextReader);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextReader_Destroy")]
	internal static void /* System.Void */ System_IO_TextReader_Destroy(void* /* System.IO.TextReader */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_StreamWriter
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Close")]
	internal static void /* System.Void */ System_IO_StreamWriter_Close(void* /* System.IO.StreamWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			__selfConverted.Close();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_DisposeAsync")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_IO_StreamWriter_DisposeAsync(void* /* System.IO.StreamWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.DisposeAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Flush")]
	internal static void /* System.Void */ System_IO_StreamWriter_Flush(void* /* System.IO.StreamWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			__selfConverted.Flush();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Write")]
	internal static void /* System.Void */ System_IO_StreamWriter_Write(void* /* System.IO.StreamWriter */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			__selfConverted.Write(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Write_1")]
	internal static void /* System.Void */ System_IO_StreamWriter_Write_1(void* /* System.IO.StreamWriter */ __self, void* /* System.Char[] */ buffer, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			__selfConverted.Write(bufferConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Write_2")]
	internal static void /* System.Void */ System_IO_StreamWriter_Write_2(void* /* System.IO.StreamWriter */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			__selfConverted.Write(bufferConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Write_3")]
	internal static void /* System.Void */ System_IO_StreamWriter_Write_3(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			__selfConverted.Write(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteLine")]
	internal static void /* System.Void */ System_IO_StreamWriter_WriteLine(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			__selfConverted.WriteLine(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Write_4")]
	internal static void /* System.Void */ System_IO_StreamWriter_Write_4(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			__selfConverted.Write(formatConverted, arg0Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Write_5")]
	internal static void /* System.Void */ System_IO_StreamWriter_Write_5(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			__selfConverted.Write(formatConverted, arg0Converted, arg1Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Write_6")]
	internal static void /* System.Void */ System_IO_StreamWriter_Write_6(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			__selfConverted.Write(formatConverted, arg0Converted, arg1Converted, arg2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Write_7")]
	internal static void /* System.Void */ System_IO_StreamWriter_Write_7(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ format, void* /* System.Object[] */ arg, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object[] argConverted = InteropUtils.GetInstance<System.Object[]>(arg);
	
	    try {
			__selfConverted.Write(formatConverted, argConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteLine_1")]
	internal static void /* System.Void */ System_IO_StreamWriter_WriteLine_1(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			__selfConverted.WriteLine(formatConverted, arg0Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteLine_2")]
	internal static void /* System.Void */ System_IO_StreamWriter_WriteLine_2(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			__selfConverted.WriteLine(formatConverted, arg0Converted, arg1Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteLine_3")]
	internal static void /* System.Void */ System_IO_StreamWriter_WriteLine_3(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			__selfConverted.WriteLine(formatConverted, arg0Converted, arg1Converted, arg2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteLine_4")]
	internal static void /* System.Void */ System_IO_StreamWriter_WriteLine_4(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ format, void* /* System.Object[] */ arg, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object[] argConverted = InteropUtils.GetInstance<System.Object[]>(arg);
	
	    try {
			__selfConverted.WriteLine(formatConverted, argConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_StreamWriter_WriteAsync(void* /* System.IO.StreamWriter */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteAsync_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_StreamWriter_WriteAsync_1(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteAsync_2")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_StreamWriter_WriteAsync_2(void* /* System.IO.StreamWriter */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(bufferConverted, index, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteLineAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_StreamWriter_WriteLineAsync(void* /* System.IO.StreamWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteLineAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteLineAsync_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_StreamWriter_WriteLineAsync_1(void* /* System.IO.StreamWriter */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteLineAsync(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteLineAsync_2")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_StreamWriter_WriteLineAsync_2(void* /* System.IO.StreamWriter */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteLineAsync(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_WriteLineAsync_3")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_StreamWriter_WriteLineAsync_3(void* /* System.IO.StreamWriter */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteLineAsync(bufferConverted, index, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_FlushAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_StreamWriter_FlushAsync(void* /* System.IO.StreamWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.FlushAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Create")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Create(void* /* System.IO.Stream */ stream, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
	
	    try {
			System.IO.StreamWriter __returnValue = new System.IO.StreamWriter(streamConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Create_1")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Create_1(void* /* System.IO.Stream */ stream, void* /* System.Text.Encoding */ encoding, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.IO.StreamWriter __returnValue = new System.IO.StreamWriter(streamConverted, encodingConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Create_2")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Create_2(void* /* System.IO.Stream */ stream, void* /* System.Text.Encoding */ encoding, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.IO.StreamWriter __returnValue = new System.IO.StreamWriter(streamConverted, encodingConverted, bufferSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Create_3")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Create_3(void* /* System.IO.Stream */ stream, void* /* System.Text.Encoding */ encoding, int /* System.Int32 */ bufferSize, byte /* System.Boolean */ leaveOpen, void** /* System.Exception */ __outException)
	{
		System.IO.Stream streamConverted = InteropUtils.GetInstance<System.IO.Stream>(stream);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
		System.Boolean leaveOpenConverted = leaveOpen.ToBool();
	
	    try {
			System.IO.StreamWriter __returnValue = new System.IO.StreamWriter(streamConverted, encodingConverted, bufferSize, leaveOpenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Create_4")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Create_4(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.StreamWriter __returnValue = new System.IO.StreamWriter(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Create_5")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Create_5(byte* /* System.String */ path, byte /* System.Boolean */ append, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Boolean appendConverted = append.ToBool();
	
	    try {
			System.IO.StreamWriter __returnValue = new System.IO.StreamWriter(pathConverted, appendConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Create_6")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Create_6(byte* /* System.String */ path, byte /* System.Boolean */ append, void* /* System.Text.Encoding */ encoding, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Boolean appendConverted = append.ToBool();
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.IO.StreamWriter __returnValue = new System.IO.StreamWriter(pathConverted, appendConverted, encodingConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Create_7")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Create_7(byte* /* System.String */ path, byte /* System.Boolean */ append, void* /* System.Text.Encoding */ encoding, int /* System.Int32 */ bufferSize, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Boolean appendConverted = append.ToBool();
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
	
	    try {
			System.IO.StreamWriter __returnValue = new System.IO.StreamWriter(pathConverted, appendConverted, encodingConverted, bufferSize);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Create_8")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Create_8(byte* /* System.String */ path, void* /* System.IO.FileStreamOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.IO.FileStreamOptions optionsConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(options);
	
	    try {
			System.IO.StreamWriter __returnValue = new System.IO.StreamWriter(pathConverted, optionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Create_9")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Create_9(byte* /* System.String */ path, void* /* System.Text.Encoding */ encoding, void* /* System.IO.FileStreamOptions */ options, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Text.Encoding encodingConverted = InteropUtils.GetInstance<System.Text.Encoding>(encoding);
		System.IO.FileStreamOptions optionsConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(options);
	
	    try {
			System.IO.StreamWriter __returnValue = new System.IO.StreamWriter(pathConverted, encodingConverted, optionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_AutoFlush_Get")]
	internal static byte /* System.Boolean */ System_IO_StreamWriter_AutoFlush_Get(void* /* System.IO.StreamWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.AutoFlush;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_AutoFlush_Set")]
	internal static void /* System.Void */ System_IO_StreamWriter_AutoFlush_Set(void* /* System.IO.StreamWriter */ __self, byte /* System.Boolean */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			__selfConverted.AutoFlush = __value.ToBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_BaseStream_Get")]
	internal static void* /* System.IO.Stream */ System_IO_StreamWriter_BaseStream_Get(void* /* System.IO.StreamWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			System.IO.Stream __returnValue = __selfConverted.BaseStream;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Encoding_Get")]
	internal static void* /* System.Text.Encoding */ System_IO_StreamWriter_Encoding_Get(void* /* System.IO.StreamWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.StreamWriter __selfConverted = InteropUtils.GetInstance<System.IO.StreamWriter>(__self);
	
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.Encoding;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Null_Get")]
	internal static void* /* System.IO.StreamWriter */ System_IO_StreamWriter_Null_Get()
	{
	
		System.IO.StreamWriter __returnValue = System.IO.StreamWriter.Null;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_TypeOf")]
	internal static void* /* System.Type */ System_IO_StreamWriter_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.StreamWriter);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_StreamWriter_Destroy")]
	internal static void /* System.Void */ System_IO_StreamWriter_Destroy(void* /* System.IO.StreamWriter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_TextWriter
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Close")]
	internal static void /* System.Void */ System_IO_TextWriter_Close(void* /* System.IO.TextWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.Close();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Dispose")]
	internal static void /* System.Void */ System_IO_TextWriter_Dispose(void* /* System.IO.TextWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_DisposeAsync")]
	internal static void* /* System.Threading.Tasks.ValueTask */ System_IO_TextWriter_DisposeAsync(void* /* System.IO.TextWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			System.Threading.Tasks.ValueTask __returnValue = __selfConverted.DisposeAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Flush")]
	internal static void /* System.Void */ System_IO_TextWriter_Flush(void* /* System.IO.TextWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.Flush();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write")]
	internal static void /* System.Void */ System_IO_TextWriter_Write(void* /* System.IO.TextWriter */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.Write(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_1")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_1(void* /* System.IO.TextWriter */ __self, void* /* System.Char[] */ buffer, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			__selfConverted.Write(bufferConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_2")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_2(void* /* System.IO.TextWriter */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			__selfConverted.Write(bufferConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_3")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_3(void* /* System.IO.TextWriter */ __self, byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			__selfConverted.Write(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_4")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_4(void* /* System.IO.TextWriter */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.Write(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_5")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_5(void* /* System.IO.TextWriter */ __self, uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.Write(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_6")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_6(void* /* System.IO.TextWriter */ __self, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.Write(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_7")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_7(void* /* System.IO.TextWriter */ __self, ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.Write(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_8")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_8(void* /* System.IO.TextWriter */ __self, float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.Write(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_9")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_9(void* /* System.IO.TextWriter */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.Write(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_10")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_10(void* /* System.IO.TextWriter */ __self, void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			__selfConverted.Write(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_11")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_11(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			__selfConverted.Write(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_12")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_12(void* /* System.IO.TextWriter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.Write(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_13")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_13(void* /* System.IO.TextWriter */ __self, void* /* System.Text.StringBuilder */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Text.StringBuilder valueConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(value);
	
	    try {
			__selfConverted.Write(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_14")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_14(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			__selfConverted.Write(formatConverted, arg0Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_15")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_15(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			__selfConverted.Write(formatConverted, arg0Converted, arg1Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_16")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_16(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			__selfConverted.Write(formatConverted, arg0Converted, arg1Converted, arg2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Write_17")]
	internal static void /* System.Void */ System_IO_TextWriter_Write_17(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ format, void* /* System.Object[] */ arg, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object[] argConverted = InteropUtils.GetInstance<System.Object[]>(arg);
	
	    try {
			__selfConverted.Write(formatConverted, argConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine(void* /* System.IO.TextWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.WriteLine();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_1")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_1(void* /* System.IO.TextWriter */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.WriteLine(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_2")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_2(void* /* System.IO.TextWriter */ __self, void* /* System.Char[] */ buffer, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			__selfConverted.WriteLine(bufferConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_3")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_3(void* /* System.IO.TextWriter */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			__selfConverted.WriteLine(bufferConverted, index, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_4")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_4(void* /* System.IO.TextWriter */ __self, byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			__selfConverted.WriteLine(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_5")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_5(void* /* System.IO.TextWriter */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.WriteLine(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_6")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_6(void* /* System.IO.TextWriter */ __self, uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.WriteLine(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_7")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_7(void* /* System.IO.TextWriter */ __self, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.WriteLine(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_8")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_8(void* /* System.IO.TextWriter */ __self, ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.WriteLine(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_9")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_9(void* /* System.IO.TextWriter */ __self, float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.WriteLine(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_10")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_10(void* /* System.IO.TextWriter */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.WriteLine(value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_11")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_11(void* /* System.IO.TextWriter */ __self, void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			__selfConverted.WriteLine(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_12")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_12(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			__selfConverted.WriteLine(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_13")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_13(void* /* System.IO.TextWriter */ __self, void* /* System.Text.StringBuilder */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Text.StringBuilder valueConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(value);
	
	    try {
			__selfConverted.WriteLine(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_14")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_14(void* /* System.IO.TextWriter */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			__selfConverted.WriteLine(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_15")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_15(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			__selfConverted.WriteLine(formatConverted, arg0Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_16")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_16(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			__selfConverted.WriteLine(formatConverted, arg0Converted, arg1Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_17")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_17(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			__selfConverted.WriteLine(formatConverted, arg0Converted, arg1Converted, arg2Converted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLine_18")]
	internal static void /* System.Void */ System_IO_TextWriter_WriteLine_18(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ format, void* /* System.Object[] */ arg, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object[] argConverted = InteropUtils.GetInstance<System.Object[]>(arg);
	
	    try {
			__selfConverted.WriteLine(formatConverted, argConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteAsync(void* /* System.IO.TextWriter */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteAsync_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteAsync_1(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteAsync_2")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteAsync_2(void* /* System.IO.TextWriter */ __self, void* /* System.Text.StringBuilder */ value, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Text.StringBuilder valueConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(value);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(valueConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteAsync_3")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteAsync_3(void* /* System.IO.TextWriter */ __self, void* /* System.Char[] */ buffer, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(bufferConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteAsync_4")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteAsync_4(void* /* System.IO.TextWriter */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteAsync(bufferConverted, index, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLineAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteLineAsync(void* /* System.IO.TextWriter */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteLineAsync(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLineAsync_1")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteLineAsync_1(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteLineAsync(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLineAsync_2")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteLineAsync_2(void* /* System.IO.TextWriter */ __self, void* /* System.Text.StringBuilder */ value, void* /* System.Threading.CancellationToken */ cancellationToken, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Text.StringBuilder valueConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(value);
		System.Threading.CancellationToken cancellationTokenConverted = InteropUtils.GetInstance<System.Threading.CancellationToken>(cancellationToken);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteLineAsync(valueConverted, cancellationTokenConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLineAsync_3")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteLineAsync_3(void* /* System.IO.TextWriter */ __self, void* /* System.Char[] */ buffer, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteLineAsync(bufferConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLineAsync_4")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteLineAsync_4(void* /* System.IO.TextWriter */ __self, void* /* System.Char[] */ buffer, int /* System.Int32 */ index, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
		System.Char[] bufferConverted = InteropUtils.GetInstance<System.Char[]>(buffer);
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteLineAsync(bufferConverted, index, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_WriteLineAsync_5")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_WriteLineAsync_5(void* /* System.IO.TextWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.WriteLineAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_FlushAsync")]
	internal static void* /* System.Threading.Tasks.Task */ System_IO_TextWriter_FlushAsync(void* /* System.IO.TextWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			System.Threading.Tasks.Task __returnValue = __selfConverted.FlushAsync();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Synchronized")]
	internal static void* /* System.IO.TextWriter */ System_IO_TextWriter_Synchronized(void* /* System.IO.TextWriter */ writer, void** /* System.Exception */ __outException)
	{
		System.IO.TextWriter writerConverted = InteropUtils.GetInstance<System.IO.TextWriter>(writer);
	
	    try {
			System.IO.TextWriter __returnValue = System.IO.TextWriter.Synchronized(writerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_FormatProvider_Get")]
	internal static void* /* System.IFormatProvider */ System_IO_TextWriter_FormatProvider_Get(void* /* System.IO.TextWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			System.IFormatProvider __returnValue = __selfConverted.FormatProvider;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Encoding_Get")]
	internal static void* /* System.Text.Encoding */ System_IO_TextWriter_Encoding_Get(void* /* System.IO.TextWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			System.Text.Encoding __returnValue = __selfConverted.Encoding;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_NewLine_Get")]
	internal static byte* /* System.String */ System_IO_TextWriter_NewLine_Get(void* /* System.IO.TextWriter */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.NewLine;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_NewLine_Set")]
	internal static void /* System.Void */ System_IO_TextWriter_NewLine_Set(void* /* System.IO.TextWriter */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.TextWriter __selfConverted = InteropUtils.GetInstance<System.IO.TextWriter>(__self);
	
	
	    try {
			__selfConverted.NewLine = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Null_Get")]
	internal static void* /* System.IO.TextWriter */ System_IO_TextWriter_Null_Get()
	{
	
		System.IO.TextWriter __returnValue = System.IO.TextWriter.Null;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_TypeOf")]
	internal static void* /* System.Type */ System_IO_TextWriter_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.TextWriter);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_TextWriter_Destroy")]
	internal static void /* System.Void */ System_IO_TextWriter_Destroy(void* /* System.IO.TextWriter */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_StringBuilder
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_EnsureCapacity")]
	internal static int /* System.Int32 */ System_Text_StringBuilder_EnsureCapacity(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ capacity, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.EnsureCapacity(capacity);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_ToString")]
	internal static byte* /* System.String */ System_Text_StringBuilder_ToString(void* /* System.Text.StringBuilder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_ToString_1")]
	internal static byte* /* System.String */ System_Text_StringBuilder_ToString_1(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString(startIndex, length);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Clear")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Clear(void* /* System.Text.StringBuilder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Clear();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_GetChunks")]
	internal static void* /* System.Text.StringBuilder.ChunkEnumerator */ System_Text_StringBuilder_GetChunks(void* /* System.Text.StringBuilder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder.ChunkEnumerator __returnValue = __selfConverted.GetChunks();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append(void* /* System.Text.StringBuilder */ __self, char /* System.Char */ value, int /* System.Int32 */ repeatCount, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value, repeatCount);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_1")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_1(void* /* System.Text.StringBuilder */ __self, void* /* System.Char[] */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ charCount, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Char[] valueConverted = InteropUtils.GetInstance<System.Char[]>(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(valueConverted, startIndex, charCount);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_2")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_2(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_3")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_3(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(valueConverted, startIndex, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_4")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_4(void* /* System.Text.StringBuilder */ __self, void* /* System.Text.StringBuilder */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Text.StringBuilder valueConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_5")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_5(void* /* System.Text.StringBuilder */ __self, void* /* System.Text.StringBuilder */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Text.StringBuilder valueConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(valueConverted, startIndex, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendLine")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendLine(void* /* System.Text.StringBuilder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendLine();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendLine_1")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendLine_1(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendLine(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_CopyTo")]
	internal static void /* System.Void */ System_Text_StringBuilder_CopyTo(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ sourceIndex, void* /* System.Char[] */ destination, int /* System.Int32 */ destinationIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Char[] destinationConverted = InteropUtils.GetInstance<System.Char[]>(destination);
	
	    try {
			__selfConverted.CopyTo(sourceIndex, destinationConverted, destinationIndex, count);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, byte* /* System.String */ value, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, valueConverted, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Remove")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Remove(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Remove(startIndex, length);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_6")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_6(void* /* System.Text.StringBuilder */ __self, byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_7")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_7(void* /* System.Text.StringBuilder */ __self, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_8")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_8(void* /* System.Text.StringBuilder */ __self, sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_9")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_9(void* /* System.Text.StringBuilder */ __self, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_10")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_10(void* /* System.Text.StringBuilder */ __self, short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_11")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_11(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_12")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_12(void* /* System.Text.StringBuilder */ __self, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_13")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_13(void* /* System.Text.StringBuilder */ __self, float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_14")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_14(void* /* System.Text.StringBuilder */ __self, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_15")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_15(void* /* System.Text.StringBuilder */ __self, void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_16")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_16(void* /* System.Text.StringBuilder */ __self, ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_17")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_17(void* /* System.Text.StringBuilder */ __self, uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_18")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_18(void* /* System.Text.StringBuilder */ __self, ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_19")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_19(void* /* System.Text.StringBuilder */ __self, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_20")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_20(void* /* System.Text.StringBuilder */ __self, void* /* System.Char[] */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Char[] valueConverted = InteropUtils.GetInstance<System.Char[]>(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_21")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_21(void* /* System.Text.StringBuilder */ __self, void** /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ handler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Text.StringBuilder.AppendInterpolatedStringHandler handlerConverted;
	
		if (handler is not null) {
			handlerConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>((*handler));
		} else {
			handlerConverted = default(System.Text.StringBuilder.AppendInterpolatedStringHandler);
		}
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(ref handlerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (handler is not null) {
				*handler = handlerConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Append_22")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Append_22(void* /* System.Text.StringBuilder */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ handler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Text.StringBuilder.AppendInterpolatedStringHandler handlerConverted;
	
		if (handler is not null) {
			handlerConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>((*handler));
		} else {
			handlerConverted = default(System.Text.StringBuilder.AppendInterpolatedStringHandler);
		}
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Append(providerConverted, ref handlerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (handler is not null) {
				*handler = handlerConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendLine_2")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendLine_2(void* /* System.Text.StringBuilder */ __self, void** /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ handler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Text.StringBuilder.AppendInterpolatedStringHandler handlerConverted;
	
		if (handler is not null) {
			handlerConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>((*handler));
		} else {
			handlerConverted = default(System.Text.StringBuilder.AppendInterpolatedStringHandler);
		}
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendLine(ref handlerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (handler is not null) {
				*handler = handlerConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendLine_3")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendLine_3(void* /* System.Text.StringBuilder */ __self, void* /* System.IFormatProvider */ provider, void** /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ handler, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Text.StringBuilder.AppendInterpolatedStringHandler handlerConverted;
	
		if (handler is not null) {
			handlerConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>((*handler));
		} else {
			handlerConverted = default(System.Text.StringBuilder.AppendInterpolatedStringHandler);
		}
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendLine(providerConverted, ref handlerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (handler is not null) {
				*handler = handlerConverted.AllocateGCHandleAndGetAddress();
			}
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendJoin")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendJoin(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ separator, void* /* System.Object[] */ values, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String separatorConverted = InteropUtils.ToDotNetString(separator);
		System.Object[] valuesConverted = InteropUtils.GetInstance<System.Object[]>(values);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendJoin(separatorConverted, valuesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendJoin_1")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendJoin_1(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ separator, void* /* System.String[] */ values, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String separatorConverted = InteropUtils.ToDotNetString(separator);
		System.String[] valuesConverted = InteropUtils.GetInstance<System.String[]>(values);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendJoin(separatorConverted, valuesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendJoin_2")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendJoin_2(void* /* System.Text.StringBuilder */ __self, char /* System.Char */ separator, void* /* System.Object[] */ values, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Object[] valuesConverted = InteropUtils.GetInstance<System.Object[]>(values);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendJoin(separator, valuesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendJoin_3")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendJoin_3(void* /* System.Text.StringBuilder */ __self, char /* System.Char */ separator, void* /* System.String[] */ values, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String[] valuesConverted = InteropUtils.GetInstance<System.String[]>(values);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendJoin(separator, valuesConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_1")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_1(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_2")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_2(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, byte /* System.Boolean */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Boolean valueConverted = value.ToBool();
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_3")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_3(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, sbyte /* System.SByte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_4")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_4(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, byte /* System.Byte */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_5")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_5(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, short /* System.Int16 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_6")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_6(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, char /* System.Char */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_7")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_7(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, void* /* System.Char[] */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Char[] valueConverted = InteropUtils.GetInstance<System.Char[]>(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_8")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_8(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, void* /* System.Char[] */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ charCount, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Char[] valueConverted = InteropUtils.GetInstance<System.Char[]>(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, valueConverted, startIndex, charCount);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_9")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_9(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, int /* System.Int32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_10")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_10(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, long /* System.Int64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_11")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_11(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, float /* System.Single */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_12")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_12(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, double /* System.Double */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_13")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_13(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, void* /* System.Decimal */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Decimal valueConverted = InteropUtils.GetInstance<System.Decimal>(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_14")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_14(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, ushort /* System.UInt16 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_15")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_15(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, uint /* System.UInt32 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_16")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_16(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, ulong /* System.UInt64 */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, value);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Insert_17")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Insert_17(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ index, void* /* System.Object */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Insert(index, valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendFormat(formatConverted, arg0Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_1")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_1(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendFormat(formatConverted, arg0Converted, arg1Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_2")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_2(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendFormat(formatConverted, arg0Converted, arg1Converted, arg2Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_3")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_3(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ format, void* /* System.Object[] */ args, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendFormat(formatConverted, argsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_4")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_4(void* /* System.Text.StringBuilder */ __self, void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object */ arg0, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendFormat(providerConverted, formatConverted, arg0Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_5")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_5(void* /* System.Text.StringBuilder */ __self, void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendFormat(providerConverted, formatConverted, arg0Converted, arg1Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_6")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_6(void* /* System.Text.StringBuilder */ __self, void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object */ arg0, void* /* System.Object */ arg1, void* /* System.Object */ arg2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendFormat(providerConverted, formatConverted, arg0Converted, arg1Converted, arg2Converted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_7")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_7(void* /* System.Text.StringBuilder */ __self, void* /* System.IFormatProvider */ provider, byte* /* System.String */ format, void* /* System.Object[] */ args, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendFormat(providerConverted, formatConverted, argsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_A1")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_A1(void* /* System.Type */ TArg0, void* /* System.Text.StringBuilder */ __self, void* /* System.IFormatProvider */ provider, void* /* System.Text.CompositeFormat */ format, void* /* TArg0 */ arg0, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Type TArg0Converted = InteropUtils.GetInstance<System.Type>(TArg0);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Text.CompositeFormat formatConverted = InteropUtils.GetInstance<System.Text.CompositeFormat>(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Text.StringBuilder);
			System.String __nameOfMethodForGenericCall = nameof(System.Text.StringBuilder.AppendFormat);
			System.Object? __methodTargetForGenericCall = __selfConverted;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { providerConverted, formatConverted, arg0Converted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IFormatProvider), typeof(System.Text.CompositeFormat), TArg0Converted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TArg0Converted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method AppendFormat not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Text.StringBuilder __returnValue = (System.Text.StringBuilder)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_A2")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_A2(void* /* System.Type */ TArg0, void* /* System.Type */ TArg1, void* /* System.Text.StringBuilder */ __self, void* /* System.IFormatProvider */ provider, void* /* System.Text.CompositeFormat */ format, void* /* TArg0 */ arg0, void* /* TArg1 */ arg1, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Type TArg0Converted = InteropUtils.GetInstance<System.Type>(TArg0);
		System.Type TArg1Converted = InteropUtils.GetInstance<System.Type>(TArg1);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Text.CompositeFormat formatConverted = InteropUtils.GetInstance<System.Text.CompositeFormat>(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Text.StringBuilder);
			System.String __nameOfMethodForGenericCall = nameof(System.Text.StringBuilder.AppendFormat);
			System.Object? __methodTargetForGenericCall = __selfConverted;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { providerConverted, formatConverted, arg0Converted, arg1Converted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IFormatProvider), typeof(System.Text.CompositeFormat), TArg0Converted, TArg1Converted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TArg0Converted, TArg1Converted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 2, __parameterTypesForGenericCall) ?? throw new Exception("Method AppendFormat not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Text.StringBuilder __returnValue = (System.Text.StringBuilder)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_A3")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_A3(void* /* System.Type */ TArg0, void* /* System.Type */ TArg1, void* /* System.Type */ TArg2, void* /* System.Text.StringBuilder */ __self, void* /* System.IFormatProvider */ provider, void* /* System.Text.CompositeFormat */ format, void* /* TArg0 */ arg0, void* /* TArg1 */ arg1, void* /* TArg2 */ arg2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Type TArg0Converted = InteropUtils.GetInstance<System.Type>(TArg0);
		System.Type TArg1Converted = InteropUtils.GetInstance<System.Type>(TArg1);
		System.Type TArg2Converted = InteropUtils.GetInstance<System.Type>(TArg2);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Text.CompositeFormat formatConverted = InteropUtils.GetInstance<System.Text.CompositeFormat>(format);
		System.Object arg0Converted = InteropUtils.GetInstance<System.Object>(arg0);
		System.Object arg1Converted = InteropUtils.GetInstance<System.Object>(arg1);
		System.Object arg2Converted = InteropUtils.GetInstance<System.Object>(arg2);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Text.StringBuilder);
			System.String __nameOfMethodForGenericCall = nameof(System.Text.StringBuilder.AppendFormat);
			System.Object? __methodTargetForGenericCall = __selfConverted;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { providerConverted, formatConverted, arg0Converted, arg1Converted, arg2Converted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IFormatProvider), typeof(System.Text.CompositeFormat), TArg0Converted, TArg1Converted, TArg2Converted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TArg0Converted, TArg1Converted, TArg2Converted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 3, __parameterTypesForGenericCall) ?? throw new Exception("Method AppendFormat not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Text.StringBuilder __returnValue = (System.Text.StringBuilder)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendFormat_8")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_AppendFormat_8(void* /* System.Text.StringBuilder */ __self, void* /* System.IFormatProvider */ provider, void* /* System.Text.CompositeFormat */ format, void* /* System.Object[] */ args, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
		System.Text.CompositeFormat formatConverted = InteropUtils.GetInstance<System.Text.CompositeFormat>(format);
		System.Object[] argsConverted = InteropUtils.GetInstance<System.Object[]>(args);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.AppendFormat(providerConverted, formatConverted, argsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Replace")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Replace(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ oldValue, byte* /* System.String */ newValue, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String oldValueConverted = InteropUtils.ToDotNetString(oldValue);
		System.String newValueConverted = InteropUtils.ToDotNetString(newValue);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Replace(oldValueConverted, newValueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Equals")]
	internal static byte /* System.Boolean */ System_Text_StringBuilder_Equals(void* /* System.Text.StringBuilder */ __self, void* /* System.Text.StringBuilder */ sb, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.Text.StringBuilder sbConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(sb);
	
	    try {
			System.Boolean __returnValue = __selfConverted.Equals(sbConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Replace_1")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Replace_1(void* /* System.Text.StringBuilder */ __self, byte* /* System.String */ oldValue, byte* /* System.String */ newValue, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
		System.String oldValueConverted = InteropUtils.ToDotNetString(oldValue);
		System.String newValueConverted = InteropUtils.ToDotNetString(newValue);
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Replace(oldValueConverted, newValueConverted, startIndex, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Replace_2")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Replace_2(void* /* System.Text.StringBuilder */ __self, char /* System.Char */ oldChar, char /* System.Char */ newChar, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Replace(oldChar, newChar);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Replace_3")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Replace_3(void* /* System.Text.StringBuilder */ __self, char /* System.Char */ oldChar, char /* System.Char */ newChar, int /* System.Int32 */ startIndex, int /* System.Int32 */ count, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Text.StringBuilder __returnValue = __selfConverted.Replace(oldChar, newChar, startIndex, count);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Create")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.StringBuilder __returnValue = new System.Text.StringBuilder();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Create_1")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Create_1(int /* System.Int32 */ capacity, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.StringBuilder __returnValue = new System.Text.StringBuilder(capacity);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Create_2")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Create_2(byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Text.StringBuilder __returnValue = new System.Text.StringBuilder(valueConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Create_3")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Create_3(byte* /* System.String */ value, int /* System.Int32 */ capacity, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Text.StringBuilder __returnValue = new System.Text.StringBuilder(valueConverted, capacity);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Create_4")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Create_4(byte* /* System.String */ value, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, int /* System.Int32 */ capacity, void** /* System.Exception */ __outException)
	{
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			System.Text.StringBuilder __returnValue = new System.Text.StringBuilder(valueConverted, startIndex, length, capacity);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Create_5")]
	internal static void* /* System.Text.StringBuilder */ System_Text_StringBuilder_Create_5(int /* System.Int32 */ capacity, int /* System.Int32 */ maxCapacity, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Text.StringBuilder __returnValue = new System.Text.StringBuilder(capacity, maxCapacity);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Capacity_Get")]
	internal static int /* System.Int32 */ System_Text_StringBuilder_Capacity_Get(void* /* System.Text.StringBuilder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Capacity;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Capacity_Set")]
	internal static void /* System.Void */ System_Text_StringBuilder_Capacity_Set(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			__selfConverted.Capacity = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_MaxCapacity_Get")]
	internal static int /* System.Int32 */ System_Text_StringBuilder_MaxCapacity_Get(void* /* System.Text.StringBuilder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MaxCapacity;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Length_Get")]
	internal static int /* System.Int32 */ System_Text_StringBuilder_Length_Get(void* /* System.Text.StringBuilder */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Length_Set")]
	internal static void /* System.Void */ System_Text_StringBuilder_Length_Set(void* /* System.Text.StringBuilder */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(__self);
	
	
	    try {
			__selfConverted.Length = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_TypeOf")]
	internal static void* /* System.Type */ System_Text_StringBuilder_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.StringBuilder);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_Destroy")]
	internal static void /* System.Void */ System_Text_StringBuilder_Destroy(void* /* System.Text.StringBuilder */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_StringBuilder_ChunkEnumerator
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_ChunkEnumerator_GetEnumerator")]
	internal static void* /* System.Text.StringBuilder.ChunkEnumerator */ System_Text_StringBuilder_ChunkEnumerator_GetEnumerator(void* /* System.Text.StringBuilder.ChunkEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder.ChunkEnumerator __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder.ChunkEnumerator>(__self);
	
	
	    try {
			System.Text.StringBuilder.ChunkEnumerator __returnValue = __selfConverted.GetEnumerator();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_ChunkEnumerator_MoveNext")]
	internal static byte /* System.Boolean */ System_Text_StringBuilder_ChunkEnumerator_MoveNext(void* /* System.Text.StringBuilder.ChunkEnumerator */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder.ChunkEnumerator __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder.ChunkEnumerator>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.MoveNext();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_ChunkEnumerator_TypeOf")]
	internal static void* /* System.Type */ System_Text_StringBuilder_ChunkEnumerator_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.StringBuilder.ChunkEnumerator);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_ChunkEnumerator_Destroy")]
	internal static void /* System.Void */ System_Text_StringBuilder_ChunkEnumerator_Destroy(void* /* System.Text.StringBuilder.ChunkEnumerator */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Text_StringBuilder_AppendInterpolatedStringHandler
{
	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendLiteral")]
	internal static void /* System.Void */ System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendLiteral(void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder.AppendInterpolatedStringHandler __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			__selfConverted.AppendLiteral(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1")]
	internal static void /* System.Void */ System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1(void* /* System.Type */ T, void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ __self, void* /* T */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder.AppendInterpolatedStringHandler __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>(__self);
	
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Text.StringBuilder.AppendInterpolatedStringHandler);
			System.String __nameOfMethodForGenericCall = nameof(System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted);
			System.Object? __methodTargetForGenericCall = __selfConverted;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method AppendFormatted not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_1")]
	internal static void /* System.Void */ System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_1(void* /* System.Type */ T, void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ __self, void* /* T */ value, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder.AppendInterpolatedStringHandler __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>(__self);
	
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Text.StringBuilder.AppendInterpolatedStringHandler);
			System.String __nameOfMethodForGenericCall = nameof(System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted);
			System.Object? __methodTargetForGenericCall = __selfConverted;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted, formatConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TConverted, typeof(System.String) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method AppendFormatted not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_2")]
	internal static void /* System.Void */ System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_2(void* /* System.Type */ T, void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ __self, void* /* T */ value, int /* System.Int32 */ alignment, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder.AppendInterpolatedStringHandler __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>(__self);
	
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Text.StringBuilder.AppendInterpolatedStringHandler);
			System.String __nameOfMethodForGenericCall = nameof(System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted);
			System.Object? __methodTargetForGenericCall = __selfConverted;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted, alignment };
			System.Type[] __parameterTypesForGenericCall = new[] { TConverted, typeof(System.Int32) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method AppendFormatted not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_3")]
	internal static void /* System.Void */ System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_A1_3(void* /* System.Type */ T, void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ __self, void* /* T */ value, int /* System.Int32 */ alignment, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder.AppendInterpolatedStringHandler __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>(__self);
	
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Text.StringBuilder.AppendInterpolatedStringHandler);
			System.String __nameOfMethodForGenericCall = nameof(System.Text.StringBuilder.AppendInterpolatedStringHandler.AppendFormatted);
			System.Object? __methodTargetForGenericCall = __selfConverted;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { valueConverted, alignment, formatConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TConverted, typeof(System.Int32), typeof(System.String) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method AppendFormatted not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_1")]
	internal static void /* System.Void */ System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_1(void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ __self, byte* /* System.String */ value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder.AppendInterpolatedStringHandler __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
	
	    try {
			__selfConverted.AppendFormatted(valueConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_2")]
	internal static void /* System.Void */ System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_2(void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ __self, byte* /* System.String */ value, int /* System.Int32 */ alignment, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder.AppendInterpolatedStringHandler __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>(__self);
	
		System.String valueConverted = InteropUtils.ToDotNetString(value);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			__selfConverted.AppendFormatted(valueConverted, alignment, formatConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_3")]
	internal static void /* System.Void */ System_Text_StringBuilder_AppendInterpolatedStringHandler_AppendFormatted_3(void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ __self, void* /* System.Object */ value, int /* System.Int32 */ alignment, byte* /* System.String */ format, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Text.StringBuilder.AppendInterpolatedStringHandler __selfConverted = InteropUtils.GetInstance<System.Text.StringBuilder.AppendInterpolatedStringHandler>(__self);
	
		System.Object valueConverted = InteropUtils.GetInstance<System.Object>(value);
		System.String formatConverted = InteropUtils.ToDotNetString(format);
	
	    try {
			__selfConverted.AppendFormatted(valueConverted, alignment, formatConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_Create")]
	internal static void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ System_Text_StringBuilder_AppendInterpolatedStringHandler_Create(int /* System.Int32 */ literalLength, int /* System.Int32 */ formattedCount, void* /* System.Text.StringBuilder */ stringBuilder, void** /* System.Exception */ __outException)
	{
		System.Text.StringBuilder stringBuilderConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(stringBuilder);
	
	    try {
			System.Text.StringBuilder.AppendInterpolatedStringHandler __returnValue = new System.Text.StringBuilder.AppendInterpolatedStringHandler(literalLength, formattedCount, stringBuilderConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_Create_1")]
	internal static void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ System_Text_StringBuilder_AppendInterpolatedStringHandler_Create_1(int /* System.Int32 */ literalLength, int /* System.Int32 */ formattedCount, void* /* System.Text.StringBuilder */ stringBuilder, void* /* System.IFormatProvider */ provider, void** /* System.Exception */ __outException)
	{
		System.Text.StringBuilder stringBuilderConverted = InteropUtils.GetInstance<System.Text.StringBuilder>(stringBuilder);
		System.IFormatProvider providerConverted = InteropUtils.GetInstance<System.IFormatProvider>(provider);
	
	    try {
			System.Text.StringBuilder.AppendInterpolatedStringHandler __returnValue = new System.Text.StringBuilder.AppendInterpolatedStringHandler(literalLength, formattedCount, stringBuilderConverted, providerConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_TypeOf")]
	internal static void* /* System.Type */ System_Text_StringBuilder_AppendInterpolatedStringHandler_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Text.StringBuilder.AppendInterpolatedStringHandler);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Text_StringBuilder_AppendInterpolatedStringHandler_Destroy")]
	internal static void /* System.Void */ System_Text_StringBuilder_AppendInterpolatedStringHandler_Destroy(void* /* System.Text.StringBuilder.AppendInterpolatedStringHandler */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg0" was skipped. Reason: It has no full name.
// Type "TArg1" was skipped. Reason: It has no full name.
// Type "TArg2" was skipped. Reason: It has no full name.
internal unsafe class System_IO_FileAttributes
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileAttributes_TypeOf")]
	internal static void* /* System.Type */ System_IO_FileAttributes_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.FileAttributes);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_IO_UnixFileMode
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_UnixFileMode_TypeOf")]
	internal static void* /* System.Type */ System_IO_UnixFileMode_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.UnixFileMode);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_IO_FileSystemInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_GetObjectData")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_GetObjectData(void* /* System.IO.FileSystemInfo */ __self, void* /* System.Runtime.Serialization.SerializationInfo */ info, void* /* System.Runtime.Serialization.StreamingContext */ context, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
		System.Runtime.Serialization.SerializationInfo infoConverted = InteropUtils.GetInstance<System.Runtime.Serialization.SerializationInfo>(info);
		System.Runtime.Serialization.StreamingContext contextConverted = InteropUtils.GetInstance<System.Runtime.Serialization.StreamingContext>(context);
	
	    try {
			__selfConverted.GetObjectData(infoConverted, contextConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_Delete")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_Delete(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			__selfConverted.Delete();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_CreateAsSymbolicLink")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_CreateAsSymbolicLink(void* /* System.IO.FileSystemInfo */ __self, byte* /* System.String */ pathToTarget, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
		System.String pathToTargetConverted = InteropUtils.ToDotNetString(pathToTarget);
	
	    try {
			__selfConverted.CreateAsSymbolicLink(pathToTargetConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_ResolveLinkTarget")]
	internal static void* /* System.IO.FileSystemInfo */ System_IO_FileSystemInfo_ResolveLinkTarget(void* /* System.IO.FileSystemInfo */ __self, byte /* System.Boolean */ returnFinalTarget, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
		System.Boolean returnFinalTargetConverted = returnFinalTarget.ToBool();
	
	    try {
			System.IO.FileSystemInfo __returnValue = __selfConverted.ResolveLinkTarget(returnFinalTargetConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_ToString")]
	internal static byte* /* System.String */ System_IO_FileSystemInfo_ToString(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.ToString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_Refresh")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_Refresh(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			__selfConverted.Refresh();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_FullName_Get")]
	internal static byte* /* System.String */ System_IO_FileSystemInfo_FullName_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_Extension_Get")]
	internal static byte* /* System.String */ System_IO_FileSystemInfo_Extension_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Extension;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_Name_Get")]
	internal static byte* /* System.String */ System_IO_FileSystemInfo_Name_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_Exists_Get")]
	internal static byte /* System.Boolean */ System_IO_FileSystemInfo_Exists_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Exists;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_CreationTime_Get")]
	internal static void* /* System.DateTime */ System_IO_FileSystemInfo_CreationTime_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.CreationTime;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_CreationTime_Set")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_CreationTime_Set(void* /* System.IO.FileSystemInfo */ __self, void* /* System.DateTime */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			__selfConverted.CreationTime = InteropUtils.GetInstance<System.DateTime>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_CreationTimeUtc_Get")]
	internal static void* /* System.DateTime */ System_IO_FileSystemInfo_CreationTimeUtc_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.CreationTimeUtc;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_CreationTimeUtc_Set")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_CreationTimeUtc_Set(void* /* System.IO.FileSystemInfo */ __self, void* /* System.DateTime */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			__selfConverted.CreationTimeUtc = InteropUtils.GetInstance<System.DateTime>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_LastAccessTime_Get")]
	internal static void* /* System.DateTime */ System_IO_FileSystemInfo_LastAccessTime_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.LastAccessTime;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_LastAccessTime_Set")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_LastAccessTime_Set(void* /* System.IO.FileSystemInfo */ __self, void* /* System.DateTime */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			__selfConverted.LastAccessTime = InteropUtils.GetInstance<System.DateTime>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_LastAccessTimeUtc_Get")]
	internal static void* /* System.DateTime */ System_IO_FileSystemInfo_LastAccessTimeUtc_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.LastAccessTimeUtc;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_LastAccessTimeUtc_Set")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_LastAccessTimeUtc_Set(void* /* System.IO.FileSystemInfo */ __self, void* /* System.DateTime */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			__selfConverted.LastAccessTimeUtc = InteropUtils.GetInstance<System.DateTime>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_LastWriteTime_Get")]
	internal static void* /* System.DateTime */ System_IO_FileSystemInfo_LastWriteTime_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.LastWriteTime;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_LastWriteTime_Set")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_LastWriteTime_Set(void* /* System.IO.FileSystemInfo */ __self, void* /* System.DateTime */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			__selfConverted.LastWriteTime = InteropUtils.GetInstance<System.DateTime>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_LastWriteTimeUtc_Get")]
	internal static void* /* System.DateTime */ System_IO_FileSystemInfo_LastWriteTimeUtc_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.LastWriteTimeUtc;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_LastWriteTimeUtc_Set")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_LastWriteTimeUtc_Set(void* /* System.IO.FileSystemInfo */ __self, void* /* System.DateTime */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			__selfConverted.LastWriteTimeUtc = InteropUtils.GetInstance<System.DateTime>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_LinkTarget_Get")]
	internal static byte* /* System.String */ System_IO_FileSystemInfo_LinkTarget_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.LinkTarget;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_UnixFileMode_Get")]
	internal static System.IO.UnixFileMode /* System.IO.UnixFileMode */ System_IO_FileSystemInfo_UnixFileMode_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.IO.UnixFileMode __returnValue = __selfConverted.UnixFileMode;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.UnixFileMode);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_UnixFileMode_Set")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_UnixFileMode_Set(void* /* System.IO.FileSystemInfo */ __self, System.IO.UnixFileMode /* System.IO.UnixFileMode */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			__selfConverted.UnixFileMode = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_Attributes_Get")]
	internal static System.IO.FileAttributes /* System.IO.FileAttributes */ System_IO_FileSystemInfo_Attributes_Get(void* /* System.IO.FileSystemInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			System.IO.FileAttributes __returnValue = __selfConverted.Attributes;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileAttributes);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_Attributes_Set")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_Attributes_Set(void* /* System.IO.FileSystemInfo */ __self, System.IO.FileAttributes /* System.IO.FileAttributes */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileSystemInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileSystemInfo>(__self);
	
	
	    try {
			__selfConverted.Attributes = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_TypeOf")]
	internal static void* /* System.Type */ System_IO_FileSystemInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.FileSystemInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileSystemInfo_Destroy")]
	internal static void /* System.Void */ System_IO_FileSystemInfo_Destroy(void* /* System.IO.FileSystemInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_FileInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Open")]
	internal static void* /* System.IO.FileStream */ System_IO_FileInfo_Open(void* /* System.IO.FileInfo */ __self, void* /* System.IO.FileStreamOptions */ options, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
		System.IO.FileStreamOptions optionsConverted = InteropUtils.GetInstance<System.IO.FileStreamOptions>(options);
	
	    try {
			System.IO.FileStream __returnValue = __selfConverted.Open(optionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_OpenText")]
	internal static void* /* System.IO.StreamReader */ System_IO_FileInfo_OpenText(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.IO.StreamReader __returnValue = __selfConverted.OpenText();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_CreateText")]
	internal static void* /* System.IO.StreamWriter */ System_IO_FileInfo_CreateText(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.IO.StreamWriter __returnValue = __selfConverted.CreateText();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_AppendText")]
	internal static void* /* System.IO.StreamWriter */ System_IO_FileInfo_AppendText(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.IO.StreamWriter __returnValue = __selfConverted.AppendText();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_CopyTo")]
	internal static void* /* System.IO.FileInfo */ System_IO_FileInfo_CopyTo(void* /* System.IO.FileInfo */ __self, byte* /* System.String */ destFileName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
		System.String destFileNameConverted = InteropUtils.ToDotNetString(destFileName);
	
	    try {
			System.IO.FileInfo __returnValue = __selfConverted.CopyTo(destFileNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_CopyTo_1")]
	internal static void* /* System.IO.FileInfo */ System_IO_FileInfo_CopyTo_1(void* /* System.IO.FileInfo */ __self, byte* /* System.String */ destFileName, byte /* System.Boolean */ overwrite, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
		System.String destFileNameConverted = InteropUtils.ToDotNetString(destFileName);
		System.Boolean overwriteConverted = overwrite.ToBool();
	
	    try {
			System.IO.FileInfo __returnValue = __selfConverted.CopyTo(destFileNameConverted, overwriteConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Create_1")]
	internal static void* /* System.IO.FileStream */ System_IO_FileInfo_Create_1(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.IO.FileStream __returnValue = __selfConverted.Create();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Delete")]
	internal static void /* System.Void */ System_IO_FileInfo_Delete(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			__selfConverted.Delete();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Open_1")]
	internal static void* /* System.IO.FileStream */ System_IO_FileInfo_Open_1(void* /* System.IO.FileInfo */ __self, System.IO.FileMode /* System.IO.FileMode */ mode, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.IO.FileStream __returnValue = __selfConverted.Open(mode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Open_2")]
	internal static void* /* System.IO.FileStream */ System_IO_FileInfo_Open_2(void* /* System.IO.FileInfo */ __self, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.IO.FileStream __returnValue = __selfConverted.Open(mode, access);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Open_3")]
	internal static void* /* System.IO.FileStream */ System_IO_FileInfo_Open_3(void* /* System.IO.FileInfo */ __self, System.IO.FileMode /* System.IO.FileMode */ mode, System.IO.FileAccess /* System.IO.FileAccess */ access, System.IO.FileShare /* System.IO.FileShare */ share, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.IO.FileStream __returnValue = __selfConverted.Open(mode, access, share);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_OpenRead")]
	internal static void* /* System.IO.FileStream */ System_IO_FileInfo_OpenRead(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.IO.FileStream __returnValue = __selfConverted.OpenRead();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_OpenWrite")]
	internal static void* /* System.IO.FileStream */ System_IO_FileInfo_OpenWrite(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.IO.FileStream __returnValue = __selfConverted.OpenWrite();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_MoveTo")]
	internal static void /* System.Void */ System_IO_FileInfo_MoveTo(void* /* System.IO.FileInfo */ __self, byte* /* System.String */ destFileName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
		System.String destFileNameConverted = InteropUtils.ToDotNetString(destFileName);
	
	    try {
			__selfConverted.MoveTo(destFileNameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_MoveTo_1")]
	internal static void /* System.Void */ System_IO_FileInfo_MoveTo_1(void* /* System.IO.FileInfo */ __self, byte* /* System.String */ destFileName, byte /* System.Boolean */ overwrite, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
		System.String destFileNameConverted = InteropUtils.ToDotNetString(destFileName);
		System.Boolean overwriteConverted = overwrite.ToBool();
	
	    try {
			__selfConverted.MoveTo(destFileNameConverted, overwriteConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Replace")]
	internal static void* /* System.IO.FileInfo */ System_IO_FileInfo_Replace(void* /* System.IO.FileInfo */ __self, byte* /* System.String */ destinationFileName, byte* /* System.String */ destinationBackupFileName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
		System.String destinationFileNameConverted = InteropUtils.ToDotNetString(destinationFileName);
		System.String destinationBackupFileNameConverted = InteropUtils.ToDotNetString(destinationBackupFileName);
	
	    try {
			System.IO.FileInfo __returnValue = __selfConverted.Replace(destinationFileNameConverted, destinationBackupFileNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Replace_1")]
	internal static void* /* System.IO.FileInfo */ System_IO_FileInfo_Replace_1(void* /* System.IO.FileInfo */ __self, byte* /* System.String */ destinationFileName, byte* /* System.String */ destinationBackupFileName, byte /* System.Boolean */ ignoreMetadataErrors, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
		System.String destinationFileNameConverted = InteropUtils.ToDotNetString(destinationFileName);
		System.String destinationBackupFileNameConverted = InteropUtils.ToDotNetString(destinationBackupFileName);
		System.Boolean ignoreMetadataErrorsConverted = ignoreMetadataErrors.ToBool();
	
	    try {
			System.IO.FileInfo __returnValue = __selfConverted.Replace(destinationFileNameConverted, destinationBackupFileNameConverted, ignoreMetadataErrorsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Decrypt")]
	internal static void /* System.Void */ System_IO_FileInfo_Decrypt(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			__selfConverted.Decrypt();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Encrypt")]
	internal static void /* System.Void */ System_IO_FileInfo_Encrypt(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			__selfConverted.Encrypt();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Create_2")]
	internal static void* /* System.IO.FileInfo */ System_IO_FileInfo_Create_2(byte* /* System.String */ fileName, void** /* System.Exception */ __outException)
	{
		System.String fileNameConverted = InteropUtils.ToDotNetString(fileName);
	
	    try {
			System.IO.FileInfo __returnValue = new System.IO.FileInfo(fileNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Name_Get")]
	internal static byte* /* System.String */ System_IO_FileInfo_Name_Get(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Length_Get")]
	internal static long /* System.Int64 */ System_IO_FileInfo_Length_Get(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.Int64 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_DirectoryName_Get")]
	internal static byte* /* System.String */ System_IO_FileInfo_DirectoryName_Get(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.DirectoryName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Directory_Get")]
	internal static void* /* System.IO.DirectoryInfo */ System_IO_FileInfo_Directory_Get(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.IO.DirectoryInfo __returnValue = __selfConverted.Directory;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_IsReadOnly_Get")]
	internal static byte /* System.Boolean */ System_IO_FileInfo_IsReadOnly_Get(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_IsReadOnly_Set")]
	internal static void /* System.Void */ System_IO_FileInfo_IsReadOnly_Set(void* /* System.IO.FileInfo */ __self, byte /* System.Boolean */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			__selfConverted.IsReadOnly = __value.ToBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Exists_Get")]
	internal static byte /* System.Boolean */ System_IO_FileInfo_Exists_Get(void* /* System.IO.FileInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.FileInfo __selfConverted = InteropUtils.GetInstance<System.IO.FileInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Exists;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_TypeOf")]
	internal static void* /* System.Type */ System_IO_FileInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.FileInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_FileInfo_Destroy")]
	internal static void /* System.Void */ System_IO_FileInfo_Destroy(void* /* System.IO.FileInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_DirectoryInfo
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_CreateSubdirectory")]
	internal static void* /* System.IO.DirectoryInfo */ System_IO_DirectoryInfo_CreateSubdirectory(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.DirectoryInfo __returnValue = __selfConverted.CreateSubdirectory(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_Create_1")]
	internal static void /* System.Void */ System_IO_DirectoryInfo_Create_1(void* /* System.IO.DirectoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
	
	    try {
			__selfConverted.Create();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetFiles")]
	internal static void* /* System.IO.FileInfo[] */ System_IO_DirectoryInfo_GetFiles(void* /* System.IO.DirectoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
	
	    try {
			System.IO.FileInfo[] __returnValue = __selfConverted.GetFiles();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetFiles_1")]
	internal static void* /* System.IO.FileInfo[] */ System_IO_DirectoryInfo_GetFiles_1(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ searchPattern, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.IO.FileInfo[] __returnValue = __selfConverted.GetFiles(searchPatternConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetFiles_2")]
	internal static void* /* System.IO.FileInfo[] */ System_IO_DirectoryInfo_GetFiles_2(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ searchPattern, System.IO.SearchOption /* System.IO.SearchOption */ searchOption, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.IO.FileInfo[] __returnValue = __selfConverted.GetFiles(searchPatternConverted, searchOption);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetFiles_3")]
	internal static void* /* System.IO.FileInfo[] */ System_IO_DirectoryInfo_GetFiles_3(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ searchPattern, void* /* System.IO.EnumerationOptions */ enumerationOptions, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
		System.IO.EnumerationOptions enumerationOptionsConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(enumerationOptions);
	
	    try {
			System.IO.FileInfo[] __returnValue = __selfConverted.GetFiles(searchPatternConverted, enumerationOptionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetFileSystemInfos")]
	internal static void* /* System.IO.FileSystemInfo[] */ System_IO_DirectoryInfo_GetFileSystemInfos(void* /* System.IO.DirectoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
	
	    try {
			System.IO.FileSystemInfo[] __returnValue = __selfConverted.GetFileSystemInfos();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetFileSystemInfos_1")]
	internal static void* /* System.IO.FileSystemInfo[] */ System_IO_DirectoryInfo_GetFileSystemInfos_1(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ searchPattern, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.IO.FileSystemInfo[] __returnValue = __selfConverted.GetFileSystemInfos(searchPatternConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetFileSystemInfos_2")]
	internal static void* /* System.IO.FileSystemInfo[] */ System_IO_DirectoryInfo_GetFileSystemInfos_2(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ searchPattern, System.IO.SearchOption /* System.IO.SearchOption */ searchOption, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.IO.FileSystemInfo[] __returnValue = __selfConverted.GetFileSystemInfos(searchPatternConverted, searchOption);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetFileSystemInfos_3")]
	internal static void* /* System.IO.FileSystemInfo[] */ System_IO_DirectoryInfo_GetFileSystemInfos_3(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ searchPattern, void* /* System.IO.EnumerationOptions */ enumerationOptions, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
		System.IO.EnumerationOptions enumerationOptionsConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(enumerationOptions);
	
	    try {
			System.IO.FileSystemInfo[] __returnValue = __selfConverted.GetFileSystemInfos(searchPatternConverted, enumerationOptionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetDirectories")]
	internal static void* /* System.IO.DirectoryInfo[] */ System_IO_DirectoryInfo_GetDirectories(void* /* System.IO.DirectoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
	
	    try {
			System.IO.DirectoryInfo[] __returnValue = __selfConverted.GetDirectories();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetDirectories_1")]
	internal static void* /* System.IO.DirectoryInfo[] */ System_IO_DirectoryInfo_GetDirectories_1(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ searchPattern, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.IO.DirectoryInfo[] __returnValue = __selfConverted.GetDirectories(searchPatternConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetDirectories_2")]
	internal static void* /* System.IO.DirectoryInfo[] */ System_IO_DirectoryInfo_GetDirectories_2(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ searchPattern, System.IO.SearchOption /* System.IO.SearchOption */ searchOption, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.IO.DirectoryInfo[] __returnValue = __selfConverted.GetDirectories(searchPatternConverted, searchOption);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_GetDirectories_3")]
	internal static void* /* System.IO.DirectoryInfo[] */ System_IO_DirectoryInfo_GetDirectories_3(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ searchPattern, void* /* System.IO.EnumerationOptions */ enumerationOptions, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
		System.IO.EnumerationOptions enumerationOptionsConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(enumerationOptions);
	
	    try {
			System.IO.DirectoryInfo[] __returnValue = __selfConverted.GetDirectories(searchPatternConverted, enumerationOptionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_MoveTo")]
	internal static void /* System.Void */ System_IO_DirectoryInfo_MoveTo(void* /* System.IO.DirectoryInfo */ __self, byte* /* System.String */ destDirName, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.String destDirNameConverted = InteropUtils.ToDotNetString(destDirName);
	
	    try {
			__selfConverted.MoveTo(destDirNameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_Delete")]
	internal static void /* System.Void */ System_IO_DirectoryInfo_Delete(void* /* System.IO.DirectoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
	
	    try {
			__selfConverted.Delete();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_Delete_1")]
	internal static void /* System.Void */ System_IO_DirectoryInfo_Delete_1(void* /* System.IO.DirectoryInfo */ __self, byte /* System.Boolean */ recursive, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
		System.Boolean recursiveConverted = recursive.ToBool();
	
	    try {
			__selfConverted.Delete(recursiveConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_Create_2")]
	internal static void* /* System.IO.DirectoryInfo */ System_IO_DirectoryInfo_Create_2(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.DirectoryInfo __returnValue = new System.IO.DirectoryInfo(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_Name_Get")]
	internal static byte* /* System.String */ System_IO_DirectoryInfo_Name_Get(void* /* System.IO.DirectoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_Parent_Get")]
	internal static void* /* System.IO.DirectoryInfo */ System_IO_DirectoryInfo_Parent_Get(void* /* System.IO.DirectoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
	
	    try {
			System.IO.DirectoryInfo __returnValue = __selfConverted.Parent;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_Root_Get")]
	internal static void* /* System.IO.DirectoryInfo */ System_IO_DirectoryInfo_Root_Get(void* /* System.IO.DirectoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
	
	    try {
			System.IO.DirectoryInfo __returnValue = __selfConverted.Root;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_Exists_Get")]
	internal static byte /* System.Boolean */ System_IO_DirectoryInfo_Exists_Get(void* /* System.IO.DirectoryInfo */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.DirectoryInfo __selfConverted = InteropUtils.GetInstance<System.IO.DirectoryInfo>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.Exists;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_TypeOf")]
	internal static void* /* System.Type */ System_IO_DirectoryInfo_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.DirectoryInfo);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_DirectoryInfo_Destroy")]
	internal static void /* System.Void */ System_IO_DirectoryInfo_Destroy(void* /* System.IO.DirectoryInfo */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class System_IO_SearchOption
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_SearchOption_TypeOf")]
	internal static void* /* System.Type */ System_IO_SearchOption_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.SearchOption);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_IO_EnumerationOptions
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_Create")]
	internal static void* /* System.IO.EnumerationOptions */ System_IO_EnumerationOptions_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IO.EnumerationOptions __returnValue = new System.IO.EnumerationOptions();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_RecurseSubdirectories_Get")]
	internal static byte /* System.Boolean */ System_IO_EnumerationOptions_RecurseSubdirectories_Get(void* /* System.IO.EnumerationOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.RecurseSubdirectories;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_RecurseSubdirectories_Set")]
	internal static void /* System.Void */ System_IO_EnumerationOptions_RecurseSubdirectories_Set(void* /* System.IO.EnumerationOptions */ __self, byte /* System.Boolean */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			__selfConverted.RecurseSubdirectories = __value.ToBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_IgnoreInaccessible_Get")]
	internal static byte /* System.Boolean */ System_IO_EnumerationOptions_IgnoreInaccessible_Get(void* /* System.IO.EnumerationOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IgnoreInaccessible;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_IgnoreInaccessible_Set")]
	internal static void /* System.Void */ System_IO_EnumerationOptions_IgnoreInaccessible_Set(void* /* System.IO.EnumerationOptions */ __self, byte /* System.Boolean */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			__selfConverted.IgnoreInaccessible = __value.ToBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_BufferSize_Get")]
	internal static int /* System.Int32 */ System_IO_EnumerationOptions_BufferSize_Get(void* /* System.IO.EnumerationOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.BufferSize;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_BufferSize_Set")]
	internal static void /* System.Void */ System_IO_EnumerationOptions_BufferSize_Set(void* /* System.IO.EnumerationOptions */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			__selfConverted.BufferSize = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_AttributesToSkip_Get")]
	internal static System.IO.FileAttributes /* System.IO.FileAttributes */ System_IO_EnumerationOptions_AttributesToSkip_Get(void* /* System.IO.EnumerationOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			System.IO.FileAttributes __returnValue = __selfConverted.AttributesToSkip;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.FileAttributes);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_AttributesToSkip_Set")]
	internal static void /* System.Void */ System_IO_EnumerationOptions_AttributesToSkip_Set(void* /* System.IO.EnumerationOptions */ __self, System.IO.FileAttributes /* System.IO.FileAttributes */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			__selfConverted.AttributesToSkip = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_MatchType_Get")]
	internal static System.IO.MatchType /* System.IO.MatchType */ System_IO_EnumerationOptions_MatchType_Get(void* /* System.IO.EnumerationOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			System.IO.MatchType __returnValue = __selfConverted.MatchType;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.MatchType);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_MatchType_Set")]
	internal static void /* System.Void */ System_IO_EnumerationOptions_MatchType_Set(void* /* System.IO.EnumerationOptions */ __self, System.IO.MatchType /* System.IO.MatchType */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			__selfConverted.MatchType = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_MatchCasing_Get")]
	internal static System.IO.MatchCasing /* System.IO.MatchCasing */ System_IO_EnumerationOptions_MatchCasing_Get(void* /* System.IO.EnumerationOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			System.IO.MatchCasing __returnValue = __selfConverted.MatchCasing;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(System.IO.MatchCasing);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_MatchCasing_Set")]
	internal static void /* System.Void */ System_IO_EnumerationOptions_MatchCasing_Set(void* /* System.IO.EnumerationOptions */ __self, System.IO.MatchCasing /* System.IO.MatchCasing */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			__selfConverted.MatchCasing = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_MaxRecursionDepth_Get")]
	internal static int /* System.Int32 */ System_IO_EnumerationOptions_MaxRecursionDepth_Get(void* /* System.IO.EnumerationOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.MaxRecursionDepth;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_MaxRecursionDepth_Set")]
	internal static void /* System.Void */ System_IO_EnumerationOptions_MaxRecursionDepth_Set(void* /* System.IO.EnumerationOptions */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			__selfConverted.MaxRecursionDepth = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_ReturnSpecialDirectories_Get")]
	internal static byte /* System.Boolean */ System_IO_EnumerationOptions_ReturnSpecialDirectories_Get(void* /* System.IO.EnumerationOptions */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.ReturnSpecialDirectories;
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_ReturnSpecialDirectories_Set")]
	internal static void /* System.Void */ System_IO_EnumerationOptions_ReturnSpecialDirectories_Set(void* /* System.IO.EnumerationOptions */ __self, byte /* System.Boolean */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.IO.EnumerationOptions __selfConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(__self);
	
	
	    try {
			__selfConverted.ReturnSpecialDirectories = __value.ToBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_TypeOf")]
	internal static void* /* System.Type */ System_IO_EnumerationOptions_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.EnumerationOptions);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_EnumerationOptions_Destroy")]
	internal static void /* System.Void */ System_IO_EnumerationOptions_Destroy(void* /* System.IO.EnumerationOptions */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_IO_MatchType
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_MatchType_TypeOf")]
	internal static void* /* System.Type */ System_IO_MatchType_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.MatchType);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class System_IO_MatchCasing
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_MatchCasing_TypeOf")]
	internal static void* /* System.Type */ System_IO_MatchCasing_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.MatchCasing);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}






internal unsafe class System_IO_Directory
{
	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetParent")]
	internal static void* /* System.IO.DirectoryInfo */ System_IO_Directory_GetParent(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.DirectoryInfo __returnValue = System.IO.Directory.GetParent(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_CreateDirectory")]
	internal static void* /* System.IO.DirectoryInfo */ System_IO_Directory_CreateDirectory(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.DirectoryInfo __returnValue = System.IO.Directory.CreateDirectory(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_CreateDirectory_1")]
	internal static void* /* System.IO.DirectoryInfo */ System_IO_Directory_CreateDirectory_1(byte* /* System.String */ path, System.IO.UnixFileMode /* System.IO.UnixFileMode */ unixCreateMode, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.DirectoryInfo __returnValue = System.IO.Directory.CreateDirectory(pathConverted, unixCreateMode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_CreateTempSubdirectory")]
	internal static void* /* System.IO.DirectoryInfo */ System_IO_Directory_CreateTempSubdirectory(byte* /* System.String */ prefix, void** /* System.Exception */ __outException)
	{
		System.String prefixConverted = InteropUtils.ToDotNetString(prefix);
	
	    try {
			System.IO.DirectoryInfo __returnValue = System.IO.Directory.CreateTempSubdirectory(prefixConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_Exists")]
	internal static byte /* System.Boolean */ System_IO_Directory_Exists(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.Boolean __returnValue = System.IO.Directory.Exists(pathConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_SetCreationTime")]
	internal static void /* System.Void */ System_IO_Directory_SetCreationTime(byte* /* System.String */ path, void* /* System.DateTime */ creationTime, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime creationTimeConverted = InteropUtils.GetInstance<System.DateTime>(creationTime);
	
	    try {
			System.IO.Directory.SetCreationTime(pathConverted, creationTimeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_SetCreationTimeUtc")]
	internal static void /* System.Void */ System_IO_Directory_SetCreationTimeUtc(byte* /* System.String */ path, void* /* System.DateTime */ creationTimeUtc, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime creationTimeUtcConverted = InteropUtils.GetInstance<System.DateTime>(creationTimeUtc);
	
	    try {
			System.IO.Directory.SetCreationTimeUtc(pathConverted, creationTimeUtcConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetCreationTime")]
	internal static void* /* System.DateTime */ System_IO_Directory_GetCreationTime(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.Directory.GetCreationTime(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetCreationTimeUtc")]
	internal static void* /* System.DateTime */ System_IO_Directory_GetCreationTimeUtc(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.Directory.GetCreationTimeUtc(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_SetLastWriteTime")]
	internal static void /* System.Void */ System_IO_Directory_SetLastWriteTime(byte* /* System.String */ path, void* /* System.DateTime */ lastWriteTime, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime lastWriteTimeConverted = InteropUtils.GetInstance<System.DateTime>(lastWriteTime);
	
	    try {
			System.IO.Directory.SetLastWriteTime(pathConverted, lastWriteTimeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_SetLastWriteTimeUtc")]
	internal static void /* System.Void */ System_IO_Directory_SetLastWriteTimeUtc(byte* /* System.String */ path, void* /* System.DateTime */ lastWriteTimeUtc, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime lastWriteTimeUtcConverted = InteropUtils.GetInstance<System.DateTime>(lastWriteTimeUtc);
	
	    try {
			System.IO.Directory.SetLastWriteTimeUtc(pathConverted, lastWriteTimeUtcConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetLastWriteTime")]
	internal static void* /* System.DateTime */ System_IO_Directory_GetLastWriteTime(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.Directory.GetLastWriteTime(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetLastWriteTimeUtc")]
	internal static void* /* System.DateTime */ System_IO_Directory_GetLastWriteTimeUtc(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.Directory.GetLastWriteTimeUtc(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_SetLastAccessTime")]
	internal static void /* System.Void */ System_IO_Directory_SetLastAccessTime(byte* /* System.String */ path, void* /* System.DateTime */ lastAccessTime, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime lastAccessTimeConverted = InteropUtils.GetInstance<System.DateTime>(lastAccessTime);
	
	    try {
			System.IO.Directory.SetLastAccessTime(pathConverted, lastAccessTimeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_SetLastAccessTimeUtc")]
	internal static void /* System.Void */ System_IO_Directory_SetLastAccessTimeUtc(byte* /* System.String */ path, void* /* System.DateTime */ lastAccessTimeUtc, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.DateTime lastAccessTimeUtcConverted = InteropUtils.GetInstance<System.DateTime>(lastAccessTimeUtc);
	
	    try {
			System.IO.Directory.SetLastAccessTimeUtc(pathConverted, lastAccessTimeUtcConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetLastAccessTime")]
	internal static void* /* System.DateTime */ System_IO_Directory_GetLastAccessTime(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.Directory.GetLastAccessTime(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetLastAccessTimeUtc")]
	internal static void* /* System.DateTime */ System_IO_Directory_GetLastAccessTimeUtc(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.DateTime __returnValue = System.IO.Directory.GetLastAccessTimeUtc(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetFiles")]
	internal static void* /* System.String[] */ System_IO_Directory_GetFiles(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetFiles(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetFiles_1")]
	internal static void* /* System.String[] */ System_IO_Directory_GetFiles_1(byte* /* System.String */ path, byte* /* System.String */ searchPattern, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetFiles(pathConverted, searchPatternConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetFiles_2")]
	internal static void* /* System.String[] */ System_IO_Directory_GetFiles_2(byte* /* System.String */ path, byte* /* System.String */ searchPattern, System.IO.SearchOption /* System.IO.SearchOption */ searchOption, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetFiles(pathConverted, searchPatternConverted, searchOption);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetFiles_3")]
	internal static void* /* System.String[] */ System_IO_Directory_GetFiles_3(byte* /* System.String */ path, byte* /* System.String */ searchPattern, void* /* System.IO.EnumerationOptions */ enumerationOptions, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
		System.IO.EnumerationOptions enumerationOptionsConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(enumerationOptions);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetFiles(pathConverted, searchPatternConverted, enumerationOptionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetDirectories")]
	internal static void* /* System.String[] */ System_IO_Directory_GetDirectories(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetDirectories(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetDirectories_1")]
	internal static void* /* System.String[] */ System_IO_Directory_GetDirectories_1(byte* /* System.String */ path, byte* /* System.String */ searchPattern, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetDirectories(pathConverted, searchPatternConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetDirectories_2")]
	internal static void* /* System.String[] */ System_IO_Directory_GetDirectories_2(byte* /* System.String */ path, byte* /* System.String */ searchPattern, System.IO.SearchOption /* System.IO.SearchOption */ searchOption, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetDirectories(pathConverted, searchPatternConverted, searchOption);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetDirectories_3")]
	internal static void* /* System.String[] */ System_IO_Directory_GetDirectories_3(byte* /* System.String */ path, byte* /* System.String */ searchPattern, void* /* System.IO.EnumerationOptions */ enumerationOptions, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
		System.IO.EnumerationOptions enumerationOptionsConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(enumerationOptions);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetDirectories(pathConverted, searchPatternConverted, enumerationOptionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetFileSystemEntries")]
	internal static void* /* System.String[] */ System_IO_Directory_GetFileSystemEntries(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetFileSystemEntries(pathConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetFileSystemEntries_1")]
	internal static void* /* System.String[] */ System_IO_Directory_GetFileSystemEntries_1(byte* /* System.String */ path, byte* /* System.String */ searchPattern, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetFileSystemEntries(pathConverted, searchPatternConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetFileSystemEntries_2")]
	internal static void* /* System.String[] */ System_IO_Directory_GetFileSystemEntries_2(byte* /* System.String */ path, byte* /* System.String */ searchPattern, System.IO.SearchOption /* System.IO.SearchOption */ searchOption, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetFileSystemEntries(pathConverted, searchPatternConverted, searchOption);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetFileSystemEntries_3")]
	internal static void* /* System.String[] */ System_IO_Directory_GetFileSystemEntries_3(byte* /* System.String */ path, byte* /* System.String */ searchPattern, void* /* System.IO.EnumerationOptions */ enumerationOptions, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String searchPatternConverted = InteropUtils.ToDotNetString(searchPattern);
		System.IO.EnumerationOptions enumerationOptionsConverted = InteropUtils.GetInstance<System.IO.EnumerationOptions>(enumerationOptions);
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetFileSystemEntries(pathConverted, searchPatternConverted, enumerationOptionsConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetDirectoryRoot")]
	internal static byte* /* System.String */ System_IO_Directory_GetDirectoryRoot(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.String __returnValue = System.IO.Directory.GetDirectoryRoot(pathConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetCurrentDirectory")]
	internal static byte* /* System.String */ System_IO_Directory_GetCurrentDirectory(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.IO.Directory.GetCurrentDirectory();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_SetCurrentDirectory")]
	internal static void /* System.Void */ System_IO_Directory_SetCurrentDirectory(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.Directory.SetCurrentDirectory(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_Move")]
	internal static void /* System.Void */ System_IO_Directory_Move(byte* /* System.String */ sourceDirName, byte* /* System.String */ destDirName, void** /* System.Exception */ __outException)
	{
		System.String sourceDirNameConverted = InteropUtils.ToDotNetString(sourceDirName);
		System.String destDirNameConverted = InteropUtils.ToDotNetString(destDirName);
	
	    try {
			System.IO.Directory.Move(sourceDirNameConverted, destDirNameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_Delete")]
	internal static void /* System.Void */ System_IO_Directory_Delete(byte* /* System.String */ path, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
	
	    try {
			System.IO.Directory.Delete(pathConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_Delete_1")]
	internal static void /* System.Void */ System_IO_Directory_Delete_1(byte* /* System.String */ path, byte /* System.Boolean */ recursive, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.Boolean recursiveConverted = recursive.ToBool();
	
	    try {
			System.IO.Directory.Delete(pathConverted, recursiveConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_GetLogicalDrives")]
	internal static void* /* System.String[] */ System_IO_Directory_GetLogicalDrives(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String[] __returnValue = System.IO.Directory.GetLogicalDrives();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_CreateSymbolicLink")]
	internal static void* /* System.IO.FileSystemInfo */ System_IO_Directory_CreateSymbolicLink(byte* /* System.String */ path, byte* /* System.String */ pathToTarget, void** /* System.Exception */ __outException)
	{
		System.String pathConverted = InteropUtils.ToDotNetString(path);
		System.String pathToTargetConverted = InteropUtils.ToDotNetString(pathToTarget);
	
	    try {
			System.IO.FileSystemInfo __returnValue = System.IO.Directory.CreateSymbolicLink(pathConverted, pathToTargetConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_ResolveLinkTarget")]
	internal static void* /* System.IO.FileSystemInfo */ System_IO_Directory_ResolveLinkTarget(byte* /* System.String */ linkPath, byte /* System.Boolean */ returnFinalTarget, void** /* System.Exception */ __outException)
	{
		System.String linkPathConverted = InteropUtils.ToDotNetString(linkPath);
		System.Boolean returnFinalTargetConverted = returnFinalTarget.ToBool();
	
	    try {
			System.IO.FileSystemInfo __returnValue = System.IO.Directory.ResolveLinkTarget(linkPathConverted, returnFinalTargetConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_TypeOf")]
	internal static void* /* System.Type */ System_IO_Directory_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.IO.Directory);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_IO_Directory_Destroy")]
	internal static void /* System.Void */ System_IO_Directory_Destroy(void* /* System.IO.Directory */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class System_Runtime_InteropServices_Marshal
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_OffsetOf")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_OffsetOf(void* /* System.Type */ t, byte* /* System.String */ fieldName, void** /* System.Exception */ __outException)
	{
		System.Type tConverted = InteropUtils.GetInstance<System.Type>(t);
		System.String fieldNameConverted = InteropUtils.ToDotNetString(fieldName);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.OffsetOf(tConverted, fieldNameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadByte")]
	internal static byte /* System.Byte */ System_Runtime_InteropServices_Marshal_ReadByte(void* /* System.Object */ ptr, int /* System.Int32 */ ofs, void** /* System.Exception */ __outException)
	{
		System.Object ptrConverted = InteropUtils.GetInstance<System.Object>(ptr);
	
	    try {
			System.Byte __returnValue = System.Runtime.InteropServices.Marshal.ReadByte(ptrConverted, ofs);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadInt16")]
	internal static short /* System.Int16 */ System_Runtime_InteropServices_Marshal_ReadInt16(void* /* System.Object */ ptr, int /* System.Int32 */ ofs, void** /* System.Exception */ __outException)
	{
		System.Object ptrConverted = InteropUtils.GetInstance<System.Object>(ptr);
	
	    try {
			System.Int16 __returnValue = System.Runtime.InteropServices.Marshal.ReadInt16(ptrConverted, ofs);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadInt32")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_ReadInt32(void* /* System.Object */ ptr, int /* System.Int32 */ ofs, void** /* System.Exception */ __outException)
	{
		System.Object ptrConverted = InteropUtils.GetInstance<System.Object>(ptr);
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.ReadInt32(ptrConverted, ofs);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadInt64")]
	internal static long /* System.Int64 */ System_Runtime_InteropServices_Marshal_ReadInt64(void* /* System.Object */ ptr, int /* System.Int32 */ ofs, void** /* System.Exception */ __outException)
	{
		System.Object ptrConverted = InteropUtils.GetInstance<System.Object>(ptr);
	
	    try {
			System.Int64 __returnValue = System.Runtime.InteropServices.Marshal.ReadInt64(ptrConverted, ofs);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteByte")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteByte(void* /* System.Object */ ptr, int /* System.Int32 */ ofs, byte /* System.Byte */ val, void** /* System.Exception */ __outException)
	{
		System.Object ptrConverted = InteropUtils.GetInstance<System.Object>(ptr);
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteByte(ptrConverted, ofs, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteInt32")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteInt32(void* /* System.Object */ ptr, int /* System.Int32 */ ofs, int /* System.Int32 */ val, void** /* System.Exception */ __outException)
	{
		System.Object ptrConverted = InteropUtils.GetInstance<System.Object>(ptr);
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteInt32(ptrConverted, ofs, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteInt64")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteInt64(void* /* System.Object */ ptr, int /* System.Int32 */ ofs, long /* System.Int64 */ val, void** /* System.Exception */ __outException)
	{
		System.Object ptrConverted = InteropUtils.GetInstance<System.Object>(ptr);
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteInt64(ptrConverted, ofs, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetLastPInvokeError")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_GetLastPInvokeError(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.GetLastPInvokeError();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SetLastPInvokeError")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_SetLastPInvokeError(int /* System.Int32 */ error, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.SetLastPInvokeError(error);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetExceptionPointers")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_GetExceptionPointers(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.GetExceptionPointers();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetExceptionCode")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_GetExceptionCode(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.GetExceptionCode();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_StructureToPtr")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_StructureToPtr(void* /* System.Object */ structure, nint /* System.IntPtr */ ptr, byte /* System.Boolean */ fDeleteOld, void** /* System.Exception */ __outException)
	{
		System.Object structureConverted = InteropUtils.GetInstance<System.Object>(structure);
		System.Boolean fDeleteOldConverted = fDeleteOld.ToBool();
	
	    try {
			System.Runtime.InteropServices.Marshal.StructureToPtr(structureConverted, ptr, fDeleteOldConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_DestroyStructure")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_DestroyStructure(nint /* System.IntPtr */ ptr, void* /* System.Type */ structuretype, void** /* System.Exception */ __outException)
	{
		System.Type structuretypeConverted = InteropUtils.GetInstance<System.Type>(structuretype);
	
	    try {
			System.Runtime.InteropServices.Marshal.DestroyStructure(ptr, structuretypeConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_AllocHGlobal")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_AllocHGlobal(int /* System.Int32 */ cb, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.AllocHGlobal(cb);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStringAnsi")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_PtrToStringAnsi(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(ptr);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStringAnsi_1")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_PtrToStringAnsi_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ len, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(ptr, len);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStringUni")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_PtrToStringUni(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.PtrToStringUni(ptr);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStringUni_1")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_PtrToStringUni_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ len, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.PtrToStringUni(ptr, len);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStringUTF8")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_PtrToStringUTF8(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.PtrToStringUTF8(ptr);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStringUTF8_1")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_PtrToStringUTF8_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ byteLen, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.PtrToStringUTF8(ptr, byteLen);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SizeOf")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_SizeOf(void* /* System.Object */ structure, void** /* System.Exception */ __outException)
	{
		System.Object structureConverted = InteropUtils.GetInstance<System.Object>(structure);
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.SizeOf(structureConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SizeOf_A1")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_SizeOf_A1(void* /* System.Type */ T, void* /* T */ structure, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Object structureConverted = InteropUtils.GetInstance<System.Object>(structure);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.SizeOf);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { structureConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method SizeOf not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Int32 __returnValue = (System.Int32)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SizeOf_1")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_SizeOf_1(void* /* System.Type */ t, void** /* System.Exception */ __outException)
	{
		System.Type tConverted = InteropUtils.GetInstance<System.Type>(t);
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.SizeOf(tConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SizeOf_A1_1")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_SizeOf_A1_1(void* /* System.Type */ T, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.SizeOf);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[]? __parametersForGenericCall = null;
			System.Type[] __parameterTypesForGenericCall = System.Type.EmptyTypes;
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method SizeOf not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Int32 __returnValue = (System.Int32)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_QueryInterface")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_QueryInterface(nint /* System.IntPtr */ pUnk, void** /* System.Guid */ iid, nint* /* System.IntPtr */ ppv, void** /* System.Exception */ __outException)
	{
		System.Guid iidConverted;
	
		if (iid is not null) {
			iidConverted = InteropUtils.GetInstance<System.Guid>((*iid));
		} else {
			iidConverted = default(System.Guid);
		}
	
		System.IntPtr ppvConverted;
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.QueryInterface(pUnk, ref iidConverted, out ppvConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (iid is not null) {
				*iid = iidConverted.AllocateGCHandleAndGetAddress();
			}
	
			if (ppv is not null) {
				*ppv = ppvConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (ppv is not null) {
				*ppv = nint.Zero;
			}
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_AddRef")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_AddRef(nint /* System.IntPtr */ pUnk, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.AddRef(pUnk);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Release")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_Release(nint /* System.IntPtr */ pUnk, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.Release(pUnk);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_UnsafeAddrOfPinnedArrayElement(void* /* System.Array */ arr, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		System.Array arrConverted = InteropUtils.GetInstance<System.Array>(arr);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(arrConverted, index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	// TODO: Generic Methods with array parameters are not supported

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_OffsetOf_A1")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_OffsetOf_A1(void* /* System.Type */ T, byte* /* System.String */ fieldName, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.String fieldNameConverted = InteropUtils.ToDotNetString(fieldName);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.OffsetOf);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { fieldNameConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.String) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method OffsetOf not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.IntPtr __returnValue = (System.IntPtr)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy(void* /* System.Int32[] */ source, int /* System.Int32 */ startIndex, nint /* System.IntPtr */ destination, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Int32[] sourceConverted = InteropUtils.GetInstance<System.Int32[]>(source);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(sourceConverted, startIndex, destination, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_1(void* /* System.Char[] */ source, int /* System.Int32 */ startIndex, nint /* System.IntPtr */ destination, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Char[] sourceConverted = InteropUtils.GetInstance<System.Char[]>(source);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(sourceConverted, startIndex, destination, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_2")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_2(void* /* System.Int16[] */ source, int /* System.Int32 */ startIndex, nint /* System.IntPtr */ destination, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Int16[] sourceConverted = InteropUtils.GetInstance<System.Int16[]>(source);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(sourceConverted, startIndex, destination, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_3")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_3(void* /* System.Int64[] */ source, int /* System.Int32 */ startIndex, nint /* System.IntPtr */ destination, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Int64[] sourceConverted = InteropUtils.GetInstance<System.Int64[]>(source);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(sourceConverted, startIndex, destination, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_4")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_4(void* /* System.Single[] */ source, int /* System.Int32 */ startIndex, nint /* System.IntPtr */ destination, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Single[] sourceConverted = InteropUtils.GetInstance<System.Single[]>(source);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(sourceConverted, startIndex, destination, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_5")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_5(void* /* System.Double[] */ source, int /* System.Int32 */ startIndex, nint /* System.IntPtr */ destination, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Double[] sourceConverted = InteropUtils.GetInstance<System.Double[]>(source);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(sourceConverted, startIndex, destination, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_6")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_6(void* /* System.Byte[] */ source, int /* System.Int32 */ startIndex, nint /* System.IntPtr */ destination, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Byte[] sourceConverted = InteropUtils.GetInstance<System.Byte[]>(source);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(sourceConverted, startIndex, destination, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_7")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_7(void* /* System.IntPtr[] */ source, int /* System.Int32 */ startIndex, nint /* System.IntPtr */ destination, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.IntPtr[] sourceConverted = InteropUtils.GetInstance<System.IntPtr[]>(source);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(sourceConverted, startIndex, destination, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_8")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_8(nint /* System.IntPtr */ source, void* /* System.Int32[] */ destination, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Int32[] destinationConverted = InteropUtils.GetInstance<System.Int32[]>(destination);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(source, destinationConverted, startIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_9")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_9(nint /* System.IntPtr */ source, void* /* System.Char[] */ destination, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Char[] destinationConverted = InteropUtils.GetInstance<System.Char[]>(destination);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(source, destinationConverted, startIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_10")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_10(nint /* System.IntPtr */ source, void* /* System.Int16[] */ destination, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Int16[] destinationConverted = InteropUtils.GetInstance<System.Int16[]>(destination);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(source, destinationConverted, startIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_11")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_11(nint /* System.IntPtr */ source, void* /* System.Int64[] */ destination, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Int64[] destinationConverted = InteropUtils.GetInstance<System.Int64[]>(destination);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(source, destinationConverted, startIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_12")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_12(nint /* System.IntPtr */ source, void* /* System.Single[] */ destination, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Single[] destinationConverted = InteropUtils.GetInstance<System.Single[]>(destination);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(source, destinationConverted, startIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_13")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_13(nint /* System.IntPtr */ source, void* /* System.Double[] */ destination, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Double[] destinationConverted = InteropUtils.GetInstance<System.Double[]>(destination);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(source, destinationConverted, startIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_14")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_14(nint /* System.IntPtr */ source, void* /* System.Byte[] */ destination, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.Byte[] destinationConverted = InteropUtils.GetInstance<System.Byte[]>(destination);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(source, destinationConverted, startIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Copy_15")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Copy_15(nint /* System.IntPtr */ source, void* /* System.IntPtr[] */ destination, int /* System.Int32 */ startIndex, int /* System.Int32 */ length, void** /* System.Exception */ __outException)
	{
		System.IntPtr[] destinationConverted = InteropUtils.GetInstance<System.IntPtr[]>(destination);
	
	    try {
			System.Runtime.InteropServices.Marshal.Copy(source, destinationConverted, startIndex, length);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadByte_1")]
	internal static byte /* System.Byte */ System_Runtime_InteropServices_Marshal_ReadByte_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ ofs, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Runtime.InteropServices.Marshal.ReadByte(ptr, ofs);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadByte_2")]
	internal static byte /* System.Byte */ System_Runtime_InteropServices_Marshal_ReadByte_2(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Byte __returnValue = System.Runtime.InteropServices.Marshal.ReadByte(ptr);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadInt16_1")]
	internal static short /* System.Int16 */ System_Runtime_InteropServices_Marshal_ReadInt16_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ ofs, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Runtime.InteropServices.Marshal.ReadInt16(ptr, ofs);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadInt16_2")]
	internal static short /* System.Int16 */ System_Runtime_InteropServices_Marshal_ReadInt16_2(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int16 __returnValue = System.Runtime.InteropServices.Marshal.ReadInt16(ptr);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadInt32_1")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_ReadInt32_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ ofs, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.ReadInt32(ptr, ofs);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadInt32_2")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_ReadInt32_2(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.ReadInt32(ptr);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadIntPtr")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_ReadIntPtr(void* /* System.Object */ ptr, int /* System.Int32 */ ofs, void** /* System.Exception */ __outException)
	{
		System.Object ptrConverted = InteropUtils.GetInstance<System.Object>(ptr);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.ReadIntPtr(ptrConverted, ofs);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadIntPtr_1")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_ReadIntPtr_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ ofs, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.ReadIntPtr(ptr, ofs);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadIntPtr_2")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_ReadIntPtr_2(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.ReadIntPtr(ptr);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadInt64_1")]
	internal static long /* System.Int64 */ System_Runtime_InteropServices_Marshal_ReadInt64_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ ofs, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Runtime.InteropServices.Marshal.ReadInt64(ptr, ofs);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReadInt64_2")]
	internal static long /* System.Int64 */ System_Runtime_InteropServices_Marshal_ReadInt64_2(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int64 __returnValue = System.Runtime.InteropServices.Marshal.ReadInt64(ptr);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteByte_1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteByte_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ ofs, byte /* System.Byte */ val, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteByte(ptr, ofs, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteByte_2")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteByte_2(nint /* System.IntPtr */ ptr, byte /* System.Byte */ val, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteByte(ptr, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteInt32_1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteInt32_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ ofs, int /* System.Int32 */ val, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteInt32(ptr, ofs, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteInt32_2")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteInt32_2(nint /* System.IntPtr */ ptr, int /* System.Int32 */ val, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteInt32(ptr, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteIntPtr")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteIntPtr(nint /* System.IntPtr */ ptr, int /* System.Int32 */ ofs, nint /* System.IntPtr */ val, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteIntPtr(ptr, ofs, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteIntPtr_1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteIntPtr_1(void* /* System.Object */ ptr, int /* System.Int32 */ ofs, nint /* System.IntPtr */ val, void** /* System.Exception */ __outException)
	{
		System.Object ptrConverted = InteropUtils.GetInstance<System.Object>(ptr);
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteIntPtr(ptrConverted, ofs, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteIntPtr_2")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteIntPtr_2(nint /* System.IntPtr */ ptr, nint /* System.IntPtr */ val, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteIntPtr(ptr, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteInt64_1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteInt64_1(nint /* System.IntPtr */ ptr, int /* System.Int32 */ ofs, long /* System.Int64 */ val, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteInt64(ptr, ofs, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_WriteInt64_2")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_WriteInt64_2(nint /* System.IntPtr */ ptr, long /* System.Int64 */ val, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.WriteInt64(ptr, val);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Prelink")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Prelink(void* /* System.Reflection.MethodInfo */ m, void** /* System.Exception */ __outException)
	{
		System.Reflection.MethodInfo mConverted = InteropUtils.GetInstance<System.Reflection.MethodInfo>(m);
	
	    try {
			System.Runtime.InteropServices.Marshal.Prelink(mConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PrelinkAll")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_PrelinkAll(void* /* System.Type */ c, void** /* System.Exception */ __outException)
	{
		System.Type cConverted = InteropUtils.GetInstance<System.Type>(c);
	
	    try {
			System.Runtime.InteropServices.Marshal.PrelinkAll(cConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_StructureToPtr_A1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_StructureToPtr_A1(void* /* System.Type */ T, void* /* T */ structure, nint /* System.IntPtr */ ptr, byte /* System.Boolean */ fDeleteOld, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Object structureConverted = InteropUtils.GetInstance<System.Object>(structure);
		System.Boolean fDeleteOldConverted = fDeleteOld.ToBool();
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.StructureToPtr);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { structureConverted, ptr, fDeleteOldConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TConverted, typeof(System.IntPtr), typeof(System.Boolean) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method StructureToPtr not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStructure")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_PtrToStructure(nint /* System.IntPtr */ ptr, void* /* System.Type */ structureType, void** /* System.Exception */ __outException)
	{
		System.Type structureTypeConverted = InteropUtils.GetInstance<System.Type>(structureType);
	
	    try {
			System.Object __returnValue = System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, structureTypeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStructure_1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_PtrToStructure_1(nint /* System.IntPtr */ ptr, void* /* System.Object */ structure, void** /* System.Exception */ __outException)
	{
		System.Object structureConverted = InteropUtils.GetInstance<System.Object>(structure);
	
	    try {
			System.Runtime.InteropServices.Marshal.PtrToStructure(ptr, structureConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStructure_A1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_PtrToStructure_A1(void* /* System.Type */ T, nint /* System.IntPtr */ ptr, void* /* T */ structure, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Object structureConverted = InteropUtils.GetInstance<System.Object>(structure);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.PtrToStructure);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { ptr, structureConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IntPtr), TConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method PtrToStructure not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStructure_A1_1")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_PtrToStructure_A1_1(void* /* System.Type */ T, nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.PtrToStructure);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { ptr };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IntPtr) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method PtrToStructure not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Object __returnValue = (System.Object)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_DestroyStructure_A1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_DestroyStructure_A1(void* /* System.Type */ T, nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.DestroyStructure);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { ptr };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IntPtr) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method DestroyStructure not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetHINSTANCE")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_GetHINSTANCE(void* /* System.Reflection.Module */ m, void** /* System.Exception */ __outException)
	{
		System.Reflection.Module mConverted = InteropUtils.GetInstance<System.Reflection.Module>(m);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.GetHINSTANCE(mConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetExceptionForHR")]
	internal static void* /* System.Exception */ System_Runtime_InteropServices_Marshal_GetExceptionForHR(int /* System.Int32 */ errorCode, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Exception __returnValue = System.Runtime.InteropServices.Marshal.GetExceptionForHR(errorCode);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetExceptionForHR_1")]
	internal static void* /* System.Exception */ System_Runtime_InteropServices_Marshal_GetExceptionForHR_1(int /* System.Int32 */ errorCode, nint /* System.IntPtr */ errorInfo, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Exception __returnValue = System.Runtime.InteropServices.Marshal.GetExceptionForHR(errorCode, errorInfo);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ThrowExceptionForHR")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_ThrowExceptionForHR(int /* System.Int32 */ errorCode, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(errorCode);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_ThrowExceptionForHR_1(int /* System.Int32 */ errorCode, nint /* System.IntPtr */ errorInfo, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(errorCode, errorInfo);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SecureStringToBSTR")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_SecureStringToBSTR(void* /* System.Security.SecureString */ s, void** /* System.Exception */ __outException)
	{
		System.Security.SecureString sConverted = InteropUtils.GetInstance<System.Security.SecureString>(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.SecureStringToBSTR(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemAnsi(void* /* System.Security.SecureString */ s, void** /* System.Exception */ __outException)
	{
		System.Security.SecureString sConverted = InteropUtils.GetInstance<System.Security.SecureString>(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_SecureStringToCoTaskMemUnicode(void* /* System.Security.SecureString */ s, void** /* System.Exception */ __outException)
	{
		System.Security.SecureString sConverted = InteropUtils.GetInstance<System.Security.SecureString>(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocAnsi(void* /* System.Security.SecureString */ s, void** /* System.Exception */ __outException)
	{
		System.Security.SecureString sConverted = InteropUtils.GetInstance<System.Security.SecureString>(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocUnicode")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_SecureStringToGlobalAllocUnicode(void* /* System.Security.SecureString */ s, void** /* System.Exception */ __outException)
	{
		System.Security.SecureString sConverted = InteropUtils.GetInstance<System.Security.SecureString>(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_StringToHGlobalAnsi(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_StringToHGlobalUni")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_StringToHGlobalUni(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.StringToHGlobalUni(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_StringToCoTaskMemUni")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_StringToCoTaskMemUni(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_StringToCoTaskMemUTF8")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_StringToCoTaskMemUTF8(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_StringToCoTaskMemAnsi")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_StringToCoTaskMemAnsi(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GenerateGuidForType")]
	internal static void* /* System.Guid */ System_Runtime_InteropServices_Marshal_GenerateGuidForType(void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.Guid __returnValue = System.Runtime.InteropServices.Marshal.GenerateGuidForType(typeConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GenerateProgIdForType")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_GenerateProgIdForType(void* /* System.Type */ type, void** /* System.Exception */ __outException)
	{
		System.Type typeConverted = InteropUtils.GetInstance<System.Type>(type);
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.GenerateProgIdForType(typeConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer")]
	internal static void* /* System.Delegate */ System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer(nint /* System.IntPtr */ ptr, void* /* System.Type */ t, void** /* System.Exception */ __outException)
	{
		System.Type tConverted = InteropUtils.GetInstance<System.Type>(t);
	
	    try {
			System.Delegate __returnValue = System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(ptr, tConverted);
			void* __returnValueNative = new System_Delegate(__returnValue).AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer_A1")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_GetDelegateForFunctionPointer_A1(void* /* System.Type */ TDelegate, nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
		System.Type TDelegateConverted = InteropUtils.GetInstance<System.Type>(TDelegate);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { ptr };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IntPtr) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TDelegateConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method GetDelegateForFunctionPointer not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Object __returnValue = (System.Object)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate(void* /* System.Delegate */ d, void** /* System.Exception */ __outException)
	{
		System.Delegate dConverted = InteropUtils.GetInstance<System_Delegate>(d)?.Trampoline;
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(dConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_A1")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_GetFunctionPointerForDelegate_A1(void* /* System.Type */ TDelegate, void* /* TDelegate */ d, void** /* System.Exception */ __outException)
	{
		System.Type TDelegateConverted = InteropUtils.GetInstance<System.Type>(TDelegate);
		System.Object dConverted = InteropUtils.GetInstance<System.Object>(d);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { dConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TDelegateConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TDelegateConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method GetFunctionPointerForDelegate not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.IntPtr __returnValue = (System.IntPtr)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetHRForLastWin32Error")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_GetHRForLastWin32Error(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ZeroFreeBSTR")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_ZeroFreeBSTR(nint /* System.IntPtr */ s, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(s);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemAnsi")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemAnsi(nint /* System.IntPtr */ s, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(s);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUnicode")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUnicode(nint /* System.IntPtr */ s, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(s);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUTF8")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_ZeroFreeCoTaskMemUTF8(nint /* System.IntPtr */ s, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(s);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocAnsi")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocAnsi(nint /* System.IntPtr */ s, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(s);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocUnicode")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_ZeroFreeGlobalAllocUnicode(nint /* System.IntPtr */ s, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(s);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_StringToBSTR")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_StringToBSTR(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.StringToBSTR(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStringBSTR")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_PtrToStringBSTR(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.PtrToStringBSTR(ptr);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetTypeFromCLSID")]
	internal static void* /* System.Type */ System_Runtime_InteropServices_Marshal_GetTypeFromCLSID(void* /* System.Guid */ clsid, void** /* System.Exception */ __outException)
	{
		System.Guid clsidConverted = InteropUtils.GetInstance<System.Guid>(clsid);
	
	    try {
			System.Type __returnValue = System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(clsidConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_InitHandle")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_InitHandle(void* /* System.Runtime.InteropServices.SafeHandle */ safeHandle, nint /* System.IntPtr */ handle, void** /* System.Exception */ __outException)
	{
		System.Runtime.InteropServices.SafeHandle safeHandleConverted = InteropUtils.GetInstance<System.Runtime.InteropServices.SafeHandle>(safeHandle);
	
	    try {
			System.Runtime.InteropServices.Marshal.InitHandle(safeHandleConverted, handle);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetLastWin32Error")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_GetLastWin32Error(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetLastPInvokeErrorMessage")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_GetLastPInvokeErrorMessage(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.GetLastPInvokeErrorMessage();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetHRForException")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_GetHRForException(void* /* System.Exception */ e, void** /* System.Exception */ __outException)
	{
		System.Exception eConverted = InteropUtils.GetInstance<System.Exception>(e);
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.GetHRForException(eConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_AreComObjectsAvailableForCleanup")]
	internal static byte /* System.Boolean */ System_Runtime_InteropServices_Marshal_AreComObjectsAvailableForCleanup(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Boolean __returnValue = System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_CreateAggregatedObject")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_CreateAggregatedObject(nint /* System.IntPtr */ pOuter, void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.CreateAggregatedObject(pOuter, oConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_BindToMoniker")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_BindToMoniker(byte* /* System.String */ monikerName, void** /* System.Exception */ __outException)
	{
		System.String monikerNameConverted = InteropUtils.ToDotNetString(monikerName);
	
	    try {
			System.Object __returnValue = System.Runtime.InteropServices.Marshal.BindToMoniker(monikerNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_CleanupUnusedObjectsInCurrentContext")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_CleanupUnusedObjectsInCurrentContext(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_CreateAggregatedObject_A1")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_CreateAggregatedObject_A1(void* /* System.Type */ T, nint /* System.IntPtr */ pOuter, void* /* T */ o, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.CreateAggregatedObject);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { pOuter, oConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IntPtr), TConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method CreateAggregatedObject not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.IntPtr __returnValue = (System.IntPtr)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_CreateWrapperOfType")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_CreateWrapperOfType(void* /* System.Object */ o, void* /* System.Type */ t, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
		System.Type tConverted = InteropUtils.GetInstance<System.Type>(t);
	
	    try {
			System.Object __returnValue = System.Runtime.InteropServices.Marshal.CreateWrapperOfType(oConverted, tConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_CreateWrapperOfType_A2")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_CreateWrapperOfType_A2(void* /* System.Type */ T, void* /* System.Type */ TWrapper, void* /* T */ o, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Type TWrapperConverted = InteropUtils.GetInstance<System.Type>(TWrapper);
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.CreateWrapperOfType);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { oConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted, TWrapperConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 2, __parameterTypesForGenericCall) ?? throw new Exception("Method CreateWrapperOfType not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Object __returnValue = (System.Object)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ChangeWrapperHandleStrength")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_ChangeWrapperHandleStrength(void* /* System.Object */ otp, byte /* System.Boolean */ fIsWeak, void** /* System.Exception */ __outException)
	{
		System.Object otpConverted = InteropUtils.GetInstance<System.Object>(otp);
		System.Boolean fIsWeakConverted = fIsWeak.ToBool();
	
	    try {
			System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(otpConverted, fIsWeakConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_FinalReleaseComObject")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_FinalReleaseComObject(void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.FinalReleaseComObject(oConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetComInterfaceForObject")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_GetComInterfaceForObject(void* /* System.Object */ o, void* /* System.Type */ T, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(oConverted, TConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_1")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_1(void* /* System.Object */ o, void* /* System.Type */ T, System.Runtime.InteropServices.CustomQueryInterfaceMode /* System.Runtime.InteropServices.CustomQueryInterfaceMode */ mode, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(oConverted, TConverted, mode);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_A2")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_GetComInterfaceForObject_A2(void* /* System.Type */ T, void* /* System.Type */ TInterface, void* /* T */ o, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Type TInterfaceConverted = InteropUtils.GetInstance<System.Type>(TInterface);
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.GetComInterfaceForObject);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { oConverted };
			System.Type[] __parameterTypesForGenericCall = new[] { TConverted };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted, TInterfaceConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 2, __parameterTypesForGenericCall) ?? throw new Exception("Method GetComInterfaceForObject not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.IntPtr __returnValue = (System.IntPtr)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetComObjectData")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_GetComObjectData(void* /* System.Object */ obj, void* /* System.Object */ key, void** /* System.Exception */ __outException)
	{
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
	
	    try {
			System.Object __returnValue = System.Runtime.InteropServices.Marshal.GetComObjectData(objConverted, keyConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetIDispatchForObject")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_GetIDispatchForObject(void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.GetIDispatchForObject(oConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetIUnknownForObject")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_GetIUnknownForObject(void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.GetIUnknownForObject(oConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetNativeVariantForObject")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_GetNativeVariantForObject(void* /* System.Object */ obj, nint /* System.IntPtr */ pDstNativeVariant, void** /* System.Exception */ __outException)
	{
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(objConverted, pDstNativeVariant);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetNativeVariantForObject_A1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_GetNativeVariantForObject_A1(void* /* System.Type */ T, void* /* T */ obj, nint /* System.IntPtr */ pDstNativeVariant, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.GetNativeVariantForObject);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { objConverted, pDstNativeVariant };
			System.Type[] __parameterTypesForGenericCall = new[] { TConverted, typeof(System.IntPtr) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method GetNativeVariantForObject not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetTypedObjectForIUnknown")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_GetTypedObjectForIUnknown(nint /* System.IntPtr */ pUnk, void* /* System.Type */ t, void** /* System.Exception */ __outException)
	{
		System.Type tConverted = InteropUtils.GetInstance<System.Type>(t);
	
	    try {
			System.Object __returnValue = System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(pUnk, tConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetObjectForIUnknown")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_GetObjectForIUnknown(nint /* System.IntPtr */ pUnk, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Object __returnValue = System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(pUnk);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant(nint /* System.IntPtr */ pSrcNativeVariant, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Object __returnValue = System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(pSrcNativeVariant);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant_A1")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_GetObjectForNativeVariant_A1(void* /* System.Type */ T, nint /* System.IntPtr */ pSrcNativeVariant, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { pSrcNativeVariant };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IntPtr) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method GetObjectForNativeVariant not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Object __returnValue = (System.Object)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants")]
	internal static void* /* System.Object[] */ System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants(nint /* System.IntPtr */ aSrcNativeVariant, int /* System.Int32 */ cVars, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Object[] __returnValue = System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(aSrcNativeVariant, cVars);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants_A1")]
	internal static void* /* System.Array */ System_Runtime_InteropServices_Marshal_GetObjectsForNativeVariants_A1(void* /* System.Type */ T, nint /* System.IntPtr */ aSrcNativeVariant, int /* System.Int32 */ cVars, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(System.Runtime.InteropServices.Marshal);
			System.String __nameOfMethodForGenericCall = nameof(System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { aSrcNativeVariant, cVars };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.IntPtr), typeof(System.Int32) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method GetObjectsForNativeVariants not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Array __returnValue = (System.Array)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetStartComSlot")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_GetStartComSlot(void* /* System.Type */ t, void** /* System.Exception */ __outException)
	{
		System.Type tConverted = InteropUtils.GetInstance<System.Type>(t);
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.GetStartComSlot(tConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetEndComSlot")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_GetEndComSlot(void* /* System.Type */ t, void** /* System.Exception */ __outException)
	{
		System.Type tConverted = InteropUtils.GetInstance<System.Type>(t);
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.GetEndComSlot(tConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetUniqueObjectForIUnknown")]
	internal static void* /* System.Object */ System_Runtime_InteropServices_Marshal_GetUniqueObjectForIUnknown(nint /* System.IntPtr */ unknown, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Object __returnValue = System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(unknown);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_IsComObject")]
	internal static byte /* System.Boolean */ System_Runtime_InteropServices_Marshal_IsComObject(void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Boolean __returnValue = System.Runtime.InteropServices.Marshal.IsComObject(oConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_IsTypeVisibleFromCom")]
	internal static byte /* System.Boolean */ System_Runtime_InteropServices_Marshal_IsTypeVisibleFromCom(void* /* System.Type */ t, void** /* System.Exception */ __outException)
	{
		System.Type tConverted = InteropUtils.GetInstance<System.Type>(t);
	
	    try {
			System.Boolean __returnValue = System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(tConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReleaseComObject")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_ReleaseComObject(void* /* System.Object */ o, void** /* System.Exception */ __outException)
	{
		System.Object oConverted = InteropUtils.GetInstance<System.Object>(o);
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.ReleaseComObject(oConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SetComObjectData")]
	internal static byte /* System.Boolean */ System_Runtime_InteropServices_Marshal_SetComObjectData(void* /* System.Object */ obj, void* /* System.Object */ key, void* /* System.Object */ data, void** /* System.Exception */ __outException)
	{
		System.Object objConverted = InteropUtils.GetInstance<System.Object>(obj);
		System.Object keyConverted = InteropUtils.GetInstance<System.Object>(key);
		System.Object dataConverted = InteropUtils.GetInstance<System.Object>(data);
	
	    try {
			System.Boolean __returnValue = System.Runtime.InteropServices.Marshal.SetComObjectData(objConverted, keyConverted, dataConverted);
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStringAuto")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_PtrToStringAuto(nint /* System.IntPtr */ ptr, int /* System.Int32 */ len, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.PtrToStringAuto(ptr, len);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_PtrToStringAuto_1")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_PtrToStringAuto_1(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.PtrToStringAuto(ptr);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_StringToHGlobalAuto")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_StringToHGlobalAuto(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_StringToCoTaskMemAuto")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_StringToCoTaskMemAuto(byte* /* System.String */ s, void** /* System.Exception */ __outException)
	{
		System.String sConverted = InteropUtils.ToDotNetString(s);
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(sConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_AllocHGlobal_1")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_AllocHGlobal_1(nint /* System.IntPtr */ cb, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.AllocHGlobal(cb);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_FreeHGlobal")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_FreeHGlobal(nint /* System.IntPtr */ hglobal, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.FreeHGlobal(hglobal);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReAllocHGlobal")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_ReAllocHGlobal(nint /* System.IntPtr */ pv, nint /* System.IntPtr */ cb, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.ReAllocHGlobal(pv, cb);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_AllocCoTaskMem")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_AllocCoTaskMem(int /* System.Int32 */ cb, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.AllocCoTaskMem(cb);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_FreeCoTaskMem")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_FreeCoTaskMem(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.FreeCoTaskMem(ptr);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem")]
	internal static nint /* System.IntPtr */ System_Runtime_InteropServices_Marshal_ReAllocCoTaskMem(nint /* System.IntPtr */ pv, int /* System.Int32 */ cb, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.IntPtr __returnValue = System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(pv, cb);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return nint.Zero;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_FreeBSTR")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_FreeBSTR(nint /* System.IntPtr */ ptr, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.FreeBSTR(ptr);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetLastSystemError")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_GetLastSystemError(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.GetLastSystemError();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SetLastSystemError")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_SetLastSystemError(int /* System.Int32 */ error, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Runtime.InteropServices.Marshal.SetLastSystemError(error);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_GetPInvokeErrorMessage")]
	internal static byte* /* System.String */ System_Runtime_InteropServices_Marshal_GetPInvokeErrorMessage(int /* System.Int32 */ error, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = System.Runtime.InteropServices.Marshal.GetPInvokeErrorMessage(error);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SystemDefaultCharSize_Get")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_SystemDefaultCharSize_Get()
	{
	
		System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.SystemDefaultCharSize;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_SystemMaxDBCSCharSize_Get")]
	internal static int /* System.Int32 */ System_Runtime_InteropServices_Marshal_SystemMaxDBCSCharSize_Get()
	{
	
		System.Int32 __returnValue = System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_InteropServices_Marshal_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.InteropServices.Marshal);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_Marshal_Destroy_1")]
	internal static void /* System.Void */ System_Runtime_InteropServices_Marshal_Destroy_1(void* /* System.Runtime.InteropServices.Marshal */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "T" was skipped. Reason: It has no full name.

// Type "T" was skipped. Reason: It has no full name.





// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
internal unsafe class System_Security_SecureString
{
	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_AppendChar")]
	internal static void /* System.Void */ System_Security_SecureString_AppendChar(void* /* System.Security.SecureString */ __self, char /* System.Char */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecureString __selfConverted = InteropUtils.GetInstance<System.Security.SecureString>(__self);
	
	
	    try {
			__selfConverted.AppendChar(c);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_Clear")]
	internal static void /* System.Void */ System_Security_SecureString_Clear(void* /* System.Security.SecureString */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecureString __selfConverted = InteropUtils.GetInstance<System.Security.SecureString>(__self);
	
	
	    try {
			__selfConverted.Clear();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_Copy")]
	internal static void* /* System.Security.SecureString */ System_Security_SecureString_Copy(void* /* System.Security.SecureString */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecureString __selfConverted = InteropUtils.GetInstance<System.Security.SecureString>(__self);
	
	
	    try {
			System.Security.SecureString __returnValue = __selfConverted.Copy();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_Dispose")]
	internal static void /* System.Void */ System_Security_SecureString_Dispose(void* /* System.Security.SecureString */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecureString __selfConverted = InteropUtils.GetInstance<System.Security.SecureString>(__self);
	
	
	    try {
			__selfConverted.Dispose();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_InsertAt")]
	internal static void /* System.Void */ System_Security_SecureString_InsertAt(void* /* System.Security.SecureString */ __self, int /* System.Int32 */ index, char /* System.Char */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecureString __selfConverted = InteropUtils.GetInstance<System.Security.SecureString>(__self);
	
	
	    try {
			__selfConverted.InsertAt(index, c);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_IsReadOnly")]
	internal static byte /* System.Boolean */ System_Security_SecureString_IsReadOnly(void* /* System.Security.SecureString */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecureString __selfConverted = InteropUtils.GetInstance<System.Security.SecureString>(__self);
	
	
	    try {
			System.Boolean __returnValue = __selfConverted.IsReadOnly();
			byte __returnValueNative = __returnValue.ToCBool();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return 0;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_MakeReadOnly")]
	internal static void /* System.Void */ System_Security_SecureString_MakeReadOnly(void* /* System.Security.SecureString */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecureString __selfConverted = InteropUtils.GetInstance<System.Security.SecureString>(__self);
	
	
	    try {
			__selfConverted.MakeReadOnly();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_RemoveAt")]
	internal static void /* System.Void */ System_Security_SecureString_RemoveAt(void* /* System.Security.SecureString */ __self, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecureString __selfConverted = InteropUtils.GetInstance<System.Security.SecureString>(__self);
	
	
	    try {
			__selfConverted.RemoveAt(index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_SetAt")]
	internal static void /* System.Void */ System_Security_SecureString_SetAt(void* /* System.Security.SecureString */ __self, int /* System.Int32 */ index, char /* System.Char */ c, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecureString __selfConverted = InteropUtils.GetInstance<System.Security.SecureString>(__self);
	
	
	    try {
			__selfConverted.SetAt(index, c);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_Create")]
	internal static void* /* System.Security.SecureString */ System_Security_SecureString_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			System.Security.SecureString __returnValue = new System.Security.SecureString();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_Length_Get")]
	internal static int /* System.Int32 */ System_Security_SecureString_Length_Get(void* /* System.Security.SecureString */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		System.Security.SecureString __selfConverted = InteropUtils.GetInstance<System.Security.SecureString>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Length;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_TypeOf")]
	internal static void* /* System.Type */ System_Security_SecureString_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Security.SecureString);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "System_Security_SecureString_Destroy")]
	internal static void /* System.Void */ System_Security_SecureString_Destroy(void* /* System.Security.SecureString */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "TDelegate" was skipped. Reason: It has no full name.
// Type "TDelegate" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "TWrapper" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
internal unsafe class System_Runtime_InteropServices_CustomQueryInterfaceMode
{
	[UnmanagedCallersOnly(EntryPoint = "System_Runtime_InteropServices_CustomQueryInterfaceMode_TypeOf")]
	internal static void* /* System.Type */ System_Runtime_InteropServices_CustomQueryInterfaceMode_TypeOf()
	{
	
		System.Type __returnValue = typeof(System.Runtime.InteropServices.CustomQueryInterfaceMode);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.
// Type "T" was skipped. Reason: It has no full name.

// Type "T" was skipped. Reason: It has no full name.

internal unsafe class NativeAOT_CodeGeneratorInputSample_MoveDelegate
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, byte* /* System.String */ /* newStreet */, byte* /* System.String */ /* newCity */, void* /* NativeAOT.CodeGeneratorInputSample.Address */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<NativeAOT.CodeGeneratorInputSample.MoveDelegate> m_trampoline;
	internal NativeAOT.CodeGeneratorInputSample.MoveDelegate Trampoline
	{
		get {
			NativeAOT.CodeGeneratorInputSample.MoveDelegate? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private NativeAOT_CodeGeneratorInputSample_MoveDelegate(void* context, delegate* unmanaged<void* /* context */, byte* /* System.String */ /* newStreet */, byte* /* System.String */ /* newCity */, void* /* NativeAOT.CodeGeneratorInputSample.Address */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal NativeAOT_CodeGeneratorInputSample_MoveDelegate(NativeAOT.CodeGeneratorInputSample.MoveDelegate originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~NativeAOT_CodeGeneratorInputSample_MoveDelegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private NativeAOT.CodeGeneratorInputSample.MoveDelegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(NativeAOT_CodeGeneratorInputSample_MoveDelegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		NativeAOT.CodeGeneratorInputSample.MoveDelegate trampoline = (NativeAOT.CodeGeneratorInputSample.MoveDelegate)System.Delegate.CreateDelegate(typeof(NativeAOT.CodeGeneratorInputSample.MoveDelegate), this, invocationMethod);

		return trampoline;
	}

	private NativeAOT.CodeGeneratorInputSample.Address __InvokeByCallingCFunction(System.String /* System.String */ newStreet, System.String /* System.String */ newCity)
	{
		byte* newStreetConverted = newStreet.CopyToCString();
		byte* newCityConverted = newCity.CopyToCString();
	


		var __returnValue = CFunction(Context, newStreetConverted, newCityConverted);
		var __returnValueConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Address>(__returnValue);

		InteropUtils.FreeIfAllocated(__returnValue);

		return __returnValueConverted;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_MoveDelegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, byte* /* System.String */ /* newStreet */, byte* /* System.String */ /* newCity */, void* /* NativeAOT.CodeGeneratorInputSample.Address */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new NativeAOT_CodeGeneratorInputSample_MoveDelegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_MoveDelegate_Invoke")]
	public static void* /* NativeAOT.CodeGeneratorInputSample.Address */ Invoke(void* self, byte* /* System.String */ newStreet, byte* /* System.String */ newCity, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_MoveDelegate>(self);

			System.String newStreetConverted = InteropUtils.ToDotNetString(newStreet);
			System.String newCityConverted = InteropUtils.ToDotNetString(newCity);
		


			var __returnValue = selfConverted.Trampoline(newStreetConverted, newCityConverted);
			var __returnValueConverted = __returnValue.AllocateGCHandleAndGetAddress();

			return __returnValueConverted;
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

			return null;
		}
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_MoveDelegate_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_MoveDelegate>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_MoveDelegate_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, byte* /* System.String */ /* newStreet */, byte* /* System.String */ /* newCity */, void* /* NativeAOT.CodeGeneratorInputSample.Address */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_MoveDelegate>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_MoveDelegate_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_MoveDelegate>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_MoveDelegate_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_MoveDelegate_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.MoveDelegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Address
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Address_Move")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Address */ NativeAOT_CodeGeneratorInputSample_Address_Move(void* /* NativeAOT.CodeGeneratorInputSample.Address */ __self, void* /* NativeAOT.CodeGeneratorInputSample.MoveDelegate */ mover, byte* /* System.String */ newStreet, byte* /* System.String */ newCity, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Address __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Address>(__self);
	
		NativeAOT.CodeGeneratorInputSample.MoveDelegate moverConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_MoveDelegate>(mover)?.Trampoline;
		System.String newStreetConverted = InteropUtils.ToDotNetString(newStreet);
		System.String newCityConverted = InteropUtils.ToDotNetString(newCity);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Address __returnValue = __selfConverted.Move(moverConverted, newStreetConverted, newCityConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Address_Create")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Address */ NativeAOT_CodeGeneratorInputSample_Address_Create(byte* /* System.String */ street, byte* /* System.String */ city, void** /* System.Exception */ __outException)
	{
		System.String streetConverted = InteropUtils.ToDotNetString(street);
		System.String cityConverted = InteropUtils.ToDotNetString(city);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Address __returnValue = new NativeAOT.CodeGeneratorInputSample.Address(streetConverted, cityConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Address_Street_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Address_Street_Get(void* /* NativeAOT.CodeGeneratorInputSample.Address */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Address __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Address>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Street;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Address_City_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Address_City_Get(void* /* NativeAOT.CodeGeneratorInputSample.Address */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Address __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Address>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.City;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Address_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_Address_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.Address);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Address_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Address_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Address */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, byte* /* System.String */ /* animalName */, void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate> m_trampoline;
	internal NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate Trampoline
	{
		get {
			NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate(void* context, delegate* unmanaged<void* /* context */, byte* /* System.String */ /* animalName */, void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate(NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate trampoline = (NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate)System.Delegate.CreateDelegate(typeof(NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate), this, invocationMethod);

		return trampoline;
	}

	private NativeAOT.CodeGeneratorInputSample.IAnimal __InvokeByCallingCFunction(System.String /* System.String */ animalName)
	{
		byte* animalNameConverted = animalName.CopyToCString();
	


		var __returnValue = CFunction(Context, animalNameConverted);
		var __returnValueConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.IAnimal>(__returnValue);

		InteropUtils.FreeIfAllocated(__returnValue);

		return __returnValueConverted;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, byte* /* System.String */ /* animalName */, void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_Invoke")]
	public static void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ Invoke(void* self, byte* /* System.String */ animalName, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate>(self);

			System.String animalNameConverted = InteropUtils.ToDotNetString(animalName);
		


			var __returnValue = selfConverted.Trampoline(animalNameConverted);
			var __returnValueConverted = __returnValue.AllocateGCHandleAndGetAddress();

			return __returnValueConverted;
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

			return null;
		}
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, byte* /* System.String */ /* animalName */, void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_IAnimal
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_IAnimal_Eat")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_IAnimal_Eat(void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ __self, byte* /* System.String */ food, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.IAnimal __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.IAnimal>(__self);
	
		System.String foodConverted = InteropUtils.ToDotNetString(food);
	
	    try {
			System.String __returnValue = __selfConverted.Eat(foodConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_IAnimal_Name_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_IAnimal_Name_Get(void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.IAnimal __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.IAnimal>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_IAnimal_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_IAnimal_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.IAnimal);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_IAnimal_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_IAnimal_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_AnimalFactory
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal(byte* /* System.String */ animalName, void** /* System.Exception */ __outException)
	{
		System.String animalNameConverted = InteropUtils.ToDotNetString(animalName);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.IAnimal __returnValue = NativeAOT.CodeGeneratorInputSample.AnimalFactory.CreateAnimal(animalNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal_1")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.IAnimal */ NativeAOT_CodeGeneratorInputSample_AnimalFactory_CreateAnimal_1(byte* /* System.String */ animalName, void* /* NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate */ creator, void** /* System.Exception */ __outException)
	{
		System.String animalNameConverted = InteropUtils.ToDotNetString(animalName);
		NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate creatorConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate>(creator)?.Trampoline;
	
	    try {
			NativeAOT.CodeGeneratorInputSample.IAnimal __returnValue = NativeAOT.CodeGeneratorInputSample.AnimalFactory.CreateAnimal(animalNameConverted, creatorConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalFactory_DEFAULT_CREATOR_Get")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate */ NativeAOT_CodeGeneratorInputSample_AnimalFactory_DEFAULT_CREATOR_Get()
	{
	
		NativeAOT.CodeGeneratorInputSample.AnimalCreatorDelegate __returnValue = NativeAOT.CodeGeneratorInputSample.AnimalFactory.DEFAULT_CREATOR;
		void* __returnValueNative = new NativeAOT_CodeGeneratorInputSample_AnimalCreatorDelegate(__returnValue).AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalFactory_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_AnimalFactory_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.AnimalFactory);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_AnimalFactory_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_AnimalFactory_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.AnimalFactory */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_BaseAnimal
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_BaseAnimal_Eat")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_BaseAnimal_Eat(void* /* NativeAOT.CodeGeneratorInputSample.BaseAnimal */ __self, byte* /* System.String */ food, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.BaseAnimal __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.BaseAnimal>(__self);
	
		System.String foodConverted = InteropUtils.ToDotNetString(food);
	
	    try {
			System.String __returnValue = __selfConverted.Eat(foodConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_BaseAnimal_Name_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_BaseAnimal_Name_Get(void* /* NativeAOT.CodeGeneratorInputSample.BaseAnimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.BaseAnimal __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.BaseAnimal>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_BaseAnimal_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_BaseAnimal_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.BaseAnimal);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_BaseAnimal_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_BaseAnimal_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.BaseAnimal */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Cat
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Cat_Name_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Cat_Name_Get(void* /* NativeAOT.CodeGeneratorInputSample.Cat */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Cat __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Cat>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Cat_CatName_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Cat_CatName_Get()
	{
	
		System.String __returnValue = NativeAOT.CodeGeneratorInputSample.Cat.CatName;
		byte* __returnValueNative = __returnValue.CopyToCString();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Cat_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_Cat_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.Cat);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Cat_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Cat_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Cat */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Dog
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Dog_Name_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Dog_Name_Get(void* /* NativeAOT.CodeGeneratorInputSample.Dog */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Dog __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Dog>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Dog_DogName_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Dog_DogName_Get()
	{
	
		System.String __returnValue = NativeAOT.CodeGeneratorInputSample.Dog.DogName;
		byte* __returnValueNative = __returnValue.CopyToCString();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Dog_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_Dog_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.Dog);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Dog_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Dog_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Dog */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_GenericAnimal
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericAnimal_Create")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.GenericAnimal */ NativeAOT_CodeGeneratorInputSample_GenericAnimal_Create(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.GenericAnimal __returnValue = new NativeAOT.CodeGeneratorInputSample.GenericAnimal(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericAnimal_Name_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_GenericAnimal_Name_Get(void* /* NativeAOT.CodeGeneratorInputSample.GenericAnimal */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.GenericAnimal __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.GenericAnimal>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericAnimal_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_GenericAnimal_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.GenericAnimal);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericAnimal_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_GenericAnimal_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.GenericAnimal */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_GenericTests
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericType_A1")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericType_A1(void* /* System.Type */ T, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(NativeAOT.CodeGeneratorInputSample.GenericTests);
			System.String __nameOfMethodForGenericCall = nameof(NativeAOT.CodeGeneratorInputSample.GenericTests.ReturnGenericType);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[]? __parametersForGenericCall = null;
			System.Type[] __parameterTypesForGenericCall = System.Type.EmptyTypes;
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method ReturnGenericType not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Type __returnValue = (System.Type)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericTypes_A2")]
	internal static void* /* System.Type[] */ NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnGenericTypes_A2(void* /* System.Type */ T1, void* /* System.Type */ T2, void** /* System.Exception */ __outException)
	{
		System.Type T1Converted = InteropUtils.GetInstance<System.Type>(T1);
		System.Type T2Converted = InteropUtils.GetInstance<System.Type>(T2);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(NativeAOT.CodeGeneratorInputSample.GenericTests);
			System.String __nameOfMethodForGenericCall = nameof(NativeAOT.CodeGeneratorInputSample.GenericTests.ReturnGenericTypes);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[]? __parametersForGenericCall = null;
			System.Type[] __parameterTypesForGenericCall = System.Type.EmptyTypes;
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { T1Converted, T2Converted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 2, __parameterTypesForGenericCall) ?? throw new Exception("Method ReturnGenericTypes not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Type[] __returnValue = (System.Type[])__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnDefaultValueOfGenericType_A1")]
	internal static void* /* System.Object */ NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnDefaultValueOfGenericType_A1(void* /* System.Type */ T, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(NativeAOT.CodeGeneratorInputSample.GenericTests);
			System.String __nameOfMethodForGenericCall = nameof(NativeAOT.CodeGeneratorInputSample.GenericTests.ReturnDefaultValueOfGenericType);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[]? __parametersForGenericCall = null;
			System.Type[] __parameterTypesForGenericCall = System.Type.EmptyTypes;
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method ReturnDefaultValueOfGenericType not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Object __returnValue = (System.Object)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnArrayOfDefaultValuesOfGenericType_A1")]
	internal static void* /* System.Array */ NativeAOT_CodeGeneratorInputSample_GenericTests_ReturnArrayOfDefaultValuesOfGenericType_A1(void* /* System.Type */ T, int /* System.Int32 */ numberOfElements, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __targetTypeForGenericCall = typeof(NativeAOT.CodeGeneratorInputSample.GenericTests);
			System.String __nameOfMethodForGenericCall = nameof(NativeAOT.CodeGeneratorInputSample.GenericTests.ReturnArrayOfDefaultValuesOfGenericType);
			System.Object? __methodTargetForGenericCall = null;
	
			System.Object[] __parametersForGenericCall = new System.Object[] { numberOfElements };
			System.Type[] __parameterTypesForGenericCall = new[] { typeof(System.Int32) };
	
			System.Type[] __genericParameterTypesForGenericCall = new[] { TConverted };
	
			System.Reflection.MethodInfo __methodForGenericCall = __targetTypeForGenericCall.GetMethod(__nameOfMethodForGenericCall, 1, __parameterTypesForGenericCall) ?? throw new Exception("Method ReturnArrayOfDefaultValuesOfGenericType not found");
			System.Reflection.MethodInfo __genericMethodForGenericCall = __methodForGenericCall.MakeGenericMethod(__genericParameterTypesForGenericCall);
	
			System.Array __returnValue = (System.Array)__genericMethodForGenericCall.Invoke(__methodTargetForGenericCall, __parametersForGenericCall);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericTests_CallReturnGenericTypeThroughReflection")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_GenericTests_CallReturnGenericTypeThroughReflection(void* /* System.Type */ T, void** /* System.Exception */ __outException)
	{
		System.Type TConverted = InteropUtils.GetInstance<System.Type>(T);
	
	    try {
			System.Type __returnValue = NativeAOT.CodeGeneratorInputSample.GenericTests.CallReturnGenericTypeThroughReflection(TConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericTests_Create")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.GenericTests */ NativeAOT_CodeGeneratorInputSample_GenericTests_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			NativeAOT.CodeGeneratorInputSample.GenericTests __returnValue = new NativeAOT.CodeGeneratorInputSample.GenericTests();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericTests_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_GenericTests_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.GenericTests);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_GenericTests_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_GenericTests_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.GenericTests */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


// Type "T" was skipped. Reason: It has no full name.

// Type "T" was skipped. Reason: It has no full name.

internal unsafe class NativeAOT_CodeGeneratorInputSample_NiceLevels
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_NiceLevels_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_NiceLevels_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.NiceLevels);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Person
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_GetNiceLevelString")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Person_GetNiceLevelString(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetNiceLevelString();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_GetWelcomeMessage")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Person_GetWelcomeMessage(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetWelcomeMessage();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_AddChild")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_AddChild(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Person */ child, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
		NativeAOT.CodeGeneratorInputSample.Person childConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(child);
	
	    try {
			__selfConverted.AddChild(childConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_RemoveChild")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_RemoveChild(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Person */ child, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
		NativeAOT.CodeGeneratorInputSample.Person childConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(child);
	
	    try {
			__selfConverted.RemoveChild(childConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_RemoveChildAt")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_RemoveChildAt(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.RemoveChildAt(index);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_ChildAt")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Person */ NativeAOT_CodeGeneratorInputSample_Person_ChildAt(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, int /* System.Int32 */ index, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Person __returnValue = __selfConverted.ChildAt(index);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_ChangeAge")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_ChangeAge(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate */ newAgeProvider, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
		NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate newAgeProviderConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate>(newAgeProvider)?.Trampoline;
	
	    try {
			__selfConverted.ChangeAge(newAgeProviderConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Create")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Person */ NativeAOT_CodeGeneratorInputSample_Person_Create(byte* /* System.String */ firstName, byte* /* System.String */ lastName, int /* System.Int32 */ age, void** /* System.Exception */ __outException)
	{
		System.String firstNameConverted = InteropUtils.ToDotNetString(firstName);
		System.String lastNameConverted = InteropUtils.ToDotNetString(lastName);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Person __returnValue = new NativeAOT.CodeGeneratorInputSample.Person(firstNameConverted, lastNameConverted, age);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Create_1")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Person */ NativeAOT_CodeGeneratorInputSample_Person_Create_1(byte* /* System.String */ firstName, byte* /* System.String */ lastName, void** /* System.Exception */ __outException)
	{
		System.String firstNameConverted = InteropUtils.ToDotNetString(firstName);
		System.String lastNameConverted = InteropUtils.ToDotNetString(lastName);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Person __returnValue = new NativeAOT.CodeGeneratorInputSample.Person(firstNameConverted, lastNameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_FirstName_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Person_FirstName_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FirstName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_FirstName_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_FirstName_Set(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.FirstName = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_LastName_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Person_LastName_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.LastName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_LastName_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_LastName_Set(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, byte* /* System.String */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.LastName = InteropUtils.ToDotNetString(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Age_Get")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_Person_Age_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Age;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Age_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_Age_Set(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, int /* System.Int32 */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.Age = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Address_Get")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Address */ NativeAOT_CodeGeneratorInputSample_Person_Address_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Address __returnValue = __selfConverted.Address;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Address_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_Address_Set(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Address */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.Address = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Address>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Children_Get")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Person[] */ NativeAOT_CodeGeneratorInputSample_Person_Children_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Person[] __returnValue = __selfConverted.Children;
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Children_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_Children_Set(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Person[] */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.Children = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person[]>(__value);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Get")]
	internal static NativeAOT.CodeGeneratorInputSample.NiceLevels /* NativeAOT.CodeGeneratorInputSample.NiceLevels */ NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			NativeAOT.CodeGeneratorInputSample.NiceLevels __returnValue = __selfConverted.NiceLevel;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return default(NativeAOT.CodeGeneratorInputSample.NiceLevels);
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_NiceLevel_Set(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, NativeAOT.CodeGeneratorInputSample.NiceLevels /* NativeAOT.CodeGeneratorInputSample.NiceLevels */ __value, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			__selfConverted.NiceLevel = __value;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_FullName_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Person_FullName_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.FullName;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildren_Get")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildren_Get(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.NumberOfChildren;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChanged_Add")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChanged_Add(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
		__selfConverted.NumberOfChildrenChanged += InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate>(__value)?.Trampoline;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChanged_Remove")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChanged_Remove(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Person __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(__self);
	
	
		__selfConverted.NumberOfChildrenChanged -= InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate>(__value)?.Trampoline;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_DEFAULT_AGE_Get")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_Person_DEFAULT_AGE_Get()
	{
	
		System.Int32 __returnValue = NativeAOT.CodeGeneratorInputSample.Person.DEFAULT_AGE;
		return __returnValue;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_DEFAULT_AGE_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_DEFAULT_AGE_Set(int /* System.Int32 */ __value)
	{
	
		NativeAOT.CodeGeneratorInputSample.Person.DEFAULT_AGE = __value;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_AGE_WHEN_BORN_Get")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_Person_AGE_WHEN_BORN_Get()
	{
	
		System.Int32 __returnValue = NativeAOT.CodeGeneratorInputSample.Person.AGE_WHEN_BORN;
		return __returnValue;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_Person_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.Person);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Person */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate> m_trampoline;
	internal NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate Trampoline
	{
		get {
			NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate(NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate trampoline = (NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate)System.Delegate.CreateDelegate(typeof(NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate), this, invocationMethod);

		return trampoline;
	}

	private void __InvokeByCallingCFunction()
	{
	


		CFunction(Context);
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_Invoke")]
	public static void /* System.Void */ Invoke(void* self, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate>(self);

		


			selfConverted.Trampoline();
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

		}
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, void /* System.Void */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_NumberOfChildrenChangedDelegate_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Person.NumberOfChildrenChangedDelegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, int /* System.Int32 */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate> m_trampoline;
	internal NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate Trampoline
	{
		get {
			NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate(void* context, delegate* unmanaged<void* /* context */, int /* System.Int32 */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate(NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate trampoline = (NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate)System.Delegate.CreateDelegate(typeof(NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate), this, invocationMethod);

		return trampoline;
	}

	private System.Int32 __InvokeByCallingCFunction()
	{
	


		var __returnValue = CFunction(Context);
		return __returnValue;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, int /* System.Int32 */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Invoke")]
	public static int /* System.Int32 */ Invoke(void* self, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate>(self);

		


			var __returnValue = selfConverted.Trampoline();
			return __returnValue;
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

			return -1;
		}
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, int /* System.Int32 */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_NewAgeProviderDelegate_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Person.NewAgeProviderDelegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Person_Extensions
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Extensions_IncreaseAge")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_Extensions_IncreaseAge(void* /* NativeAOT.CodeGeneratorInputSample.Person */ person, int /* System.Int32 */ byYears, void** /* System.Exception */ __outException)
	{
		NativeAOT.CodeGeneratorInputSample.Person personConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Person>(person);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Person_Extensions.IncreaseAge(personConverted, byYears);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Extensions_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_Person_Extensions_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.Person_Extensions);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Person_Extensions_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Person_Extensions_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Person_Extensions */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_TestEnum
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestEnum_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_TestEnum_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.TestEnum);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_ByRefReturnValueDelegate
{
	// TODO: Unsupported delegate type. Reason: Has by ref return type
}


internal unsafe class NativeAOT_CodeGeneratorInputSample_ByRefParametersDelegate
{
	// TODO: Unsupported delegate type. Reason: Has by ref parameters
}


internal unsafe class NativeAOT_CodeGeneratorInputSample_OutParametersDelegate
{
	// TODO: Unsupported delegate type. Reason: Has out parameters
}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Book
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Book_Create")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Book */ NativeAOT_CodeGeneratorInputSample_Book_Create(byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Book __returnValue = new NativeAOT.CodeGeneratorInputSample.Book(nameConverted);
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Book_Name_Get")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Book_Name_Get(void* /* NativeAOT.CodeGeneratorInputSample.Book */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.Book __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Book>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.Name;
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Book_DonQuixote_Get")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Book */ NativeAOT_CodeGeneratorInputSample_Book_DonQuixote_Get()
	{
	
		NativeAOT.CodeGeneratorInputSample.Book __returnValue = NativeAOT.CodeGeneratorInputSample.Book.DonQuixote;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Book_ATaleOfTwoCities_Get")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Book */ NativeAOT_CodeGeneratorInputSample_Book_ATaleOfTwoCities_Get()
	{
	
		NativeAOT.CodeGeneratorInputSample.Book __returnValue = NativeAOT.CodeGeneratorInputSample.Book.ATaleOfTwoCities;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Book_TheLordOfTheRings_Get")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Book */ NativeAOT_CodeGeneratorInputSample_Book_TheLordOfTheRings_Get()
	{
	
		NativeAOT.CodeGeneratorInputSample.Book __returnValue = NativeAOT.CodeGeneratorInputSample.Book.TheLordOfTheRings;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Book_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_Book_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.Book);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Book_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Book_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Book */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_TestClass
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_SayHello")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_SayHello(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			__selfConverted.SayHello();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_SayHello_1")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_SayHello_1(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, byte* /* System.String */ name, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
		System.String nameConverted = InteropUtils.ToDotNetString(name);
	
	    try {
			__selfConverted.SayHello(nameConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_GetHello")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_TestClass_GetHello(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			System.String __returnValue = __selfConverted.GetHello();
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_GetDate")]
	internal static void* /* System.DateTime */ NativeAOT_CodeGeneratorInputSample_TestClass_GetDate(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			System.DateTime __returnValue = __selfConverted.GetDate();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_Add")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_TestClass_Add(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, int /* System.Int32 */ number1, int /* System.Int32 */ number2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Add(number1, number2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_Divide")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_TestClass_Divide(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, int /* System.Int32 */ number1, int /* System.Int32 */ number2, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.Divide(number1, number2);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_GetTestEnumName")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_TestClass_GetTestEnumName(NativeAOT.CodeGeneratorInputSample.TestEnum /* NativeAOT.CodeGeneratorInputSample.TestEnum */ testEnum, void** /* System.Exception */ __outException)
	{
	
	    try {
			System.String __returnValue = NativeAOT.CodeGeneratorInputSample.TestClass.GetTestEnumName(testEnum);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefValueAndReturnOriginalValue")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefValueAndReturnOriginalValue(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, int* /* System.Int32 */ valueToModify, int /* System.Int32 */ targetValue, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
		System.Int32 valueToModifyConverted;
	
		if (valueToModify is not null) {
			valueToModifyConverted = *valueToModify;
		} else {
			valueToModifyConverted = default(System.Int32);
		}
	
	
	    try {
			System.Int32 __returnValue = __selfConverted.ModifyByRefValueAndReturnOriginalValue(ref valueToModifyConverted, targetValue);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (valueToModify is not null) {
				*valueToModify = valueToModifyConverted;
			}
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefEnum")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefEnum(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, NativeAOT.CodeGeneratorInputSample.TestEnum* /* NativeAOT.CodeGeneratorInputSample.TestEnum */ enumToModify, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
		NativeAOT.CodeGeneratorInputSample.TestEnum enumToModifyConverted;
	
		if (enumToModify is not null) {
			enumToModifyConverted = *enumToModify;
		} else {
			enumToModifyConverted = default(NativeAOT.CodeGeneratorInputSample.TestEnum);
		}
	
	
	    try {
			__selfConverted.ModifyByRefEnum(ref enumToModifyConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (enumToModify is not null) {
				*enumToModify = enumToModifyConverted;
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefBookAndReturnOriginalBookAsOutParameter")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_ModifyByRefBookAndReturnOriginalBookAsOutParameter(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void** /* NativeAOT.CodeGeneratorInputSample.Book */ bookToModify, void* /* NativeAOT.CodeGeneratorInputSample.Book */ targetBook, void** /* NativeAOT.CodeGeneratorInputSample.Book */ originalBook, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
		NativeAOT.CodeGeneratorInputSample.Book bookToModifyConverted;
	
		if (bookToModify is not null) {
			bookToModifyConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Book>((*bookToModify));
		} else {
			bookToModifyConverted = default(NativeAOT.CodeGeneratorInputSample.Book);
		}
	
		NativeAOT.CodeGeneratorInputSample.Book targetBookConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Book>(targetBook);
		NativeAOT.CodeGeneratorInputSample.Book originalBookConverted;
	
	    try {
			__selfConverted.ModifyByRefBookAndReturnOriginalBookAsOutParameter(ref bookToModifyConverted, targetBookConverted, out originalBookConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			if (bookToModify is not null) {
				*bookToModify = bookToModifyConverted.AllocateGCHandleAndGetAddress();
			}
	
			if (originalBook is not null) {
				*originalBook = originalBookConverted.AllocateGCHandleAndGetAddress();
			}
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			if (originalBook is not null) {
				*originalBook = null;
			}
	
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_GetCurrentBookByRef")]
	internal static void** /* NativeAOT.CodeGeneratorInputSample.Book */ NativeAOT_CodeGeneratorInputSample_TestClass_GetCurrentBookByRef(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			ref NativeAOT.CodeGeneratorInputSample.Book __returnValue = ref __selfConverted.GetCurrentBookByRef();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			void** __returnValueBoxed = (void**)System.Runtime.InteropServices.Marshal.AllocHGlobal(sizeof(void**)); *__returnValueBoxed = __returnValueNative;
	
			return __returnValueBoxed;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_IncreaseAndGetCurrentIntValueByRef")]
	internal static int* /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_TestClass_IncreaseAndGetCurrentIntValueByRef(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void** /* System.Exception */ __outException)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
	    try {
			ref System.Int32 __returnValue = ref __selfConverted.IncreaseAndGetCurrentIntValueByRef();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			int* __returnValueBoxed = (int*)System.Runtime.InteropServices.Marshal.AllocHGlobal(sizeof(int*)); *__returnValueBoxed = __returnValue;
	
			return __returnValueBoxed;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_Create")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ NativeAOT_CodeGeneratorInputSample_TestClass_Create(void** /* System.Exception */ __outException)
	{
	
	    try {
			NativeAOT.CodeGeneratorInputSample.TestClass __returnValue = new NativeAOT.CodeGeneratorInputSample.TestClass();
			void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_CurrentBook_Get")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Book */ NativeAOT_CodeGeneratorInputSample_TestClass_CurrentBook_Get(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
		NativeAOT.CodeGeneratorInputSample.Book __returnValue = __selfConverted.CurrentBook;
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_CurrentBook_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_CurrentBook_Set(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, void* /* NativeAOT.CodeGeneratorInputSample.Book */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
		__selfConverted.CurrentBook = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.Book>(__value);
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_CurrentIntValue_Get")]
	internal static int /* System.Int32 */ NativeAOT_CodeGeneratorInputSample_TestClass_CurrentIntValue_Get(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
		System.Int32 __returnValue = __selfConverted.CurrentIntValue;
		return __returnValue;
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_CurrentIntValue_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_CurrentIntValue_Set(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self, int /* System.Int32 */ __value)
	{
		if (__self is null) {
			throw new ArgumentNullException(nameof(__self));
		}
	
		NativeAOT.CodeGeneratorInputSample.TestClass __selfConverted = InteropUtils.GetInstance<NativeAOT.CodeGeneratorInputSample.TestClass>(__self);
	
	
		__selfConverted.CurrentIntValue = __value;
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_TestClass_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.TestClass);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_TestClass_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_TestClass_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.TestClass */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}




internal unsafe class NativeAOT_CodeGeneratorInputSample_Transformer
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_TransformString")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Transformer_TransformString(byte* /* System.String */ inputString, void* /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */ stringTransformer, void** /* System.Exception */ __outException)
	{
		System.String inputStringConverted = InteropUtils.ToDotNetString(inputString);
		NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate stringTransformerConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate>(stringTransformer)?.Trampoline;
	
	    try {
			System.String __returnValue = NativeAOT.CodeGeneratorInputSample.Transformer.TransformString(inputStringConverted, stringTransformerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_TransformDoubles")]
	internal static double /* System.Double */ NativeAOT_CodeGeneratorInputSample_Transformer_TransformDoubles(double /* System.Double */ number1, double /* System.Double */ number2, void* /* NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate */ doublesTransformer, void** /* System.Exception */ __outException)
	{
		NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate doublesTransformerConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate>(doublesTransformer)?.Trampoline;
	
	    try {
			System.Double __returnValue = NativeAOT.CodeGeneratorInputSample.Transformer.TransformDoubles(number1, number2, doublesTransformerConverted);
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValue;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return -1;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_GetAndTransformString")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Transformer_GetAndTransformString(void* /* NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate */ stringGetter, void* /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */ stringTransformer, void** /* System.Exception */ __outException)
	{
		NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate stringGetterConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate>(stringGetter)?.Trampoline;
		NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate stringTransformerConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate>(stringTransformer)?.Trampoline;
	
	    try {
			System.String __returnValue = NativeAOT.CodeGeneratorInputSample.Transformer.GetAndTransformString(stringGetterConverted, stringTransformerConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_UppercaseString")]
	internal static byte* /* System.String */ NativeAOT_CodeGeneratorInputSample_Transformer_UppercaseString(byte* /* System.String */ inputString, void** /* System.Exception */ __outException)
	{
		System.String inputStringConverted = InteropUtils.ToDotNetString(inputString);
	
	    try {
			System.String __returnValue = NativeAOT.CodeGeneratorInputSample.Transformer.UppercaseString(inputStringConverted);
			byte* __returnValueNative = __returnValue.CopyToCString();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_Transformer_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.Transformer);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Transformer_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Transformer */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, byte* /* System.String */ /* inputString */, byte* /* System.String */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate> m_trampoline;
	internal NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate Trampoline
	{
		get {
			NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate(void* context, delegate* unmanaged<void* /* context */, byte* /* System.String */ /* inputString */, byte* /* System.String */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate(NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate trampoline = (NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate)System.Delegate.CreateDelegate(typeof(NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate), this, invocationMethod);

		return trampoline;
	}

	private System.String __InvokeByCallingCFunction(System.String /* System.String */ inputString)
	{
		byte* inputStringConverted = inputString.CopyToCString();
	


		var __returnValue = CFunction(Context, inputStringConverted);
		var __returnValueConverted = InteropUtils.ToDotNetString(__returnValue);

		Marshal.FreeHGlobal((nint)__returnValue);

		return __returnValueConverted;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, byte* /* System.String */ /* inputString */, byte* /* System.String */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_Invoke")]
	public static byte* /* System.String */ Invoke(void* self, byte* /* System.String */ inputString, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate>(self);

			System.String inputStringConverted = InteropUtils.ToDotNetString(inputString);
		


			var __returnValue = selfConverted.Trampoline(inputStringConverted);
			var __returnValueConverted = __returnValue.CopyToCString();

			return __returnValueConverted;
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

			return null;
		}
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, byte* /* System.String */ /* inputString */, byte* /* System.String */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, double /* System.Double */ /* number1 */, double /* System.Double */ /* number2 */, double /* System.Double */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate> m_trampoline;
	internal NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate Trampoline
	{
		get {
			NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate(void* context, delegate* unmanaged<void* /* context */, double /* System.Double */ /* number1 */, double /* System.Double */ /* number2 */, double /* System.Double */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate(NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate trampoline = (NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate)System.Delegate.CreateDelegate(typeof(NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate), this, invocationMethod);

		return trampoline;
	}

	private System.Double __InvokeByCallingCFunction(System.Double /* System.Double */ number1, System.Double /* System.Double */ number2)
	{
	


		var __returnValue = CFunction(Context, number1, number2);
		return __returnValue;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, double /* System.Double */ /* number1 */, double /* System.Double */ /* number2 */, double /* System.Double */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_Invoke")]
	public static double /* System.Double */ Invoke(void* self, double /* System.Double */ number1, double /* System.Double */ number2, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate>(self);

		


			var __returnValue = selfConverted.Trampoline(number1, number2);
			return __returnValue;
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

			return -1;
		}
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, double /* System.Double */ /* number1 */, double /* System.Double */ /* number2 */, double /* System.Double */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Transformer_DoublesTransformerDelegate_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Transformer.DoublesTransformerDelegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate
{
	internal void* Context { get; }
	internal delegate* unmanaged<void* /* context */, byte* /* System.String */ /* return type */> CFunction { get; }
	internal delegate* unmanaged<void*, void> CDestructorFunction { get; }

	private WeakReference<NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate> m_trampoline;
	internal NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate Trampoline
	{
		get {
			NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate? trampoline;

			if (m_trampoline is not null) {
				m_trampoline.TryGetTarget(out trampoline);
			} else {
				trampoline = null;
			}

			if (trampoline is null) {
				trampoline = CreateTrampoline();
				m_trampoline = new(trampoline);
			}

			return trampoline;
		}
	}

	private NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate(void* context, delegate* unmanaged<void* /* context */, byte* /* System.String */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		Context = context;
		CFunction = cFunction;
		CDestructorFunction = cDestructorFunction;
	}

	internal NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate(NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate originalDelegate)
	{
		m_trampoline = new(originalDelegate);
	}

	~NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate()
	{
		if (CDestructorFunction is null) {
			return;
		}

		CDestructorFunction(Context);
	}

	private NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate? CreateTrampoline()
	{
		if (CFunction is null) {
			return null;
		}

		System.Type typeOfSelf = typeof(NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate);
		string nameOfInvocationMethod = nameof(__InvokeByCallingCFunction);
		System.Reflection.BindingFlags bindingFlags = System.Reflection.BindingFlags.Instance | BindingFlags.NonPublic;
		System.Reflection.MethodInfo? invocationMethod = typeOfSelf.GetMethod(nameOfInvocationMethod, bindingFlags);

		if (invocationMethod is null) {
			throw new Exception("Failed to retrieve delegate invocation method");
		}

		NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate trampoline = (NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate)System.Delegate.CreateDelegate(typeof(NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate), this, invocationMethod);

		return trampoline;
	}

	private System.String __InvokeByCallingCFunction()
	{
	


		var __returnValue = CFunction(Context);
		var __returnValueConverted = InteropUtils.ToDotNetString(__returnValue);

		Marshal.FreeHGlobal((nint)__returnValue);

		return __returnValueConverted;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_Create")]
	public static void* Create(void* context, delegate* unmanaged<void* /* context */, byte* /* System.String */ /* return type */> cFunction, delegate* unmanaged<void*, void> cDestructorFunction)
	{
		var self = new NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate(context, cFunction, cDestructorFunction);
		void* selfHandle = self.AllocateGCHandleAndGetAddress();

		return selfHandle;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_Invoke")]
	public static byte* /* System.String */ Invoke(void* self, void** __outException)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		try {
			var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate>(self);

		


			var __returnValue = selfConverted.Trampoline();
			var __returnValueConverted = __returnValue.CopyToCString();

			return __returnValueConverted;
		} catch (Exception __exception) {
			if (__outException is not null) {
				void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();

				*__outException = __exceptionHandleAddress;
			}

			return null;
		}
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_Context_Get")]
	public static void* Context_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate>(self);

		return selfConverted.Context;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_CFunction_Get")]
	public static delegate* unmanaged<void* /* context */, byte* /* System.String */ /* return type */> CFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate>(self);

		return selfConverted.CFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_CDestructorFunction_Get")]
	public static delegate* unmanaged<void*, void> CDestructorFunction_Get(void* self)
	{
		if (self is null) {
			throw new ArgumentNullException(nameof(self));
		}

		var selfConverted = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate>(self);

		return selfConverted.CDestructorFunction;
	}

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Transformer_StringGetterDelegate_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Transformer.StringGetterDelegate */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}


internal unsafe class NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers
{
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_UppercaseStringTransformer_Get")]
	internal static void* /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */ NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_UppercaseStringTransformer_Get(void** /* System.Exception */ __outException)
	{
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate __returnValue = NativeAOT.CodeGeneratorInputSample.Transformer.BuiltInTransformers.UppercaseStringTransformer;
			void* __returnValueNative = new NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate(__returnValue).AllocateGCHandleAndGetAddress();
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
			return __returnValueNative;
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
			return null;
		}
	}
	
	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_UppercaseStringTransformer_Set")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_UppercaseStringTransformer_Set(void* /* NativeAOT.CodeGeneratorInputSample.Transformer.StringTransformerDelegate */ __value, void** /* System.Exception */ __outException)
	{
	
	    try {
			NativeAOT.CodeGeneratorInputSample.Transformer.BuiltInTransformers.UppercaseStringTransformer = InteropUtils.GetInstance<NativeAOT_CodeGeneratorInputSample_Transformer_StringTransformerDelegate>(__value)?.Trampoline;
	
	        if (__outException is not null) {
	            *__outException = null;
	        }
	
	    } catch (Exception __exception) {
	        if (__outException is not null) {
	            void* __exceptionHandleAddress = __exception.AllocateGCHandleAndGetAddress();
	                
	            *__outException = __exceptionHandleAddress;
	        }
	
		}
	}
	
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_TypeOf")]
	internal static void* /* System.Type */ NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_TypeOf()
	{
	
		System.Type __returnValue = typeof(NativeAOT.CodeGeneratorInputSample.Transformer.BuiltInTransformers);
		void* __returnValueNative = __returnValue.AllocateGCHandleAndGetAddress();
		return __returnValueNative;
	}
	

	[UnmanagedCallersOnly(EntryPoint = "NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_Destroy")]
	internal static void /* System.Void */ NativeAOT_CodeGeneratorInputSample_Transformer_BuiltInTransformers_Destroy(void* /* NativeAOT.CodeGeneratorInputSample.Transformer.BuiltInTransformers */ __self)
	{
	
		InteropUtils.FreeIfAllocated(__self);
	}
	

}



// </APIs>
